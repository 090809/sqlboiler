// Code generated by go-bindata. DO NOT EDIT.
// sources:
// override/templates/17_upsert.go.tpl (5.932kB)
// override/templates/singleton/psql_upsert.go.tpl (1.365kB)
// override/templates_test/singleton/psql_main_test.go.tpl (5.182kB)
// override/templates_test/singleton/psql_suites_test.go.tpl (264B)
// override/templates_test/upsert.go.tpl (1.794kB)

package driver

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templates17_upsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\x5f\x6f\xe3\xb8\x11\x7f\xb6\x01\x7f\x87\xb9\xa0\xb8\x48\x85\xa3\xf4\x39\x85\x1f\xf2\x67\x6f\x1b\x5c\x37\xe7\x6e\x2e\x5d\xa0\x87\x43\x20\x4b\x23\x9b\x08\x4d\x6a\x29\x2a\x8e\xab\xfa\xbb\x17\x33\xa4\x2c\xc9\x96\xb3\xde\xed\x6e\xb1\xf7\x14\x8b\x1c\xce\xfc\x38\xf3\x1b\xce\x4c\xaa\xea\x0c\xfe\x14\x4b\x11\x17\x70\x31\x81\xe8\x92\x7e\x61\x11\xfd\x1a\xcf\x24\x82\xfb\x13\xdd\xc5\x4b\xdc\x6c\x46\x43\x96\x2d\x92\x05\x2e\x63\xb7\x4f\x27\x1a\x11\xf8\x0f\x44\xf7\xcd\xae\x3b\x21\x32\x88\x2e\xd3\xf4\xad\xd4\xb3\x58\xc2\x19\x2d\x9e\x9f\xc3\x43\x5e\xa0\xb1\x6f\x21\xb6\x16\x97\xb9\x2d\x20\x56\x20\x14\xad\x8d\x21\x56\x29\xa4\x1a\x79\xad\xcc\xd3\xd8\x22\x68\x03\x62\xae\xb4\x41\xd0\x0a\x12\xad\x32\x29\x12\x1b\x8d\x86\x59\xa9\x12\x08\x34\xfc\xb9\xaa\xdc\x1d\xa2\x87\xfc\x5e\xa8\x79\x29\x63\xb3\xd9\x84\xb5\x99\x80\x61\x28\x6d\x21\xba\xd3\xd7\x5a\x59\x7c\xb1\x9b\x4d\x62\x5f\x48\x17\x7d\x44\x7e\x71\x0c\x55\x85\x2a\x25\x98\xde\xf4\x2f\xea\xda\x9b\x83\x99\xd6\x72\xbc\xb5\x7e\xad\x65\xb9\x54\x05\xfc\xf6\x7b\x61\x8d\x50\xf3\xb1\x3f\xe0\xd7\xc7\xfe\x3a\xb5\xd8\x4c\x0b\x19\xf9\x8f\x10\xd0\x18\x6d\xa0\x1a\x0d\x07\x06\x6d\x69\x14\xe8\xc8\x41\x75\x48\xdb\x28\xf9\xe0\x5b\xb4\x37\x57\x41\x58\x55\x28\x0b\x64\xe4\x63\xa8\x37\xbc\xa4\xdf\x57\xe9\x66\x33\xde\xc3\xbe\x07\xfb\x75\xb4\xe1\x68\xb8\x19\x0d\x29\x7a\xde\x19\xee\x43\x64\x1c\x9b\x56\x38\xe9\xe7\x34\x56\x22\xd9\x0d\xec\xf4\x7f\x8b\x2c\xb0\xd2\x82\xd6\xd8\x55\xc7\x87\x7a\xfa\xdd\xc5\x9a\xa2\x2c\x32\xba\x07\xa5\xcb\x77\x16\xe8\xbf\x32\xae\x1f\x26\xa0\x84\x64\xa4\x83\x9c\x3c\x1f\xb0\xcd\x0f\x26\xce\xdf\x18\x13\xa0\x31\x61\x38\x1a\x0e\x36\x07\x69\x71\x88\x07\x7d\x34\x80\xb2\x10\x6a\x4e\xdf\xf8\x82\x49\x69\xb5\xf9\xac\x94\x6f\xe9\xce\xbf\x90\x24\xd3\x7d\xe7\x13\x14\xe7\xe8\x37\x1e\x54\x2b\x04\xfb\xcc\x69\xc4\xfd\x52\xeb\x54\x7f\x60\xfe\x5f\x8c\xea\x21\x7e\x9b\xe8\x04\xfc\x7b\x60\xcd\x36\x8a\xdf\x84\x20\xf7\x88\x1d\x97\x41\xaa\x93\x72\x89\xca\xc6\x56\x68\x05\x99\x36\xb0\xd0\x2b\xb0\x1a\x72\xa3\x73\x34\x72\x0d\x65\x81\xdd\x3b\xb3\xc9\xce\xb5\x8f\xe6\xd7\x1f\x9c\x5e\x4d\x71\x12\x19\x68\x98\xb4\xc2\xec\xab\x15\x4b\x14\xd1\x1d\xae\x82\x93\xaa\x8a\xa6\x4f\x73\xd7\x21\x5c\x80\xd2\x50\x55\x9d\xae\x81\x5c\xfc\x2c\x52\x4c\xd9\xed\x25\x3b\xe8\xc4\xf3\x62\x34\x1c\x50\x4b\x41\x04\x90\x14\xd2\x13\x2b\x96\x58\xd8\x78\x99\x3f\x3a\xc1\xc7\x05\xca\x1c\xcd\x09\x44\xb0\xa9\xe5\x1b\x92\xff\x4d\xeb\xa7\xc2\x31\xaa\x93\x0f\xa9\xbe\xc2\x4c\x1b\x74\xd1\x60\xa9\xa3\x93\xa3\x87\xdb\xcd\xa5\x1d\x6a\xc6\xcc\x71\x60\x44\xea\xdf\x37\x98\xc5\xa5\xb4\xdc\x40\x7d\x2c\xd1\x08\x2c\xa2\x3b\xad\xfe\x85\x46\xfb\xad\x7b\x24\x52\x78\xca\xdc\xe8\x95\x6a\x48\xe3\xdd\xfe\x41\xd8\x85\x17\x1e\x83\x0e\x59\xf3\xf9\x39\x5c\x95\x42\xa6\x90\xc4\xc9\x02\xe1\x09\xd7\x20\xd4\x99\x14\x0a\xa1\x9c\x4b\x21\xd7\x70\x06\xcb\x75\xf1\x51\xc2\x73\x01\x39\xfd\xcd\x8d\x9e\x49\x5c\x16\xa3\xe1\x60\x56\x66\x84\xa7\xb0\x66\x19\xab\xb9\x44\xaa\x20\x57\x65\x96\xa1\x09\x42\xe7\xaf\x3d\x0e\xf1\x6d\x67\x65\x16\x7d\x30\xc2\xe2\xd5\xda\x62\x70\x6a\x4f\x39\x56\x40\x6c\xed\x15\xc8\x4e\x7d\x30\x77\x37\x22\xde\xa0\xa0\x3f\x8e\x21\x21\x2c\x26\x56\x73\xdc\xe3\x68\x57\xe9\x3d\xf3\x35\x48\x5e\x55\xba\x2b\x5d\x58\x93\x68\xf5\x1c\xdd\x5a\x1d\x07\x1d\xa6\x47\x3f\x0b\x95\x86\xfd\x40\xba\x82\xd7\x5a\x7e\x7d\x2c\xdd\xf7\xe3\x15\x2c\x5d\xc1\x2f\xc5\xb2\xaf\xb7\x45\xce\xd7\xf5\x11\xb9\x2e\x26\x40\xfb\x7e\x8b\x76\x1a\xf6\x4c\xcb\x9a\x3d\xb3\x32\x0b\x7d\x2a\xf6\x12\xda\x65\xdd\x35\x51\xf6\x5d\x69\xa3\xf7\x7f\xd7\xc9\x13\x2b\x63\x16\x8f\x1d\x99\x53\x32\xf6\x69\x05\xbf\x3d\xe1\xfa\xf7\xe3\x4d\x3d\x28\xe9\x8d\x8d\x86\x83\xe7\xd8\x70\x2a\xf3\x63\xc5\x2b\x22\x83\x1f\xbc\x75\x76\x46\xdd\x96\x1a\xb4\x04\xa7\x1b\x83\xdb\xd6\x17\xa5\x2f\x1d\x38\x84\xe3\x52\xca\xfa\x65\x7d\x4d\xac\x27\xd5\x8f\x14\xd7\xa5\xed\x9c\x68\xc2\xca\xdf\xe4\xdd\x81\x2f\x8b\x17\x93\x1d\x62\x3f\xb4\xbe\xbe\xd2\x45\xa6\x46\x2c\x63\xb3\xfe\x19\xd7\x6d\x69\xe7\xf6\xde\x97\xe5\xc7\x1f\x41\xa2\xf2\xa9\x19\x52\x49\xf9\x8b\x0b\xc1\xa7\x2b\x4a\xa9\x78\xd2\xb4\xda\xd7\x8e\xdd\xfa\x42\x45\xaf\x94\x29\xbf\xed\x33\x7e\x2d\xbd\x23\x12\x86\x06\x52\x14\xae\xde\xf8\x82\x33\xa8\xdf\x1f\xf2\xd4\xce\x5b\xe4\xe1\x13\xd4\x7a\xa7\x03\x76\x7b\x74\x02\xcb\xf8\x09\x83\xa6\xbc\xd2\x91\x63\x9d\xc5\x4f\x00\x29\xcb\xd7\x5b\x33\xe3\x43\xc9\xb0\x7f\xda\x5f\x65\xe0\xf2\x29\xa2\x82\xb3\x86\x89\xbb\xbb\x4b\x88\x7f\xd0\xd2\x54\x17\x76\x6e\xb0\x08\x52\x11\x4b\x24\x0b\x27\x55\xd5\x1e\xde\x37\x9b\x93\xbe\x4e\xd0\xa0\xad\x97\x9b\x7e\xa2\x6e\x18\x7c\x88\x9d\xe5\xe7\x58\x96\xf8\x2e\xce\x73\xf6\x00\xa5\x5a\x53\xfe\xae\x84\x4a\xfd\xd6\x21\xbf\xfc\xba\xce\xf1\xe0\xb5\xb7\x6a\xb7\x76\x07\x75\x89\x6f\x97\xe6\x6e\x6d\x76\x6e\xf1\x01\x34\x68\x43\x92\xdd\xc6\x8e\x31\x1b\xb4\xdf\x1a\x31\x19\x66\x8b\x7d\x78\x77\x00\x3b\xc4\x9b\x6d\x37\xc4\x2e\xe5\xd7\x1b\x33\x0a\x5a\x74\xab\x52\x61\x30\xb1\x41\xbd\xf0\x4f\x92\xf8\x25\x0b\x34\xb3\xe8\x39\x96\x9d\xae\x83\x77\x8b\x9f\x8c\x5e\xd6\x57\x61\x8d\xfe\xd1\xed\x44\x2c\xf4\x4f\xa4\x03\x44\xad\xa2\x50\x16\x4d\x16\x27\x58\xf9\x86\x8a\xf3\x60\xc7\x6d\x6d\x9f\xd6\x47\x1b\xfb\x53\x6b\x0e\x5b\x6f\x29\x69\xb5\x7f\x9d\x4e\xb9\x69\xe6\xb8\x25\xbd\xc1\x59\x39\x7f\xa7\x53\xdf\x79\x64\x4b\x1b\xfd\x94\x1b\xa1\xac\x54\x41\x23\xc0\xf5\xcc\xd4\x56\x38\x1f\xc2\x23\xc4\xc9\x77\xe1\xb6\xa3\xe3\xfe\xa6\x6b\xfd\xb6\x60\xf9\x20\xb1\x2f\x6e\xe6\x1a\xac\xf8\x28\xd7\xc9\x1d\x75\x74\x69\x16\xdc\x33\xbc\x3a\x06\xdd\xaa\x1f\x53\x33\x2f\x1d\x13\x8e\x7e\x5f\x0e\x1c\xcd\xa9\xb7\x8d\xf8\x61\x78\xaf\x57\x41\x0b\x8c\x33\x1a\x45\x51\x18\xdd\x27\x31\xe7\x0d\x05\x95\x16\x9c\xd2\x96\x67\xfa\x74\x79\x6b\x01\xf7\xd2\x9f\xa5\xb7\xbe\xdd\x36\x53\x26\x13\x28\x3e\xca\xe8\x8d\x31\x77\xfa\xbd\x5e\xf9\x96\xc5\x1b\xa5\x1c\x3a\x3f\x87\xfa\x59\xe3\x69\x50\x9d\x5a\xcf\x5f\x88\xd5\xda\x2e\x68\x6c\x5c\x2d\x50\x81\x5d\xa0\xc1\xd3\x82\xc6\x11\xf7\x94\x6d\xd3\xac\xd5\xc8\x1e\xf0\xd7\x63\xfd\x32\xf0\x35\x69\xf2\xea\x77\xd7\xbe\x77\xf6\x4f\x7e\xda\x39\xbb\xbe\x68\xcd\x32\xfd\x33\x08\x95\x49\x1a\xb1\x69\xbe\xe6\x37\xfd\x73\x8a\x65\x6b\xf0\xda\x6d\x86\x8e\x6b\xb1\xb6\xcd\xdc\x11\xf2\xdc\xbc\xc1\xc4\xdd\xfb\x78\x13\x4d\x13\x37\x78\x7d\xe4\xdb\xfe\xeb\x34\xd5\x97\x99\x45\xf3\x45\xe3\x5e\x3d\xce\x35\x61\xf4\x6a\x95\x90\xdd\x51\x6f\x33\x1a\xfe\x37\x00\x00\xff\xff\xac\xac\x70\x9e\x2c\x17\x00\x00")

func templates17_upsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates17_upsertGoTpl,
		"templates/17_upsert.go.tpl",
	)
}

func templates17_upsertGoTpl() (*asset, error) {
	bytes, err := templates17_upsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/17_upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd4, 0x1b, 0x46, 0x4a, 0xbf, 0x4c, 0x87, 0x92, 0xc1, 0xe2, 0x7f, 0x1c, 0x97, 0x4e, 0xb2, 0x56, 0xe1, 0xea, 0x6d, 0x7, 0xec, 0x88, 0xb1, 0xb2, 0xd9, 0xdb, 0x84, 0xa2, 0xc9, 0xf1, 0x74, 0xbf}}
	return a, nil
}

var _templatesSingletonPsql_upsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\xdd\x6a\xdb\x4c\x10\xbd\x96\x41\xef\x30\x59\x08\x91\x60\x51\xbe\xdc\x7e\xe0\x8b\xc4\x52\x52\x15\x23\xc5\x96\xd4\x16\x4a\x2f\xf4\x33\xeb\x2c\xc8\x92\xbb\x3f\x6e\x43\x93\x77\x2f\x2b\xc9\xb2\x12\xa7\x84\x80\xb1\xc5\xce\x9c\x33\x67\x8e\xcf\xea\xf2\x12\x0a\xcd\xeb\x2a\xdb\x49\x14\x6a\xa5\x51\x3c\xde\xb7\x52\x6d\x04\xca\xbe\x20\x21\x87\x64\xb5\x04\xa9\x72\x85\x5b\x6c\x14\x48\x25\x78\xb3\x01\x2d\xcd\xb7\x7a\x40\xd0\x1d\xd6\xcf\x55\x0e\x3b\xd1\xee\x79\x85\x95\x67\xcf\x98\x6e\xca\x7f\x72\x3b\x15\xcf\xa1\x12\x7c\x8f\x42\x7a\x3e\xcf\x6b\x2c\x15\x05\x95\x17\x35\x46\xf9\x16\x87\x19\x14\xf4\xae\xca\x15\xc6\xcd\xa2\x6d\x58\xcd\x4b\x05\x45\xdb\xd6\x14\x04\xaa\x43\x8d\x42\x39\xd4\x28\xfc\x7a\xe0\x0a\x6b\x2e\x15\x7c\xff\xd1\x33\xb8\x07\xb5\x7f\xec\x99\x75\x68\x84\xb9\x39\xdd\xe6\xcd\xa6\x46\x2f\xac\xb0\x51\x2b\xdd\x2a\x4c\x6a\x5e\xa2\x11\xe6\x2d\x57\x14\xcc\xef\x7a\x75\x64\x77\xed\x99\x75\xe4\xff\x08\xc3\x88\x32\x14\x02\x3f\x06\x16\x68\x60\xf6\xcc\x2a\x34\x83\xff\xa7\xc8\x3b\x54\x37\x9a\x31\x14\x8e\xe1\xad\x90\xa1\x98\x54\xef\xf5\xa1\x5a\x68\xd6\x33\x94\x6d\xad\xb7\x8d\x34\x2c\xc4\x0f\x6e\xaf\xb3\x65\x0a\x5f\xae\x97\x59\x90\x10\x7b\x66\x71\x06\x35\x36\xce\x51\x2c\x9c\xcd\xe1\xbf\xce\xb7\x11\x39\x07\xb6\x55\x5e\xb2\x13\xbc\x51\xcc\x21\xce\xb9\x74\x07\x06\x30\xcf\x84\x9a\x66\xab\x77\x5c\x7a\x9f\x5b\x3e\xe1\xa3\x40\x28\x10\x77\x6c\x39\xe8\xac\xf3\x12\x1f\xda\xba\x42\xd1\x85\xc2\xcb\x24\x86\x4d\x85\xbf\xa7\x05\xfa\x4a\x1a\x85\x2b\x0a\x57\xae\xd9\xfb\xb9\x5b\xcd\xc8\xba\x1d\x64\x99\x01\x85\x66\xdd\x20\x12\x46\x49\xb0\x4e\x21\x8c\xd2\x18\xce\xa5\xf9\xc4\x11\x2c\xe2\xe8\x76\x19\x2e\x52\xe8\x05\x8f\xa9\xa3\x93\x5d\xcd\x73\x6f\x1b\x67\x70\x76\x12\xc3\xa7\xa7\x4e\x52\x7f\xee\xc2\x7c\xb4\xaa\xd0\xcc\xfb\x2a\xb8\xc2\xa4\x73\xc1\x21\x7e\x0c\x51\x9c\x7e\x0a\xa3\x3b\xd2\xe9\x05\xac\x25\xbe\xea\xbd\x79\x54\xe8\x5c\x38\x17\xee\x5b\x0c\x2f\xec\x3c\x66\xbd\x73\xf3\x4d\x00\x71\xc1\x8f\x21\xbb\xf7\xaf\xd3\x00\x92\x20\x05\xd2\x2f\x62\xb1\x56\x00\xa7\xb0\x37\x09\x10\x79\xb3\xc1\xe1\x0a\xf5\x6a\xcc\xa2\x7c\xf2\xa7\x9f\xe8\xa3\xbd\x3e\x63\xb9\x65\x59\x3f\x4d\x66\xab\x97\x91\x3c\x86\xf9\x24\xc7\xfb\x1e\xfb\x5a\x6b\xcf\xf2\x76\x8d\xc0\x1c\x82\x6f\x8b\x65\xe6\x07\xbe\x47\xde\xc5\x3f\x8f\x69\x18\xa2\x6c\xae\xce\x64\x9f\x53\xfa\x75\x90\x66\xeb\x28\x8c\xee\x80\xbc\xef\x7c\xf7\xca\x19\x4d\xef\x07\x09\x54\x5a\x34\x60\x70\x03\xc4\xb5\x67\xcf\xf6\xec\x6f\x00\x00\x00\xff\xff\xbc\x93\xae\x23\x55\x05\x00\x00")

func templatesSingletonPsql_upsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSingletonPsql_upsertGoTpl,
		"templates/singleton/psql_upsert.go.tpl",
	)
}

func templatesSingletonPsql_upsertGoTpl() (*asset, error) {
	bytes, err := templatesSingletonPsql_upsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/singleton/psql_upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf7, 0x97, 0x38, 0xaa, 0x78, 0x7d, 0x6f, 0x9c, 0x26, 0x48, 0x44, 0x9b, 0xe6, 0xaa, 0xf2, 0x73, 0x23, 0xa1, 0x89, 0xff, 0x69, 0x85, 0xa9, 0x7c, 0xdf, 0x17, 0x77, 0xbc, 0x7e, 0x7d, 0x3d, 0x7}}
	return a, nil
}

var _templates_testSingletonPsql_main_testGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x6d\x6f\x23\xb7\x11\xfe\x2c\x01\xfa\x0f\x13\x01\x0e\x76\xaf\x32\x15\xf4\xe5\x8b\x03\x21\xb0\x65\xd9\x3d\xc4\x67\xfb\x24\xb5\x41\xd1\x6b\x13\x6a\x77\x56\x26\xbc\x4b\xd2\x24\xd7\x3e\x35\xb8\xff\x5e\x0c\xc9\x95\x56\xb2\xa4\xbb\x6b\x10\xa0\x9f\x6c\x91\xcf\x0c\xe7\xe5\x99\xe1\x70\x9f\xb9\x01\xb3\xfc\x78\x7f\x7d\xf5\x88\x2b\x18\x81\xc1\x25\x7e\xd4\xec\x5d\x6d\xdd\x58\x55\x5a\x94\x98\xfc\x92\xfc\x50\xa5\xff\x3e\xbf\x99\x4f\xa6\x30\x3f\xbf\xb8\x99\x00\x7b\xf3\x41\x7e\xb0\x7f\x38\xbf\xbc\x84\xf1\xdd\xed\x6c\x3e\x3d\x7f\x7b\x3b\x07\xf6\xe6\x07\xb8\xba\x9b\x4e\xde\x5e\xdf\xc2\x8f\x93\x7f\xd0\xef\xef\x3f\xc8\x5f\xd2\x5e\xb7\xd7\x75\x2b\x8d\xa0\x97\x73\xb4\x0e\x0d\x58\x67\xea\xcc\xc1\xaf\xbd\x6e\x27\x5f\x8c\x95\x94\xf0\xc6\x3e\x95\xec\xf2\x82\xa0\x9d\x7c\x71\xcb\x2b\x04\x42\x09\xb9\xec\x75\x3b\x0f\xca\x3a\x80\xd6\x42\x6d\xd1\x6c\x2d\x68\x6e\xed\xd6\x82\xb5\x65\xa5\x72\x6c\x21\x94\xf1\x3a\x84\x74\xfe\x10\xbd\xbc\xe7\xd6\x5e\x89\x72\x83\xe9\x75\x3b\x0e\xad\xbb\xbc\xf0\xc7\x6f\x54\x3d\x0a\x3d\x7b\x7f\x33\xae\x72\x58\x28\x55\xf6\xba\x9f\x08\x5a\xd4\x32\x03\x21\x85\x4b\xd2\xe8\xc7\x3b\x2e\x24\x8c\xe0\xdb\xc6\xcb\x5f\x3f\x45\xe8\x70\x08\x16\x5d\xad\x21\xaf\x2b\x6d\xc1\x3d\x20\xe4\xdc\xf1\x05\xb7\x08\x36\x7b\xc0\x8a\x03\x97\x39\x88\x8a\x6c\xb4\x20\x1c\x19\xa9\x80\x83\x43\x5a\xe2\x66\x05\x86\xcb\x5c\x55\xe5\xca\x2b\x5b\xa2\x44\xc3\x1d\xe6\x40\xe6\xb6\x74\x29\x70\x0f\xdc\xf9\x55\x0b\x19\x97\xb0\x40\x30\xb5\x04\xbe\xe4\x42\x5a\x47\x9a\x6b\x2b\xe4\x92\x4c\xd8\xd1\x64\x9f\xca\x85\x12\x25\x1a\xb8\x9b\xbe\x03\xcd\xb3\x47\xbe\x44\x16\xdd\x4c\x34\xbc\x69\xbc\x4a\x83\x2f\x49\x0a\x68\x8c\x32\xde\x77\xe2\x10\x1a\x13\x56\x7c\x1c\x9f\x85\x46\xc3\x66\xe8\x2e\xb1\xe0\x75\xe9\x92\xbe\xa6\x04\x07\x6f\xfb\x03\xe8\xeb\x7a\x51\x8a\xac\x9f\x1e\xc6\x52\x30\xfa\x03\xf8\xcb\x9f\xff\xf4\xc7\x23\xa8\x98\x67\x52\x69\xf0\xa9\x16\x06\xfb\x69\xc8\x2f\x8b\x34\x1a\x41\x10\xbd\x46\x37\xf3\x29\x8d\x92\xf9\x42\xf2\xca\xa3\x3b\x9a\x79\x86\x1d\x42\xd2\x66\xc4\x79\xe2\x1d\xc2\xd1\x66\xc4\x79\x3e\x1e\xc2\xd1\x66\x83\x23\x56\xb6\x70\x6f\xe5\x96\xfb\x01\xd4\x70\xf9\x90\xbe\x26\x06\x01\xdd\xa2\xf0\x21\x01\x82\x6c\xb9\xdf\xa2\x78\x4b\xe6\x42\xa9\xb2\x39\xe2\x51\xd0\xdf\xac\xca\x63\x78\x29\xdd\x23\x78\xe6\x25\x67\x17\xb8\x14\xf2\xef\xbc\x14\x39\x77\x42\xc9\x24\x65\xf1\x07\x26\xbd\x6e\xa7\xe3\x31\xe1\xf8\x5b\xe5\x26\x95\x76\xab\x24\x04\x92\x68\xb0\x89\xdb\xe0\x30\x98\x12\xd0\x80\x43\x32\x36\xe0\x5b\xe5\x12\xff\xcf\xe4\xa9\xe6\xa5\x4d\x42\x4c\x07\xf0\x5d\x23\x10\x02\x79\x4c\x7d\x20\x4a\x83\x6f\x02\x73\x44\x20\x06\xbc\x91\x58\xc7\x9f\x44\x52\x36\x7e\xc0\xec\x31\x09\x61\x12\x85\x2f\x8c\x6f\x46\x20\x45\xe9\x6b\xa5\x63\xd0\xd5\x46\xd2\x72\xaf\xdb\xf1\xfd\xa1\x33\x1c\x82\x28\x40\x2a\x5f\xb9\x54\x9f\x97\x17\x40\x24\xc1\x3c\xa8\x28\x51\x26\xed\xc4\xa6\x30\x1a\xc1\x77\x41\xdd\x70\x08\x63\x83\xdc\x21\xf0\xd8\x25\xc4\x7f\x30\x87\x7c\x01\xe4\x06\x23\xc8\x0e\x27\xd6\x28\x36\x73\x7c\x51\x62\xd8\x58\xc7\x21\x5d\x9b\x15\x8d\x1f\x81\x66\x15\x7f\xc4\xfb\xeb\xa6\x63\x26\xe9\xf7\x5f\xe2\x96\x28\xe0\x9b\x2d\x6e\x79\x60\x4b\x6b\x6e\x94\x9e\x7b\xd3\xf6\x69\xdc\x56\x49\x3a\xb7\x84\x33\xef\xf5\xd7\x88\xd3\x1f\x6a\xc1\x64\xca\xd9\x08\xf0\x23\x66\x6c\xac\xaa\x8a\xcb\x3c\xe9\xeb\xe5\xcf\xb4\x47\x8d\xe4\xf4\x34\xf4\xa9\x53\x25\xcb\x55\x7f\x00\xed\xc8\x34\x0a\xd8\x44\x3e\xc3\x08\xb8\xd6\x28\xf3\x44\x59\xfa\x2d\x0c\xb1\x9f\xf0\x7a\x39\x91\xcf\x49\xca\x18\xf3\x32\xc1\xd4\xfd\xc7\xda\xa7\xd2\x1f\xd1\xca\xee\x96\xc8\x57\x1c\xe4\xd3\x30\x80\x17\x3a\x45\x28\x76\x2f\x34\x26\x6d\x9b\x67\x2e\xa7\x20\x9d\x8d\xe0\xdb\xc5\xca\xa1\x65\x17\x75\x51\x84\x7b\xaa\x75\xe0\x11\x54\xdb\xff\x99\xcb\x55\x4d\xbd\xeb\x65\x67\x35\xe4\x67\xeb\xc8\x20\xb9\x71\x69\xe6\x72\x7f\x55\x4a\x7c\xb9\xfa\x11\x57\x97\x68\x9d\x51\x2b\x34\xc9\x7a\x10\x19\x80\x49\x5f\xc9\x04\xcd\x3b\x86\x06\xdd\x6b\x5e\x6c\x0c\xe1\xc6\x7d\x86\x16\xca\x58\xf6\x93\xe1\x3a\x41\x43\xbd\xa8\xe0\xa2\xa4\x3b\x55\x81\x25\x61\x88\x8c\x80\x2c\xe4\xca\xb7\xca\x1d\x16\xb6\xcd\xfb\xed\xe7\xd9\xa7\xf2\xd5\x61\x7b\x9d\xfb\x89\x8b\xfd\x67\x15\x95\x63\xf7\x46\x48\x57\x4a\x3a\x24\x7d\xb5\xb8\x95\x96\xd8\xd8\x92\x34\xfd\x52\x43\x5f\xb8\x70\x50\x28\x73\x30\x36\xf4\xe7\x67\x22\x05\x1b\x97\xca\x62\x92\xc2\x70\x08\xe7\x05\xcd\x7c\x4d\xe5\x09\x0b\xb9\x92\x38\x80\x8c\x10\x7e\x1a\x7a\x31\xc2\x21\xa0\xcc\x41\x15\x7e\x41\x0b\x8d\x3b\xbe\x6f\x42\xfd\xbf\x7b\xbf\x43\x9d\xdf\xe2\xff\xbe\x5c\xc5\x00\x44\x3d\x52\x6c\x8d\x8a\xdb\x33\x94\xa9\xe5\xb8\xca\x13\x4b\x85\x30\x68\x14\xc5\x91\x73\x00\xdc\x2c\x2d\x30\xc6\xc2\xef\xf6\xa4\x95\xed\xe9\x21\x51\x3a\x88\xc5\x96\x93\x7d\x6d\xe3\x88\xb7\x8c\x37\x28\xa5\xb0\xc6\xeb\x25\x6b\x95\x6b\x30\xc7\xb2\x5b\x7c\x99\x22\xcf\xd1\x44\xf8\xda\x73\x1b\x7a\xc2\xde\x06\x63\x8f\x34\x9f\xac\xdd\x4f\x82\x92\xcd\x6a\x48\xbf\x8d\xc5\xde\x10\xe2\x6c\x04\xb4\x3f\xad\xe5\x3e\x2a\xb4\x93\xde\xa4\xcf\xd4\x52\x0a\xb9\x3c\xeb\xaf\xe3\x1d\x22\x96\xee\x0a\x04\x03\xb6\xc9\xb1\xb3\xff\x8a\x3c\x7b\x6e\xbf\x2f\xa1\x41\xcc\x02\xfc\xf3\x5f\x21\xb6\xde\xfa\x28\xd8\xac\xad\x1d\x9a\x69\x32\xa0\x48\xfa\xf7\xd7\x7f\xbd\x9b\xcd\x47\x27\xd6\x5f\x1c\x34\x10\x85\x61\x65\x07\x74\x7f\x37\x9d\x8f\x4e\x72\x0f\xa2\x21\x68\x2f\xe8\x6f\xb3\xc9\xb4\xd1\x44\x73\xd8\x7e\x4d\xe7\xb3\xd9\xd5\xdb\x9b\x49\x03\xdc\xbc\x9d\x3c\xfc\xd3\x61\x07\x77\xe7\x86\x16\x95\x5d\xa5\x07\x4d\x2a\x85\xaa\x9d\x28\xd9\x1c\x2b\xed\x71\x7d\xff\x44\x58\xae\x07\xe5\xa3\x63\xd4\xc1\x6a\x0d\xe5\x0e\x4a\xd3\x58\x0a\x85\x28\xc3\xb8\x1b\xd2\x43\x2e\x5e\x45\x17\xbd\x29\xfd\x13\x7b\x76\x92\x9f\x69\x65\xdd\xd2\xa0\x3d\x6b\x85\xb7\x89\xe0\x3a\x48\xed\xb1\x8c\x8c\x6c\x57\xcc\x6b\xc5\x8d\x2a\x8f\x0c\x06\xb4\x50\xa5\x24\x58\x7a\xd4\xa8\x93\x83\xe6\x34\xb3\xeb\xff\x9d\x61\x9b\x79\xe6\x77\x37\xae\x4d\x48\x18\x81\xab\x34\xf3\x13\x6d\xba\x29\x26\x5a\x8b\x37\xd2\x61\xb2\x6e\x4f\x94\x2d\xaa\x46\x25\x9a\xc5\xb6\xed\xe9\x19\xd0\xf9\xe2\xf5\xf4\x76\x48\x7f\x7b\xdc\xfd\x9c\x76\xc2\x7a\xdd\xfd\xd3\x53\x51\x9c\xe2\x47\x61\x9d\x3d\x70\xd4\x70\x08\x0e\xb9\xc9\xd5\x8b\xf4\x37\x43\xed\xd0\x42\x56\x22\x97\xb5\x06\xc7\xed\xa3\x85\x97\x07\x94\xfe\x66\x0d\xdf\x06\x0a\x21\x85\x7d\x68\x5a\xe2\x5e\x63\x1b\x8d\xc7\x1e\xfa\x5b\xb3\xbc\xff\x8e\xd3\x04\xf9\xf3\xef\x83\x4e\x23\x02\xa3\xd0\x23\x7f\x97\x07\xc3\x56\x2b\x56\x96\x4d\xb1\x52\xcf\xf4\xd6\x69\xb5\xb0\x23\x84\x50\x92\xfc\x4f\xe2\xc7\xa9\x41\xf0\x3b\x7c\xef\x11\xc5\xda\xe9\x7d\x7e\x36\x7b\x83\xe0\x5c\x34\x64\x37\x7e\x1b\x54\xbc\xe5\x9e\x4a\x76\xa7\x51\x26\xfd\xa6\x0d\xf5\x07\x90\x1b\xf1\x8c\x86\xdd\xcf\xde\xdf\x5c\xd4\xa2\xcc\xdf\xd7\x68\x56\xf1\xf6\x69\x1e\xd2\xa1\x4c\x5e\xd7\xdd\x6e\x55\xc6\xa7\x6a\x7a\xbc\xa9\x4a\x51\x0e\xf6\xdd\x65\x3b\x4e\x7d\xea\x75\xff\x1b\x00\x00\xff\xff\xc0\x13\x78\x00\x3e\x14\x00\x00")

func templates_testSingletonPsql_main_testGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonPsql_main_testGoTpl,
		"templates_test/singleton/psql_main_test.go.tpl",
	)
}

func templates_testSingletonPsql_main_testGoTpl() (*asset, error) {
	bytes, err := templates_testSingletonPsql_main_testGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/psql_main_test.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x32, 0xdd, 0xc5, 0x6f, 0xc, 0xb1, 0xb6, 0x15, 0x67, 0xbb, 0x35, 0xc, 0x43, 0x95, 0xe0, 0xe3, 0x65, 0xb7, 0xc9, 0x90, 0xbd, 0x2a, 0xc4, 0x76, 0x34, 0x9e, 0x4e, 0x3c, 0xe0, 0x8c, 0x1e, 0x73}}
	return a, nil
}

var _templates_testSingletonPsql_suites_testGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xc1\xca\xc2\x30\x10\x84\xef\x85\xbe\xc3\x52\x72\x68\x7f\xda\x3c\xc0\x0f\x1e\x3c\xea\x41\x44\xda\x07\x88\x76\x5b\x02\x71\x2d\xdd\x2d\x08\x21\xef\x2e\x31\x16\x29\x78\x9b\x61\x26\x5f\x66\x87\x85\x6e\xd0\x22\x4b\x37\x31\xce\x52\x0a\xfc\x09\xb2\x58\x1a\x75\x5b\x81\xcf\x33\x00\xef\x1b\x98\x0d\x8d\x08\xca\x52\x8f\xcf\x1a\x94\x98\xab\x43\xf8\xdf\x81\x6e\xa3\xe2\x10\xd6\xa2\x1d\x3e\xa9\x3e\xf0\xf1\x61\xe9\x9d\x43\xf3\x2d\xa0\xe3\x8d\x57\xc6\x59\xc3\x91\xa5\xf4\x3e\x4a\xe4\x04\x5d\x39\x27\x73\xc7\x54\x17\x7d\x59\xa8\x2c\xbc\x4f\x6f\x74\x37\x9d\xdd\x32\x1b\x17\x42\x51\x43\x5c\xfd\x23\x49\x67\x55\xe9\x37\xa4\x7e\x33\x65\xb5\x21\xcf\x5e\x01\x00\x00\xff\xff\x27\x41\xb1\xc4\x08\x01\x00\x00")

func templates_testSingletonPsql_suites_testGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonPsql_suites_testGoTpl,
		"templates_test/singleton/psql_suites_test.go.tpl",
	)
}

func templates_testSingletonPsql_suites_testGoTpl() (*asset, error) {
	bytes, err := templates_testSingletonPsql_suites_testGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/psql_suites_test.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc2, 0x77, 0x23, 0x9d, 0xca, 0x7c, 0x5, 0xb3, 0xeb, 0xa, 0x78, 0xc, 0x30, 0x77, 0xe2, 0x6, 0x5b, 0x35, 0x61, 0xeb, 0x5f, 0xd9, 0x83, 0x3f, 0xb0, 0x9f, 0xb6, 0x96, 0x74, 0x62, 0x21, 0x4}}
	return a, nil
}

var _templates_testUpsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x54\x4d\x6f\xdb\x38\x10\x3d\x4b\x80\xfe\xc3\xac\xb1\xbb\xa0\x0a\x85\x41\xaf\x29\x7c\x70\x3e\x0e\x41\x51\xc3\x88\xe5\x73\xc1\x48\x23\x87\x30\x4d\x0a\xe4\xa8\xb6\x2b\xf0\xbf\x17\xa4\x92\xd8\x49\x9d\xc2\x28\x5a\xa0\x3d\xd8\x12\x89\x99\xf7\xde\xbc\x99\x51\xdf\x9f\xc1\xbf\x42\x49\xe1\xe0\x62\x0c\x7c\x12\xde\xd0\xf1\x52\xdc\x2b\x84\xe1\xc1\xa7\x62\x8d\xde\x67\x69\xd3\xe9\x0a\x08\x1d\xf5\xfd\x90\xc2\x17\xed\x4c\x75\x56\x28\xef\x17\xad\x43\x4b\x8c\xe0\x5d\x08\x90\x7a\xc9\xcb\x1c\xfa\x2c\x4d\x88\xcf\x84\x15\x4a\xa1\x62\x79\x96\x66\x69\x22\x1b\x50\xa8\xd9\x33\xc6\xb5\xd9\xe8\xb9\xd4\xcb\x4e\x09\xeb\xfd\x44\xa9\x2b\xa3\xba\xb5\x76\x39\x8c\xc7\x3f\x8a\x9c\x59\xb9\x16\x76\xf7\x11\x77\xcf\x09\x81\x2f\x21\x3e\x5f\xc9\x96\x8d\xc2\x7f\x2b\xf5\x12\x28\xd6\xb2\x91\xf4\x00\x46\xab\x1d\xb4\x43\x22\xac\x70\x07\xd5\x90\x3a\xca\xb3\x34\xf1\x51\x9e\x43\xac\x83\x15\x56\xe8\xda\xac\xe5\x57\xe4\x53\xdc\xcc\x11\xeb\x20\x3f\xf9\x22\x2c\xa0\x8d\x3f\x63\xb3\x34\x39\x3f\x87\x09\x11\xae\x5b\x02\x7a\x40\xb8\x9d\xce\x6f\xee\x4a\x70\xb2\x46\x30\x0d\x08\x0d\x8b\x59\xb8\xc9\xd2\xc4\x04\xd0\x03\xe3\xf6\x85\xf4\x7e\x70\x25\xe0\x1e\xf2\xce\xc9\x76\x15\xb1\x20\xa8\x80\xff\x4d\x01\x6f\x18\x71\x7d\x59\xee\x5a\x74\x05\x90\xed\x30\xff\x10\x71\xfe\x19\x83\x96\xea\xc9\x90\x9b\xa0\xb6\x61\xa3\x85\x8e\x56\x90\xd9\xb3\x1c\x97\x04\x2e\x72\x5f\xc0\x7f\x6e\x54\x04\xc0\xbd\x3f\x7d\x2f\x1b\xd0\x86\x80\x4f\xcd\x95\xd1\x84\x5b\xf2\xbe\xa2\x6d\x28\xaf\x1a\xce\xfc\x52\x54\xab\xa5\x35\x9d\xae\x59\xde\xf7\xa8\xeb\x30\x3d\xc9\x10\xf3\xa9\x73\x54\x6e\x59\x84\x39\x84\xf8\xee\xe2\xde\x48\xc5\x2f\x71\x29\x75\x04\x51\x0e\x0f\xef\xca\x2d\xab\x68\x5b\x84\x2a\x9f\x28\x4e\x0a\x0a\x85\xd4\xd8\xa0\x85\x30\xcd\x2c\x87\x1e\x3e\xc3\x18\x68\xcb\xef\x8c\x52\xf7\xa2\x5a\xb1\x1c\x7c\xec\xf5\x73\x4b\x0c\x7f\x9c\xee\xb7\x6a\x0f\xad\x41\x5d\xc3\x99\xf7\x10\x4e\x8d\x50\x0e\x23\x6d\x01\x51\xcd\xad\x6e\xd0\xb2\xfc\xe5\xe9\xc4\x56\x75\x91\xfb\x78\x9f\x8e\x35\xa8\x32\x9d\xa6\x78\xf7\x6a\xe2\x9e\x56\x95\xe5\xfc\x2a\xc4\x9c\x58\xce\x81\x15\x47\xa4\xb2\x3d\x77\x88\x8a\xe4\x21\xee\xfd\xcb\xa8\xd1\x46\x68\x02\xa3\x11\x2c\x56\xc6\xd6\x05\x2c\x0d\x5d\x8c\x8a\x21\x61\x2f\xfe\xd5\x3e\x2d\x66\xd7\x93\xf2\xe6\xe8\x3e\xfd\x8a\x85\x79\xec\xd3\xa9\x1f\x18\xce\xf9\x6f\x5f\xaf\x9f\x1f\xba\xb0\xfd\x7f\xc0\xcc\xfd\x5d\x23\xe7\xb3\xf4\x5b\x00\x00\x00\xff\xff\x6b\x1e\x13\xfc\x02\x07\x00\x00")

func templates_testUpsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testUpsertGoTpl,
		"templates_test/upsert.go.tpl",
	)
}

func templates_testUpsertGoTpl() (*asset, error) {
	bytes, err := templates_testUpsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x69, 0xfa, 0x39, 0x4, 0xc4, 0xb9, 0x23, 0x9c, 0x7d, 0x48, 0xd, 0xb, 0x93, 0x5e, 0xc0, 0xd, 0xe4, 0xa3, 0xf8, 0x50, 0xc5, 0xd8, 0x0, 0x86, 0x97, 0xba, 0x6d, 0x27, 0x8d, 0x57, 0xf3, 0xbb}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/17_upsert.go.tpl":                       templates17_upsertGoTpl,
	"templates/singleton/psql_upsert.go.tpl":           templatesSingletonPsql_upsertGoTpl,
	"templates_test/singleton/psql_main_test.go.tpl":   templates_testSingletonPsql_main_testGoTpl,
	"templates_test/singleton/psql_suites_test.go.tpl": templates_testSingletonPsql_suites_testGoTpl,
	"templates_test/upsert.go.tpl":                     templates_testUpsertGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"17_upsert.go.tpl": &bintree{templates17_upsertGoTpl, map[string]*bintree{}},
		"singleton": &bintree{nil, map[string]*bintree{
			"psql_upsert.go.tpl": &bintree{templatesSingletonPsql_upsertGoTpl, map[string]*bintree{}},
		}},
	}},
	"templates_test": &bintree{nil, map[string]*bintree{
		"singleton": &bintree{nil, map[string]*bintree{
			"psql_main_test.go.tpl":   &bintree{templates_testSingletonPsql_main_testGoTpl, map[string]*bintree{}},
			"psql_suites_test.go.tpl": &bintree{templates_testSingletonPsql_suites_testGoTpl, map[string]*bintree{}},
		}},
		"upsert.go.tpl": &bintree{templates_testUpsertGoTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
