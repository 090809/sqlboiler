// Code generated by go-bindata.
// sources:
// override/templates_test/singleton/psql_main.tpl
// DO NOT EDIT!

package driver

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templates_testSingletonPsql_mainTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x6d\x6f\xe3\xb8\x11\xfe\x2c\xfd\x8a\xa9\x81\x1c\xa4\xad\xc2\x1c\xfa\xf2\x25\x07\x63\x91\x38\x4e\xba\xb8\xac\xe3\xb3\xdd\x1e\x8a\x6e\xdb\xa3\xad\x91\x42\x44\x22\x19\x92\x8a\xd7\x3d\xe4\xbf\x17\x43\x4a\xb6\x9c\xb5\x93\x6d\x8b\x05\xfa\xcd\x26\x9f\x19\xce\x33\xef\x7a\xe2\x06\x4c\xf9\x79\x7a\x73\xfd\x80\x1b\x18\x82\xc1\x12\x3f\x6b\xf6\xb1\xb1\x6e\xa4\x6a\x2d\x2a\x4c\x7e\x49\xde\xd7\xe9\x3f\x2e\x6e\x17\xe3\x19\x2c\x2e\x2e\x6f\xc7\x70\x37\xb9\xfd\x2b\xb0\x77\x9f\xe4\x27\xfb\xdb\x8b\xab\x2b\x18\xdd\x4d\xe6\x8b\xd9\xc5\x87\xc9\x02\xd8\xbb\xf7\x70\x7d\x37\x1b\x7f\xb8\x99\xc0\x8f\x63\x42\xbd\xff\xe1\x93\xfc\x25\x8d\x63\xb7\xd1\x08\xba\x5c\xa0\x75\x68\xc0\x3a\xd3\xac\x1c\xfc\x1a\x47\xf9\x72\xa4\xa4\x84\x77\xf6\xb1\x62\x57\x97\x31\x1d\x4c\x78\x8d\x40\x10\x21\xcb\x38\xba\x57\xd6\x01\xec\xfe\x37\x16\x4d\xff\xbf\xe6\xd6\xf6\xff\x5b\x5b\xd5\x2a\xc7\xdd\xbd\x32\x5e\x5e\x48\x17\xc7\x91\x2e\xa7\xdc\xda\x6b\x51\x6d\x01\x71\xe4\xd0\xba\xab\x4b\xff\x6a\x7b\xf6\x1c\xc7\x45\x23\x57\x20\xa4\x70\x49\x1a\xcc\xfc\xc8\x85\x84\x21\x7c\xd7\x71\xf8\xf5\x99\x60\x67\x67\x60\xd1\x35\x1a\xf2\xa6\xd6\x16\xdc\x3d\x42\xce\x1d\x5f\x72\x8b\x60\x57\xf7\x58\x73\xe0\x32\x07\x51\x93\x19\x16\x84\x23\x3b\x14\x70\x70\x48\x47\xdc\x6c\xc0\x70\x99\xab\xba\xda\x90\xae\x12\x25\x1a\xee\x30\x07\x32\xaa\xa7\x4a\x81\xbb\xe7\xce\x9f\x5a\x58\x71\x09\x4b\x04\xd3\x48\xe0\x25\x17\xd2\x3a\x52\xdc\x58\x21\x4b\xb2\x60\x5f\x91\x7d\xac\x96\x4a\x54\x68\xe0\x6e\xf6\x11\x34\x5f\x3d\xf0\x12\x59\xe0\x97\x68\x78\xd7\xf1\x49\x03\x91\x24\x05\x34\x46\x19\x22\x4d\xd9\x81\xc6\x84\x83\x38\x8e\x9e\x84\x46\xc3\xe6\xe8\xae\xb0\xe0\x4d\xe5\x92\x81\xa6\xb0\x05\x9e\x83\x0c\x06\xba\x59\x56\x62\x35\x48\x8f\x42\xc9\x0b\x83\x0c\xfe\xf8\x87\xdf\xff\xee\x38\xa8\x8d\x20\x29\x34\xf8\xd8\x08\x83\x83\x94\x42\xc7\xda\xd4\x18\x42\x10\xbc\x41\x37\xf7\xf1\x6a\xe5\xf2\xa5\xe4\x35\x61\x23\xcd\x7c\xd6\x1c\x03\xd2\x65\x80\xf9\x64\x3a\x06\xa3\xcb\x00\xf3\x39\x76\x0c\x46\x97\x2d\x8c\x52\xad\x07\xfb\x20\xf7\x78\x7b\x4c\x97\x9e\xc7\xb4\x75\xe4\x89\x31\xf9\x7e\x08\x4f\xbc\xe2\xec\x12\x4b\x21\xff\xc2\x2b\x91\x73\x27\x94\x4c\x52\xd6\xfe\xc1\x24\x8e\x22\x0f\x09\x6a\x26\xca\x8d\x6b\xed\x36\x49\x20\x47\x41\xd9\x71\xc9\x8e\x62\xc9\x25\x1d\x36\xb8\x67\x8b\x9d\x28\x97\xf8\x1f\xe3\xc7\x86\x57\x36\x09\x3c\x33\xf8\xbe\xc3\x07\x72\xaf\x28\x0f\x71\xeb\xe0\x5d\x98\x8e\xe3\x5b\x1f\x74\x02\x5b\x97\x64\x71\x94\xb2\xd1\x3d\xae\x1e\x12\x72\x8f\x28\x7c\x76\xfe\x66\x08\x52\x54\x94\xaf\x91\x41\xd7\x18\x49\xa7\x71\xf4\x1c\xc7\xd1\xd9\x19\x8c\x0c\x72\x87\xc0\xdb\x32\x13\xff\xc2\x1c\xf2\x25\x90\x09\x8c\xe2\xd1\x2b\xfe\xe1\x0e\xc3\xe6\x8e\x2f\x2b\x0c\x17\x5b\x06\xbd\x47\x87\xa0\x59\xcd\x1f\x70\x7a\xd3\xf5\x93\x24\xfd\xe1\x2d\x73\x7a\xb2\xb9\x51\x7a\xe1\x9f\x7e\x53\xae\x2f\xb6\xf2\x6c\xbe\x52\x30\x8e\xa8\x29\x8d\xea\x1c\xce\x87\x80\x9f\x71\xc5\x46\xaa\xae\xb9\xcc\x93\x81\x2e\xff\x49\x77\x54\x62\xa7\xa7\xa1\x7e\x4f\x95\xac\x36\x83\x0c\x76\x64\x3b\x71\x36\x96\x4f\x30\x04\xae\x35\xca\x3c\x51\x96\xfe\x0b\x43\x49\x48\x68\x5d\x8e\xe5\x53\x92\x32\xc6\xd2\x38\x0a\xf6\x1d\x7e\xd2\x3e\x56\x5e\xfd\xce\xe3\x7d\x81\xaf\x7f\x24\x8e\x4c\x06\x6b\x7a\x40\x28\x36\x15\x1a\x93\x9e\xa9\x73\x97\xab\x86\x8a\x70\xdd\xd7\x3d\x77\xb9\x6f\xde\x12\xd7\xd7\x3f\xe2\xe6\x0a\xad\x33\x6a\x83\x26\xd9\xce\xbe\x0c\xcc\x5e\x74\x77\xfa\xb8\x71\xaf\x7a\x5a\x19\xcb\x7e\x36\x5c\x27\x68\xa8\xda\x0a\x2e\x2a\x6a\xdf\x0a\x2c\x89\x42\xeb\x69\x58\x05\x3f\x50\x13\xe8\x87\xb4\x6f\xe3\xff\xfa\x92\x7d\xac\xf6\x9f\x39\xc0\xe7\x67\x2e\x0e\x3d\x52\xd4\x8e\x4d\x8d\x90\xae\x92\xa4\x3d\xfd\xba\x77\xd7\x5c\x38\x28\x94\x39\x4c\x32\x8e\xd6\x6c\x54\x29\x8b\x49\x0a\x67\x67\x70\x51\xd0\xe0\xef\x32\x52\x58\xc8\x95\xc4\x0c\x56\x84\xf0\x73\x73\x6d\x84\x43\x40\x99\x83\x2a\xfc\x81\x16\x1a\xe3\x83\xbe\xfa\x46\x2c\x0e\x38\xb0\x95\x97\xa2\xda\x2e\x05\xfb\x43\xd3\x34\x72\x54\xe7\x89\xa5\x0c\xcb\x3a\xe9\x76\x8f\xc8\x80\x9b\xd2\x02\x63\x2c\xfc\xef\x8d\xd6\xd5\x81\x12\x69\x85\x83\x54\x5b\x4f\xff\x59\x61\x88\x02\x2a\x94\xc1\x98\x94\x3c\xf3\xbd\xf7\xcb\xaa\x57\x02\xc1\x12\xcb\x26\xb8\x9e\x21\xcf\xd1\xb4\xe8\x40\xd7\x86\xf2\x39\x1f\xc2\x77\xcb\x8d\x43\xcb\x2e\x9b\xa2\xf0\xbb\x0e\x5d\x91\xbb\x0f\x5d\xad\xfa\x85\x17\x54\x6c\x0f\x43\xe8\x82\xf0\x36\x96\xe7\x43\xa0\xeb\x59\x23\xdf\x88\x62\x17\x26\xd3\x48\x29\x64\x79\x3e\xd8\xba\x38\x78\x29\x7d\x81\x0f\x8f\xb7\x13\x25\x49\x0f\x5c\xa3\x31\x7b\xd7\x2f\x5b\xe6\x9b\x01\x6f\x3d\x0e\x7f\xfb\x7b\x70\x25\xd9\xdc\x0a\x75\x47\x1d\x8b\xb9\xa6\x77\x8b\x64\x30\xbd\xf9\xd3\xdd\x7c\x31\x3c\xb1\xbe\x01\xd2\x7c\xf5\xd3\xef\x05\x66\x7a\x37\x5b\x0c\x4f\x72\x8f\xa1\x99\x7a\x08\xf3\xe7\xf9\x78\xd6\xe9\xa1\x99\x7e\x50\xcf\xc5\x7c\x7e\xfd\xe1\x76\xdc\xe1\x76\x3b\x2f\xa1\x9f\x8f\xf0\x7a\x39\xcd\x76\xb9\xea\x6a\x9d\x75\x61\x13\xaa\x71\xa2\x62\x0b\xac\xb5\x87\x0d\xfc\xda\x57\x76\x3b\xd0\x6b\x23\xf9\x68\x01\x86\xba\x06\xa5\x69\xb3\x81\x42\x54\xd8\x55\x1f\x11\xbb\x6e\x89\x79\x2b\x06\x27\xf6\xfc\x24\x3f\xd7\xca\xba\xd2\xa0\x3d\xef\x79\xb4\xf3\xda\xd6\x33\xdb\x72\x08\xfb\x5b\xaf\x1e\xbe\x54\xdb\x29\xf2\x40\xdf\xa1\x77\x98\x4a\x12\x28\x7d\xc5\x9c\x93\xa3\x86\x74\x9b\xcf\xff\x91\x49\xbb\xf1\xfb\x0d\xcd\xea\x27\x1d\x0c\xc1\xd5\x9a\xf9\x4d\x2a\xdd\xd6\x0a\x1d\xb5\xd3\xe1\x48\x42\xee\xef\x3a\xbb\x74\x6c\x15\x68\xd6\xb6\x5e\x9f\x82\x01\x9c\x2f\xbf\xd8\x30\x0e\xeb\xee\xaf\x5f\x6f\x68\x26\xa8\xd7\x3b\x38\x3d\x15\xc5\x29\x7e\x16\xd6\xd9\x43\xcf\x9c\x9d\x81\x43\x6e\x72\xb5\x96\xbe\xaf\x37\x0e\x2d\xac\x2a\xe4\xb2\xd1\xe0\xb8\x7d\xb0\xb0\xbe\x47\xe9\x47\x5b\xf8\x8e\x2b\x84\x14\xf6\xbe\x6b\x6e\x87\xec\xec\x14\x1e\xff\x2a\xdb\x5b\x2a\xfd\xb7\x74\xe7\xd6\xb7\xd6\xca\x0e\x0f\x1e\xf1\x5f\xaf\xa7\x5b\xb7\x29\xcb\x66\x58\xab\x27\xda\x97\x7b\x2d\xe7\x58\x74\x95\x24\x56\x49\xfb\xe1\x9f\x05\x3a\xfe\x5b\x5b\x14\x5b\x2e\x07\x9e\xed\xae\x32\x6f\xb5\x37\xe0\x85\x47\x76\x88\x76\xf8\x3c\x56\xec\x4e\xa3\x4c\x06\x5d\xdf\x18\x64\x90\x1b\xf1\x84\x86\x4d\xe7\x3f\xdd\x5e\x36\xa2\xca\x7f\x6a\xd0\x6c\xda\xc1\xd0\x7d\x3a\x85\x2c\xff\xb2\x68\x5e\x96\x54\xfb\x81\x92\xbe\xd6\x00\xa5\xa8\xb2\x2f\x5c\xb6\xcf\xe5\x39\xfe\x77\x00\x00\x00\xff\xff\x00\xef\xd0\xbf\x8f\x11\x00\x00")

func templates_testSingletonPsql_mainTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonPsql_mainTpl,
		"templates_test/singleton/psql_main.tpl",
	)
}

func templates_testSingletonPsql_mainTpl() (*asset, error) {
	bytes, err := templates_testSingletonPsql_mainTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/psql_main.tpl", size: 4495, mode: os.FileMode(420), modTime: time.Unix(1527174306, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates_test/singleton/psql_main.tpl": templates_testSingletonPsql_mainTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates_test": &bintree{nil, map[string]*bintree{
		"singleton": &bintree{nil, map[string]*bintree{
			"psql_main.tpl": &bintree{templates_testSingletonPsql_mainTpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

