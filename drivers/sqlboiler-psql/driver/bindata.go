// Code generated by go-bindata.
// sources:
// override/templates/17_upsert.tpl
// override/templates_test/singleton/psql_main_test.tpl
// override/templates_test/singleton/psql_suites_test.tpl
// override/templates_test/singleton/psql_upsert.tpl
// override/templates_test/upsert.tpl
// DO NOT EDIT!

package driver

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templates17_upsertTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\xdb\x6e\xdb\x46\x13\xbe\x26\x9f\x62\x22\xfc\x80\xc9\x1f\x32\xdd\xeb\x14\xba\x88\x9d\x43\x83\x36\x8e\x1a\x27\x0d\xd0\x20\x30\x56\xe4\x50\x5a\x78\xb9\xcb\x2c\x97\x76\x55\x86\xef\x5e\xcc\x2c\x29\x52\x87\xc4\x4a\xdd\x20\x57\xb6\x76\x76\xe7\xf0\xcd\x37\x07\xa9\x69\x4e\xe1\x7f\x4e\x2c\x14\x5e\x8a\x02\xaf\xa4\x5e\xd6\x4a\x58\x78\x3c\x83\xe4\x2d\x9d\x26\x74\x0c\x9f\xa1\xea\x25\x9f\xc1\x49\xa7\xf0\x42\x54\x08\xa7\x6d\x1b\xb2\x82\x5b\x61\x8f\x7e\x9e\x8a\x02\xd5\xf6\xf3\x2a\x5d\x61\x21\xf8\xc1\xfe\xd3\xe4\x6a\x90\xf2\x03\x99\x43\xf2\x24\xcb\x5e\x28\xb3\x10\x8a\x95\x9c\x9d\xc1\xbb\xb2\x42\xeb\x5e\x80\x70\x0e\x8b\xd2\x55\x20\x34\x48\x4d\x67\x53\x10\x3a\x83\xcc\x20\x9f\xd5\x65\x26\x1c\x82\xb1\x20\x97\xda\x58\x04\xa3\x21\x35\x3a\x57\x32\x75\x49\x98\xd7\x3a\x85\xc8\xc0\xff\x9b\x66\x1f\x94\xb6\x8d\x7b\x33\x91\x57\xf3\x5a\x5f\x74\x4f\x61\x61\x8c\x9a\x6e\x34\x5d\x18\x55\x17\xba\x82\x0f\x1f\x2b\x67\xa5\x5e\x4e\x3b\xbb\xfb\xe7\x77\x2b\xe9\x50\xc9\xca\x41\x92\x24\xfe\x30\x06\xb4\xd6\x58\x68\xc2\xc0\xa2\xab\xad\x06\x93\x78\xbb\xd1\xc2\x48\x95\xbc\x40\xf7\xf4\x3c\x8a\x7b\x9d\x83\x13\x7b\xf6\x77\xcc\x8e\xac\x25\x49\x12\x87\x6d\x18\x36\x0d\xea\x8c\x31\xf4\xc0\x12\x54\x23\x70\xe9\xdf\xb9\xd0\x32\xdd\x81\x79\xfe\x30\x9c\x81\x75\x56\x74\xc6\xa1\x1e\x0f\xfc\xfc\x3b\x23\xdf\x84\x81\xcc\xc9\x29\xe2\xe1\xf7\x81\xfd\x67\x56\xff\x68\x06\x5a\x2a\xb2\x17\x94\x04\x86\xb7\xf1\xde\x8a\xf2\x99\xb5\x11\x5a\x1b\xc7\x61\xd0\x1e\x4a\xd1\x17\x72\x72\x28\x25\x50\x53\xdd\xd1\x67\xfc\x0b\xd3\xda\x19\xfb\x2d\xc5\x30\x52\x5d\xfe\xcb\x7c\xcd\x23\x32\x0c\x1c\xdb\xb3\x8d\x0b\x3f\x22\x85\xe4\xc7\x8f\x4c\xdd\x06\xcc\xff\x3c\x4d\x47\xa6\xe2\x07\x64\x62\xd3\xc6\x64\x0e\x06\x66\x03\x6c\x5d\x5b\x63\x79\x95\x5c\xe2\x5d\x34\x69\x9a\x64\x7e\xb3\x24\xd7\xdb\xf6\x31\x68\x03\x4d\x33\x1a\x03\x6d\x0b\xa5\x35\xb7\x32\xc3\x0c\x72\x63\xa1\xe6\x90\x26\x8c\x73\x18\xd0\x0c\x21\x4c\x15\xa1\x34\x71\xb2\xc0\xca\x89\xa2\xbc\xf6\xb7\xae\x57\xa8\x4a\xb4\x13\x48\xa0\xf5\xb7\x65\x0e\xda\x38\x48\x2e\xcd\x2f\xc6\xdc\x54\x9c\xa0\x2d\xce\x64\xe6\x1c\x73\x63\xd1\x23\xc7\x97\x18\xbe\x7d\x02\x0c\x91\x90\x2b\xec\x09\xea\x8c\xed\xe8\xbf\x9f\x62\x2e\x6a\xe5\x2a\x52\xfa\xa9\x46\x2b\xb1\x4a\x2e\x8d\xfe\x13\xad\xe9\x44\x57\xe8\xa2\xa6\xd9\x1d\x9f\x6d\xdb\x01\xfc\x5e\xba\x55\x77\x73\x0a\x26\x0e\xc3\xe0\xec\x0c\xce\x6b\xa9\x32\x48\x45\xba\x42\xb8\xc1\x35\x48\x7d\xaa\xa4\x46\xa8\x97\x4a\xaa\x35\x9c\x42\xb1\xae\x3e\x29\xb8\xad\xa0\xa4\xbf\xa5\x35\x0b\x85\x45\x15\x06\x8b\x3a\x27\x4f\x2a\x67\x0b\xa1\x97\x0a\xa9\xa3\x9d\xd7\x79\x8e\x36\x8a\x39\xfe\x3d\x36\x50\x84\x8b\x3a\x4f\xde\x5b\xe9\xf0\x7c\xed\x30\x3a\x71\x27\x04\x3a\xa0\xaa\xf0\x90\x38\x67\x71\xb8\x7b\x9c\xd0\x31\x25\xee\x7a\x0a\x29\x39\x61\x85\x5e\xe2\x1e\xcf\xb6\x14\x5e\x31\x8b\xa2\xf4\x5b\x14\x6e\xd3\xf3\xc1\xea\x06\x56\x3f\x58\xd5\x88\x0d\x5f\xd1\x45\xf9\x7c\x3c\x03\x92\x76\x82\x38\x0c\x86\x84\xcd\xeb\x3e\x61\x8b\x3a\x8f\x99\xcb\xfb\xdc\xf1\xa4\xbd\x20\x7e\xbc\xaa\x5d\xf2\xe6\x37\x93\xde\x90\x1a\x66\xcc\xd4\x13\x27\x23\x2b\xf7\x3c\xfe\x70\x83\xeb\x8f\xc7\x99\x78\xa7\x95\x37\x12\x06\xb7\xc2\x72\x8d\x70\x6d\x87\x4c\xab\x47\x9d\x49\x8a\xbb\x5f\x15\x2c\xba\x6d\x2e\xbe\x64\x81\xcf\x1c\x55\x45\x18\x04\x07\x4d\xf7\x8d\xf9\x1e\xf9\xb8\x72\x8e\xb8\x6a\x6a\x37\xbe\x3d\x24\x8b\x3f\x6e\x68\x40\x9f\xe2\x30\x08\xba\x86\xbc\x15\xc0\xbb\x11\xf5\x1e\x12\xc0\xdc\xca\x42\xd8\xf5\xaf\xb8\x1e\xdf\xdc\x9e\x4a\xec\x06\xa1\x99\x83\x42\xdd\xad\x44\x31\x75\xd8\x9f\x18\xe5\xfb\x1b\x6c\xad\x79\xd9\x76\xa6\x6b\xa5\xbb\xed\x96\x66\x40\xad\x32\xee\x93\x0b\x6e\x38\x5d\xcc\x29\xbb\x00\x84\x06\xb5\x5f\xee\xbf\x41\x5f\xc7\x84\xc8\x4e\x4d\x0f\x5e\xf6\x82\xb1\x9f\x9b\x87\x33\x28\xc4\x0d\x46\xc3\x40\xa1\x17\x47\xc1\x43\xc3\x96\x14\x95\xeb\x8d\x85\xe9\x41\x6a\xef\xbf\x64\xf7\x03\x5f\x18\x09\x35\xe8\x35\xcc\x7c\xb4\x9e\xe0\xbf\xd3\xd1\xdc\x54\x6e\x69\xb1\x8a\x32\x29\x14\x92\xf2\x49\xd3\x8c\xbf\xb1\xb4\xed\xe4\xd0\x62\x61\xd1\xf5\xc7\xc3\x40\x9d\x76\x13\x9f\xb3\xe7\xed\xde\x0a\x55\xe3\x2b\x51\x96\x1c\x36\x95\xce\x30\x2c\xce\xa5\xce\x3a\xd1\x41\x30\xde\xae\x4b\x3c\x1c\xec\x46\x61\x6f\x2f\xe8\x07\xdc\x68\x78\x6d\x4d\x2f\x86\xa2\x4b\x95\x45\x17\xd3\xc5\x3e\x4b\xec\xa8\x45\xf7\xfd\xdc\x24\x8b\x64\xea\x80\x93\xdb\x5e\xb2\x9b\xad\x9f\xfb\x0c\x1d\xb7\x58\xcc\x29\x35\xc9\x4b\x9d\x49\x8b\xa9\x8b\xfa\x83\x3f\xe8\xc6\xeb\x3c\x32\xc4\x92\x5b\xa1\xb6\x46\x31\x0b\xab\xe7\xd6\x14\xbd\xf3\xac\xb0\x6b\x91\x5b\x89\x89\x7d\x63\xf3\x9e\xd0\xde\x23\xb5\x43\x9b\x8b\x14\x1b\xbf\x3a\x30\xc1\x77\x60\x1a\x41\xd8\x3f\x1c\x8c\xcf\x9d\xfd\xb2\xe9\x91\x0e\x1f\xa9\xcc\xfd\xe6\xf6\x14\x17\xf5\xf2\x95\xc9\xfc\xec\xcd\x0b\x97\x3c\x2f\xad\xd4\x4e\xe9\x68\x90\xf3\x5c\xb1\xbd\x2e\xe6\x75\x7c\xff\x6d\x42\x67\xb0\x76\x4f\x3c\x3e\xff\xb4\x12\x25\x5c\x24\x6f\xcc\x5d\x34\x32\xe7\xb5\xd1\xc6\x9c\x5c\xa5\x82\xf9\x44\xe1\xf3\x97\xce\x4d\x8e\x67\x33\xa8\x3e\xa9\xe4\x99\xb5\x97\xe6\x8d\xb9\xf3\x73\xb1\xd3\x4c\xc9\x3f\x3b\x83\xbe\xf6\x78\x13\xd6\x27\xae\x4b\x00\x08\xbd\x76\x2b\x5a\x99\xef\x56\xa8\xc1\xad\xd0\xe2\x49\x45\x4b\xa3\xaf\xb7\x8e\x21\xc3\x92\x72\xdd\x33\x96\x3d\xa6\xf5\xf7\xb0\xb7\x3c\x83\xf7\x29\xb8\xdd\x4d\x69\xd1\xa7\x2d\x9f\x1b\xc1\xb7\xf4\xd4\xc9\x00\xef\x78\x24\x1e\x31\x60\xfb\x11\x7e\xdf\x5d\x1e\xd9\x30\xf3\x99\x3f\x4e\xf5\x66\x74\x07\x5f\xd9\x8d\x37\x3f\x43\x64\xe6\x49\xee\xd0\xee\xed\xc5\xdd\xe6\xab\xba\x1f\x75\xfa\x07\x5a\xaa\xf1\x4e\xdc\x86\xff\x04\x00\x00\xff\xff\x49\x27\x6a\x3a\x6e\x12\x00\x00")

func templates17_upsertTplBytes() ([]byte, error) {
	return bindataRead(
		_templates17_upsertTpl,
		"templates/17_upsert.tpl",
	)
}

func templates17_upsertTpl() (*asset, error) {
	bytes, err := templates17_upsertTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/17_upsert.tpl", size: 4718, mode: os.FileMode(420), modTime: time.Unix(1527447048, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_testSingletonPsql_main_testTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x6d\x6f\xe3\xb8\x11\xfe\x2c\xfd\x8a\xa9\x81\x1c\xa4\xad\xc2\x1c\xfa\xf2\x25\x07\x63\x91\x38\x4e\xba\xb8\xac\xe3\xb3\xdd\x1e\x8a\x6e\xdb\xa3\xad\x91\x42\x44\x22\x19\x92\x8a\xd7\x3d\xe4\xbf\x17\x43\x4a\xb6\x9c\xb5\x93\x6d\x8b\x05\xfa\xcd\x26\x9f\x19\xce\x33\xef\x7a\xe2\x06\x4c\xf9\x79\x7a\x73\xfd\x80\x1b\x18\x82\xc1\x12\x3f\x6b\xf6\xb1\xb1\x6e\xa4\x6a\x2d\x2a\x4c\x7e\x49\xde\xd7\xe9\x3f\x2e\x6e\x17\xe3\x19\x2c\x2e\x2e\x6f\xc7\x70\x37\xb9\xfd\x2b\xb0\x77\x9f\xe4\x27\xfb\xdb\x8b\xab\x2b\x18\xdd\x4d\xe6\x8b\xd9\xc5\x87\xc9\x02\xd8\xbb\xf7\x70\x7d\x37\x1b\x7f\xb8\x99\xc0\x8f\x63\x42\xbd\xff\xe1\x93\xfc\x25\x8d\x63\xb7\xd1\x08\xba\x5c\xa0\x75\x68\xc0\x3a\xd3\xac\x1c\xfc\x1a\x47\xf9\x72\xa4\xa4\x84\x77\xf6\xb1\x62\x57\x97\x31\x1d\x4c\x78\x8d\x40\x10\x21\xcb\x38\xba\x57\xd6\x01\xec\xfe\x37\x16\x4d\xff\xbf\xe6\xd6\xf6\xff\x5b\x5b\xd5\x2a\xc7\xdd\xbd\x32\x5e\x5e\x48\x17\xc7\x91\x2e\xa7\xdc\xda\x6b\x51\x6d\x01\x71\xe4\xd0\xba\xab\x4b\xff\x6a\x7b\xf6\x1c\xc7\x45\x23\x57\x20\xa4\x70\x49\x1a\xcc\xfc\xc8\x85\x84\x21\x7c\xd7\x71\xf8\xf5\x99\x60\x67\x67\x60\xd1\x35\x1a\xf2\xa6\xd6\x16\xdc\x3d\x42\xce\x1d\x5f\x72\x8b\x60\x57\xf7\x58\x73\xe0\x32\x07\x51\x93\x19\x16\x84\x23\x3b\x14\x70\x70\x48\x47\xdc\x6c\xc0\x70\x99\xab\xba\xda\x90\xae\x12\x25\x1a\xee\x30\x07\x32\xaa\xa7\x4a\x81\xbb\xe7\xce\x9f\x5a\x58\x71\x09\x4b\x04\xd3\x48\xe0\x25\x17\xd2\x3a\x52\xdc\x58\x21\x4b\xb2\x60\x5f\x91\x7d\xac\x96\x4a\x54\x68\xe0\x6e\xf6\x11\x34\x5f\x3d\xf0\x12\x59\xe0\x97\x68\x78\xd7\xf1\x49\x03\x91\x24\x05\x34\x46\x19\x22\x4d\xd9\x81\xc6\x84\x83\x38\x8e\x9e\x84\x46\xc3\xe6\xe8\xae\xb0\xe0\x4d\xe5\x92\x81\xa6\xb0\x05\x9e\x83\x0c\x06\xba\x59\x56\x62\x35\x48\x8f\x42\xc9\x0b\x83\x0c\xfe\xf8\x87\xdf\xff\xee\x38\xa8\x8d\x20\x29\x34\xf8\xd8\x08\x83\x83\x94\x42\xc7\xda\xd4\x18\x42\x10\xbc\x41\x37\xf7\xf1\x6a\xe5\xf2\xa5\xe4\x35\x61\x23\xcd\x7c\xd6\x1c\x03\xd2\x65\x80\xf9\x64\x3a\x06\xa3\xcb\x00\xf3\x39\x76\x0c\x46\x97\x2d\x8c\x52\xad\x07\xfb\x20\xf7\x78\x7b\x4c\x97\x9e\xc7\xb4\x75\xe4\x89\x31\xf9\x7e\x08\x4f\xbc\xe2\xec\x12\x4b\x21\xff\xc2\x2b\x91\x73\x27\x94\x4c\x52\xd6\xfe\xc1\x24\x8e\x22\x0f\x09\x6a\x26\xca\x8d\x6b\xed\x36\x49\x20\x47\x41\xd9\x71\xc9\x8e\x62\xc9\x25\x1d\x36\xb8\x67\x8b\x9d\x28\x97\xf8\x1f\xe3\xc7\x86\x57\x36\x09\x3c\x33\xf8\xbe\xc3\x07\x72\xaf\x28\x0f\x71\xeb\xe0\x5d\x98\x8e\xe3\x5b\x1f\x74\x02\x5b\x97\x64\x71\x94\xb2\xd1\x3d\xae\x1e\x12\x72\x8f\x28\x7c\x76\xfe\x66\x08\x52\x54\x94\xaf\x91\x41\xd7\x18\x49\xa7\x71\xf4\x1c\xc7\xd1\xd9\x19\x8c\x0c\x72\x87\xc0\xdb\x32\x13\xff\xc2\x1c\xf2\x25\x90\x09\x8c\xe2\xd1\x2b\xfe\xe1\x0e\xc3\xe6\x8e\x2f\x2b\x0c\x17\x5b\x06\xbd\x47\x87\xa0\x59\xcd\x1f\x70\x7a\xd3\xf5\x93\x24\xfd\xe1\x2d\x73\x7a\xb2\xb9\x51\x7a\xe1\x9f\x7e\x53\xae\x2f\xb6\xf2\x6c\xbe\x52\x30\x8e\xa8\x29\x8d\xea\x1c\xce\x87\x80\x9f\x71\xc5\x46\xaa\xae\xb9\xcc\x93\x81\x2e\xff\x49\x77\x54\x62\xa7\xa7\xa1\x7e\x4f\x95\xac\x36\x83\x0c\x76\x64\x3b\x71\x36\x96\x4f\x30\x04\xae\x35\xca\x3c\x51\x96\xfe\x0b\x43\x49\x48\x68\x5d\x8e\xe5\x53\x92\x32\xc6\xd2\x38\x0a\xf6\x1d\x7e\xd2\x3e\x56\x5e\xfd\xce\xe3\x7d\x81\xaf\x7f\x24\x8e\x4c\x06\x6b\x7a\x40\x28\x36\x15\x1a\x93\x9e\xa9\x73\x97\xab\x86\x8a\x70\xdd\xd7\x3d\x77\xb9\x6f\xde\x12\xd7\xd7\x3f\xe2\xe6\x0a\xad\x33\x6a\x83\x26\xd9\xce\xbe\x0c\xcc\x5e\x74\x77\xfa\xb8\x71\xaf\x7a\x5a\x19\xcb\x7e\x36\x5c\x27\x68\xa8\xda\x0a\x2e\x2a\x6a\xdf\x0a\x2c\x89\x42\xeb\x69\x58\x05\x3f\x50\x13\xe8\x87\xb4\x6f\xe3\xff\xfa\x92\x7d\xac\xf6\x9f\x39\xc0\xe7\x67\x2e\x0e\x3d\x52\xd4\x8e\x4d\x8d\x90\xae\x92\xa4\x3d\xfd\xba\x77\xd7\x5c\x38\x28\x94\x39\x4c\x32\x8e\xd6\x6c\x54\x29\x8b\x49\x0a\x67\x67\x70\x51\xd0\xe0\xef\x32\x52\x58\xc8\x95\xc4\x0c\x56\x84\xf0\x73\x73\x6d\x84\x43\x40\x99\x83\x2a\xfc\x81\x16\x1a\xe3\x83\xbe\xfa\x46\x2c\x0e\x38\xb0\x95\x97\xa2\xda\x2e\x05\xfb\x43\xd3\x34\x72\x54\xe7\x89\xa5\x0c\xcb\x3a\xe9\x76\x8f\xc8\x80\x9b\xd2\x02\x63\x2c\xfc\xef\x8d\xd6\xd5\x81\x12\x69\x85\x83\x54\x5b\x4f\xff\x59\x61\x88\x02\x2a\x94\xc1\x98\x94\x3c\xf3\xbd\xf7\xcb\xaa\x57\x02\xc1\x12\xcb\x26\xb8\x9e\x21\xcf\xd1\xb4\xe8\x40\xd7\x86\xf2\x39\x1f\xc2\x77\xcb\x8d\x43\xcb\x2e\x9b\xa2\xf0\xbb\x0e\x5d\x91\xbb\x0f\x5d\xad\xfa\x85\x17\x54\x6c\x0f\x43\xe8\x82\xf0\x36\x96\xe7\x43\xa0\xeb\x59\x23\xdf\x88\x62\x17\x26\xd3\x48\x29\x64\x79\x3e\xd8\xba\x38\x78\x29\x7d\x81\x0f\x8f\xb7\x13\x25\x49\x0f\x5c\xa3\x31\x7b\xd7\x2f\x5b\xe6\x9b\x01\x6f\x3d\x0e\x7f\xfb\x7b\x70\x25\xd9\xdc\x0a\x75\x47\x1d\x8b\xb9\xa6\x77\x8b\x64\x30\xbd\xf9\xd3\xdd\x7c\x31\x3c\xb1\xbe\x01\xd2\x7c\xf5\xd3\xef\x05\x66\x7a\x37\x5b\x0c\x4f\x72\x8f\xa1\x99\x7a\x08\xf3\xe7\xf9\x78\xd6\xe9\xa1\x99\x7e\x50\xcf\xc5\x7c\x7e\xfd\xe1\x76\xdc\xe1\x76\x3b\x2f\xa1\x9f\x8f\xf0\x7a\x39\xcd\x76\xb9\xea\x6a\x9d\x75\x61\x13\xaa\x71\xa2\x62\x0b\xac\xb5\x87\x0d\xfc\xda\x57\x76\x3b\xd0\x6b\x23\xf9\x68\x01\x86\xba\x06\xa5\x69\xb3\x81\x42\x54\xd8\x55\x1f\x11\xbb\x6e\x89\x79\x2b\x06\x27\xf6\xfc\x24\x3f\xd7\xca\xba\xd2\xa0\x3d\xef\x79\xb4\xf3\xda\xd6\x33\xdb\x72\x08\xfb\x5b\xaf\x1e\xbe\x54\xdb\x29\xf2\x40\xdf\xa1\x77\x98\x4a\x12\x28\x7d\xc5\x9c\x93\xa3\x86\x74\x9b\xcf\xff\x91\x49\xbb\xf1\xfb\x0d\xcd\xea\x27\x1d\x0c\xc1\xd5\x9a\xf9\x4d\x2a\xdd\xd6\x0a\x1d\xb5\xd3\xe1\x48\x42\xee\xef\x3a\xbb\x74\x6c\x15\x68\xd6\xb6\x5e\x9f\x82\x01\x9c\x2f\xbf\xd8\x30\x0e\xeb\xee\xaf\x5f\x6f\x68\x26\xa8\xd7\x3b\x38\x3d\x15\xc5\x29\x7e\x16\xd6\xd9\x43\xcf\x9c\x9d\x81\x43\x6e\x72\xb5\x96\xbe\xaf\x37\x0e\x2d\xac\x2a\xe4\xb2\xd1\xe0\xb8\x7d\xb0\xb0\xbe\x47\xe9\x47\x5b\xf8\x8e\x2b\x84\x14\xf6\xbe\x6b\x6e\x87\xec\xec\x14\x1e\xff\x2a\xdb\x5b\x2a\xfd\xb7\x74\xe7\xd6\xb7\xd6\xca\x0e\x0f\x1e\xf1\x5f\xaf\xa7\x5b\xb7\x29\xcb\x66\x58\xab\x27\xda\x97\x7b\x2d\xe7\x58\x74\x95\x24\x56\x49\xfb\xe1\x9f\x05\x3a\xfe\x5b\x5b\x14\x5b\x2e\x07\x9e\xed\xae\x32\x6f\xb5\x37\xe0\x85\x47\x76\x88\x76\xf8\x3c\x56\xec\x4e\xa3\x4c\x06\x5d\xdf\x18\x64\x90\x1b\xf1\x84\x86\x4d\xe7\x3f\xdd\x5e\x36\xa2\xca\x7f\x6a\xd0\x6c\xda\xc1\xd0\x7d\x3a\x85\x2c\xff\xb2\x68\x5e\x96\x54\xfb\x81\x92\xbe\xd6\x00\xa5\xa8\xb2\x2f\x5c\xb6\xcf\xe5\x39\xfe\x77\x00\x00\x00\xff\xff\x00\xef\xd0\xbf\x8f\x11\x00\x00")

func templates_testSingletonPsql_main_testTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonPsql_main_testTpl,
		"templates_test/singleton/psql_main_test.tpl",
	)
}

func templates_testSingletonPsql_main_testTpl() (*asset, error) {
	bytes, err := templates_testSingletonPsql_main_testTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/psql_main_test.tpl", size: 4495, mode: os.FileMode(420), modTime: time.Unix(1527187113, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_testSingletonPsql_suites_testTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\xb1\x8e\x83\x30\x10\x44\x7b\xbe\x62\x84\x28\xe0\x04\xfe\x80\x93\xae\xba\xea\xae\x48\x11\x91\x0f\x70\xc2\x82\x2c\x39\x1b\x84\x17\x29\x92\xf1\xbf\x47\x18\x8b\x90\xce\xe3\x99\xb7\x3b\xdb\xcf\x7c\x43\x4b\x4e\x2e\xa3\xa3\x49\x4a\xc1\x97\x90\x13\xc3\x83\x6a\x2b\xf8\x0c\xf0\xbe\xc1\xa4\x79\x20\x14\x86\x3b\x7a\xd6\x28\x44\x5f\x2d\xe1\xfb\x07\xaa\x5d\x5f\x2e\x84\x94\x33\x7d\x32\xd5\x9f\xfb\x7f\x18\x8e\x36\x9a\xdd\x27\xeb\x8e\x72\xcb\x9e\xf4\x3d\x0e\x4b\x64\x94\x0b\x46\x3b\x4f\xda\x62\x81\x18\xb1\xf4\xab\x77\x50\xd4\x79\xe6\x32\xf7\xfe\x4d\x87\x90\xd7\x58\x6b\x7f\x7e\x6e\x27\x55\x71\x19\x71\x77\xec\x91\x54\xc8\x5e\x01\x00\x00\xff\xff\x2f\xea\xf2\xb5\x00\x01\x00\x00")

func templates_testSingletonPsql_suites_testTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonPsql_suites_testTpl,
		"templates_test/singleton/psql_suites_test.tpl",
	)
}

func templates_testSingletonPsql_suites_testTpl() (*asset, error) {
	bytes, err := templates_testSingletonPsql_suites_testTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/psql_suites_test.tpl", size: 256, mode: os.FileMode(420), modTime: time.Unix(1527187008, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_testSingletonPsql_upsertTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x5f\x6b\xdb\x3e\x14\x7d\x96\x3e\xc5\xad\xa0\xd4\x06\xe1\xfe\xfa\xfa\x83\x3c\xb4\xb1\xdb\x65\x04\xbb\x89\xed\x6d\x30\xf6\xe0\xd8\xd7\xa9\xc0\x91\x33\xfd\xc9\x56\xd6\x7c\xf7\x21\xc7\xae\xd3\xa6\xa3\x14\x82\x12\x74\xef\x39\x3a\xf7\xe8\x28\x97\x97\xb0\xb2\xa2\xa9\xf2\xad\x46\x65\x16\x16\xd5\xe3\x7d\xab\xcd\x5a\xa1\x3e\x14\x34\x14\x90\x2e\xe6\xa0\x4d\x61\x70\x83\xd2\x80\x36\x4a\xc8\x35\x58\xed\x56\xf3\x80\x60\x3b\x6c\x58\x98\x02\xb6\xaa\xdd\x89\x0a\xab\x80\xd6\x56\x96\xff\xa4\xf6\x2a\x51\x40\xa5\xc4\x0e\x95\x0e\x42\x51\x34\x58\x1a\x0e\xa6\x58\x35\x18\x17\x1b\xec\x8f\xe0\x60\xb7\x55\x61\x30\x91\xd3\x56\xd6\x8d\x28\x0d\xac\xda\xb6\xe1\xa0\xd0\x0c\x35\x0e\x65\x5f\xe3\xf0\xeb\x41\x18\x6c\x84\x36\xf0\xfd\xc7\x81\xc1\x1f\xc4\xfe\xa1\x64\xe8\x83\x89\xdb\xdc\x14\x72\xdd\x60\x30\xab\x50\x9a\x85\x6d\x0d\xa6\x8d\x28\xd1\xe9\x0a\xe6\x0b\x0e\xee\x7b\xb9\x18\xc9\x7d\x4a\x46\xf6\x8f\x10\x3c\xa3\x7c\x4a\x14\x7e\x0c\xab\xd0\xf8\x94\x92\x95\xad\xe1\xff\x63\xdc\x1d\x9a\x1b\x5b\xd7\xa8\x3c\x9f\x92\x0a\x6b\x54\x47\xc5\x7b\x3b\x14\x57\xb6\x76\xf0\xb2\x6d\xec\x46\x6a\x47\xc1\xc2\xe8\xf6\x3a\x9f\x67\xf0\xe5\x7a\x9e\x47\x29\xa3\x44\xd4\xd0\xa0\xf4\x46\x95\x70\x36\x81\xff\x9c\x5d\xcf\xb8\x09\xd4\x1b\x13\xa4\x5b\x25\xa4\xa9\x3d\xe6\x9d\x6b\xbf\xc7\x83\xfb\xcd\x38\x25\x84\x1c\x6c\xd6\xc1\xe7\x56\x1c\xb1\x71\x60\x1c\x98\x3f\x74\x0c\x0a\x9b\xa2\xc4\x87\xb6\xa9\x50\x75\x41\x08\x72\x8d\x33\x59\xe1\xef\xe3\x02\x7f\xa5\x8b\xc3\x15\x87\x2b\xdf\xa7\x64\x4f\x29\x71\x8a\x6e\x7b\x45\x94\x38\x87\xdc\x19\x6c\x16\xa7\xd1\x32\x83\x59\x9c\x25\x70\xae\xdd\x27\x89\x61\x9a\xc4\xb7\xf3\xd9\x34\x83\x4e\xe9\x73\xc6\xf8\x38\x22\xa7\xc4\x19\x25\x6a\x38\x3b\x09\xdc\xd3\x53\x27\xe4\xb0\xef\xc3\x64\x70\x67\x65\xeb\xe0\xab\x12\x06\xd3\x6e\x72\x8f\x85\x09\xc4\x49\xf6\x69\x16\xdf\x31\x27\x12\xb0\xd1\xf8\xb2\xf3\xe6\xd1\xa0\x77\xe1\x5d\xf8\x6f\xc0\x5f\xf8\x37\x26\xba\xb3\xef\xad\x7e\xe6\x43\x98\x40\x7e\x1f\x5e\x67\x11\xa4\x51\x06\xcc\x4d\x40\xea\x56\x81\xe0\xb0\x73\x97\xad\x0a\xb9\xc6\xfe\x95\x74\x42\xdc\x80\x62\xbc\xdf\x13\x65\xbc\x53\x46\xf6\x6e\xf9\xe9\x52\x59\xbd\x8c\xdd\x18\xd7\x93\xa4\xee\x3a\xe4\x6b\x91\x07\x92\x37\x4b\x0c\x26\x10\x7d\x9b\xce\xf3\x30\x0a\x03\xf6\x0e\x7a\x7f\xb8\xf4\x3e\xab\xee\x55\x8c\x53\x9c\x12\x2f\xa3\x2c\x5f\xc6\xb3\xf8\x0e\xd8\xbb\x4e\x77\x7f\x24\x83\xc9\xee\x0c\x85\xc6\x2a\x09\x0e\xd4\xf7\xfb\x74\x4f\xff\x06\x00\x00\xff\xff\x76\xcb\x6a\x7a\x25\x05\x00\x00")

func templates_testSingletonPsql_upsertTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonPsql_upsertTpl,
		"templates_test/singleton/psql_upsert.tpl",
	)
}

func templates_testSingletonPsql_upsertTpl() (*asset, error) {
	bytes, err := templates_testSingletonPsql_upsertTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/psql_upsert.tpl", size: 1317, mode: os.FileMode(420), modTime: time.Unix(1527189206, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_testUpsertTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x93\xcf\x6e\xda\x40\x10\xc6\xcf\xde\xa7\x98\x5a\x6d\x65\x57\xce\x46\xbd\xa6\xe2\x90\x10\x0e\x55\x55\x84\x82\x79\x80\xc5\x1e\x93\x15\xeb\x5d\x6b\x77\x1c\xa0\x8e\xdf\xbd\x5a\x03\x09\x7f\x8c\xc4\x25\x55\x0f\xec\x61\x76\xbe\xd9\xdf\x7c\x7c\x6e\x9a\x1b\xf8\x4c\x62\xae\x70\x2c\x4a\x9c\x4a\xbd\xa8\x95\xb0\x70\x37\x00\x9e\xfa\x2a\xf7\x65\x78\x05\xb7\xbf\x79\x05\x92\xa4\x70\x28\x1c\xc2\x4d\xdb\xb2\xe3\x01\x13\x55\x5b\xa1\xce\xe5\xd5\xb6\xde\x2b\x7e\x11\xf6\x2a\x69\x26\x4a\x54\xbd\xd2\xab\xb0\x8f\xe5\x45\xad\x33\x20\x74\xd4\x34\xa7\xf4\x6d\x3b\xab\x1c\x5a\x8a\x08\xbe\xf9\x0e\xa9\x17\x3c\x8d\xa1\x61\x01\xf1\x89\xb0\x42\x29\x54\x51\xcc\x58\x20\x0b\x50\xa8\xa3\xa6\x39\xe5\x68\xdb\xa1\x51\x75\xa9\x5d\x0c\x83\xc1\xc5\x9e\x89\x95\xa5\xb0\x9b\x5f\xb8\x79\xeb\x6e\x58\x10\x10\x9f\x2e\x65\x15\x85\xfe\xac\xa4\x5e\x40\x87\x07\x2b\x49\xcf\x60\xb4\xda\x40\xb5\xd5\xc1\x12\x37\x90\x6d\x95\x61\xcc\x82\x96\xb1\xc0\x21\xe6\xde\x04\x2b\x74\x6e\x4a\xf9\x07\xf9\x18\x57\x53\xc4\x3c\x8a\x59\xf0\x22\x2c\xa0\xed\x7e\xc6\xb2\xe0\xf6\x16\xee\x89\xb0\xac\x08\xe8\x19\xe1\xe7\x78\x3a\x7a\x4a\xc1\xc9\x1c\xc1\x14\x20\x34\xcc\x26\xbe\xc2\x82\x3e\x76\xff\xc8\xa1\x73\xef\x37\x4d\xdb\x19\xe3\x1f\x3a\xe4\x98\x92\xad\x33\x8a\x3c\x60\x02\x5f\xfb\x46\x26\xd0\x57\x7d\x7c\x48\x37\x15\xba\x04\xc8\xd6\x18\xff\xe8\xe6\x7e\x1a\x80\x96\x6a\x67\xd6\xc8\x6f\x53\x44\xe1\x4c\x77\x36\x91\x79\x7f\xf4\x02\x21\xb8\x8e\xe5\x0e\xbe\xb8\x30\xf1\x03\x77\xe6\xd1\xda\x6f\xf5\xbb\x76\x94\xae\xa3\xb9\x91\x8a\x3f\xe0\x42\xea\x28\x8e\x59\x90\x63\x81\x16\x68\xcd\x9f\x8c\x52\x73\x91\x2d\xbd\xa1\x6f\x6b\xf6\x81\xf3\x7d\x88\xd6\x09\x14\x42\x39\x4c\x3c\x74\x77\x5c\xb7\x46\xdd\xe9\x2f\xec\x70\x06\x9f\x99\x5a\x53\x57\x38\xfd\x6b\xf6\xa1\x8e\x68\x1d\xf3\xa1\x6f\x3b\x60\x3f\x67\x88\xf6\x33\x7d\x4b\x37\xd5\x37\x7d\x3f\x6a\x09\x57\x42\x13\x18\x8d\x60\x31\x33\x36\x4f\x60\x61\xe8\x2e\x4c\xb6\xfd\x3b\xa2\x93\x7c\xcd\x26\x8f\xf7\xe9\xa8\x2f\x5f\x1f\x91\x96\x9d\xe3\x57\x7d\x76\x9c\xf3\x8f\x0d\xd6\xd5\x39\xf1\x19\xff\x67\x31\xf9\x1f\x52\xd2\xb2\xbf\x01\x00\x00\xff\xff\x06\x55\xfd\x54\x80\x06\x00\x00")

func templates_testUpsertTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testUpsertTpl,
		"templates_test/upsert.tpl",
	)
}

func templates_testUpsertTpl() (*asset, error) {
	bytes, err := templates_testUpsertTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/upsert.tpl", size: 1664, mode: os.FileMode(420), modTime: time.Unix(1527186259, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/17_upsert.tpl": templates17_upsertTpl,
	"templates_test/singleton/psql_main_test.tpl": templates_testSingletonPsql_main_testTpl,
	"templates_test/singleton/psql_suites_test.tpl": templates_testSingletonPsql_suites_testTpl,
	"templates_test/singleton/psql_upsert.tpl": templates_testSingletonPsql_upsertTpl,
	"templates_test/upsert.tpl": templates_testUpsertTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"17_upsert.tpl": &bintree{templates17_upsertTpl, map[string]*bintree{}},
	}},
	"templates_test": &bintree{nil, map[string]*bintree{
		"singleton": &bintree{nil, map[string]*bintree{
			"psql_main_test.tpl": &bintree{templates_testSingletonPsql_main_testTpl, map[string]*bintree{}},
			"psql_suites_test.tpl": &bintree{templates_testSingletonPsql_suites_testTpl, map[string]*bintree{}},
			"psql_upsert.tpl": &bintree{templates_testSingletonPsql_upsertTpl, map[string]*bintree{}},
		}},
		"upsert.tpl": &bintree{templates_testUpsertTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

