// Code generated by go-bindata.
// sources:
// override/templates/17_upsert.go.tpl
// override/templates/singleton/psql_upsert.go.tpl
// override/templates_test/singleton/psql_main_test.go.tpl
// override/templates_test/singleton/psql_suites_test.go.tpl
// override/templates_test/upsert.go.tpl
// DO NOT EDIT!

package driver

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templates17_upsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\xdf\x6f\xdb\x36\x10\x7e\x96\xfe\x8a\xab\x31\x20\xd2\xe0\x28\x7b\xce\xe0\x87\x26\x69\xbb\xa2\x6b\xea\x35\xcd\x0a\xac\x28\x02\x5a\x3a\xd9\x44\x68\x52\xa5\xa8\xa4\x9e\xa6\xff\x7d\x38\x92\xb2\x24\xff\x68\xdc\x76\xdd\xba\xa7\x58\xe4\xf1\xee\xe3\x77\x1f\x79\xc7\xd4\xf5\x31\xfc\xc0\x04\x67\x25\x9c\x4e\x20\x79\x4c\xbf\xb0\x4c\xde\xb0\x99\x40\x70\x7f\x92\x4b\xb6\xc4\xa6\x09\xad\x69\x99\x2e\x70\xc9\xdc\x34\x2d\xe8\x2c\xe0\x2f\x48\xae\xba\x59\xbb\x80\xe7\x90\x3c\xce\xb2\x67\x42\xcd\x98\x80\xe3\xa6\x09\x4f\x4e\xe0\xba\x28\x51\x9b\x67\xc0\x8c\xc1\x65\x61\x4a\x60\x12\xb8\xa4\xb1\x31\x30\x99\x41\xa6\xd0\x8e\x55\x45\xc6\x0c\x82\xd2\xc0\xe7\x52\x69\x04\x25\x21\x55\x32\x17\x3c\x35\x49\x98\x57\x32\x85\x48\xc1\x8f\x75\xed\xf0\x27\xd7\xc5\x15\x97\xf3\x4a\x30\xdd\x34\x71\x1b\x25\xb2\x20\xa4\x32\x90\x5c\xaa\x73\x25\x0d\x7e\x34\x4d\x93\x9a\x8f\xe4\x8a\x3e\x12\x3f\x38\x86\xba\x46\x99\x11\x48\x1f\xf9\x95\x3c\xf7\xd1\x60\xa6\x94\x18\xaf\x83\x9f\x2b\x51\x2d\x65\x09\xef\xde\x97\x46\x73\x39\x1f\xfb\x05\x7e\x7c\xec\x77\xd3\x9a\xcd\x14\x17\x89\xff\x88\x01\xb5\x56\x1a\xea\x30\xd0\x68\x2a\x2d\x41\x25\x0e\xa9\x03\xda\x07\x69\xd7\x3d\x43\x73\x71\x16\xc5\x75\x8d\xa2\x44\x0b\x7c\x0c\xed\x84\xb7\xf4\xf3\x32\x6b\x9a\xf1\x16\xf4\x2d\xd4\x9f\x06\x1b\x87\x4d\x18\xae\x89\x08\x5d\x0a\x29\x29\xbd\x34\xd2\xcf\x29\x93\x3c\xdd\x48\xe8\xf4\xeb\x32\x0a\xd6\x67\x49\x63\x96\xa3\x83\x53\x3c\xfd\xee\x72\x5c\x87\x01\xcf\x69\x17\x74\x44\xbe\xb3\x04\xff\x6c\x71\x3d\x9a\x80\xe4\x82\x80\x06\x05\xd1\x1e\xd9\x90\x6f\x35\x2b\x9e\x68\x1d\xa1\xd6\x71\x1c\x06\xcd\x2e\x31\xec\xc9\xfe\xae\xe4\x43\x55\x72\x39\xa7\x6f\xfc\x88\x69\x65\x94\xfe\x9c\x03\xde\x73\x5d\x7c\x99\x32\xa6\xdb\x94\x13\x10\x47\xef\x13\x0f\xa9\x47\xfc\xb6\x5c\x3a\x73\x3f\xd4\x5b\xb5\x3b\x1d\xff\x92\x8c\x76\x88\xbd\x2f\x6e\xc2\xfd\x9f\x4a\x65\x9d\xbc\x6f\x21\x8b\x2b\xc4\x01\x53\x90\xa9\xb4\x5a\xa2\x34\xcc\x70\x25\x21\x57\x1a\x16\xea\x1e\x8c\x82\x42\xab\x02\xb5\x58\x41\x55\xe2\x70\xaf\x36\xe2\x60\xbb\x87\xaa\xea\x7f\x2e\xaa\x75\xfd\xe1\x39\x28\x98\x74\xc9\xf5\xf5\xc8\xce\x97\xc9\x25\xde\x47\xa3\xba\x4e\xa6\xb7\x73\x57\xfe\x4f\x41\x2a\xa8\xeb\x41\x4b\x40\xfc\xde\xf1\x0c\x33\xcb\x79\x65\xe9\x19\x59\x35\x84\x01\x75\x0b\x94\x79\x41\xb9\x1c\x19\xbe\xc4\xd2\xb0\x65\x71\xe3\xac\x6e\x16\x28\x0a\xd4\x23\x48\xa0\x71\xd6\x9d\xa8\x7f\x51\xea\xb6\xb4\x32\x1a\xc8\x3f\x53\x67\x98\x2b\x8d\x2e\x0b\xd6\xe8\xe0\xb3\xb0\x2d\xe5\x6e\xb7\x04\xd7\xa2\xb5\xe4\x87\x61\x20\xff\xbc\xc0\x9c\x55\xc2\xd8\x96\xe8\x43\x85\x9a\x63\x99\x5c\x2a\xf9\x07\x6a\xe5\xa7\xae\x90\x74\xe0\x55\x72\xa1\xee\x65\xa7\x13\xcf\xf4\x5b\x6e\x16\xde\x78\x0c\x2a\x0e\xc3\xe0\xe4\x04\xce\x2a\x2e\x32\x48\x59\xba\x40\xb8\xc5\x15\x70\x79\x2c\xb8\x44\xa8\xe6\x82\x8b\x15\x1c\xc3\x72\x55\x7e\x10\x70\x57\x42\x41\x7f\x0b\xad\x66\x02\x97\x65\x18\xcc\xaa\x9c\xc0\x94\x46\x2f\x99\x9c\x0b\xa4\xea\x70\x56\xe5\x39\xea\x28\xb6\x34\x6d\x49\x86\x36\x39\xab\xf2\xe4\xad\xe6\x06\xcf\x56\x06\xa3\x23\x73\x44\xb9\x01\x92\xe6\xae\xe9\xdc\x4e\x87\x9b\xc3\x09\x0d\x53\x7e\x6f\xc6\x90\x12\x08\xcd\xe4\x1c\xb7\xc4\x38\x70\x78\x65\x75\x19\xa5\xfb\x1d\x6e\x9a\x96\x46\xa7\x4a\xde\x25\xcf\x8d\x62\xd1\x40\xce\xc9\x0b\x2e\xb3\x78\x27\x86\xa1\xdd\xb9\x12\xff\x2c\x8c\xe1\xf5\xb0\x1f\xc6\xd0\xee\x4b\x60\x6c\xfb\xec\x89\xf0\x13\xbe\x48\x43\xa7\x13\xa0\x59\x3f\x11\x87\x41\x27\x92\x69\xd5\x8a\x64\x56\xe5\xb1\x3d\x66\x3b\x25\xeb\x8e\xd4\x39\xc9\xf2\x65\x65\x92\xd7\xbf\xaa\xf4\x96\x3c\x59\xa1\x8e\x9d\x5e\x33\x0a\xf4\xf0\xfa\x77\xb7\xb8\x7a\x7f\x70\xa0\x6b\x29\x5c\xa8\x30\xb8\x63\xda\x9e\x51\x7b\xff\x84\x56\xd3\x8f\x7c\x60\x22\xa0\x6d\x27\x35\x1a\x02\x32\xa4\xfc\x79\xef\x8b\x4e\x66\x18\x04\xfb\x10\xb4\x77\xe4\xc3\x26\xfd\x03\x7c\x98\xb5\xaa\x4c\x7f\x41\x97\x42\xfa\x8c\xc3\x20\xf0\x95\xed\x74\xb2\xa1\xdc\xeb\xde\xd7\xd7\xe3\x9f\x6a\xbe\x64\x7a\xf5\x02\x57\x3d\x63\xa2\x98\x38\x15\x28\xfd\xf1\x8a\xe9\xf2\xff\xc9\x92\xfb\xf0\xdd\x5f\x49\xfb\xe2\x33\xca\xdf\xf2\x9b\x95\x80\x8a\x53\x25\x32\x7b\x17\xcf\xec\x25\xe7\xf7\x9a\x5a\x08\x20\x78\x69\x2b\x83\x2d\x0d\x41\x7b\x77\x10\x13\x1b\xf7\x48\x87\xb2\x9d\xe8\xe3\x5c\x2f\x9c\xc0\x92\xdd\x62\xd4\x55\x40\x5a\x71\x28\x1f\x74\x8a\xc9\x57\xb1\x5a\x07\x19\xef\x93\xf6\xf6\x62\xbb\x89\xc0\x9d\x8d\x84\xaa\xc3\x0a\x26\x6e\xcf\x4e\xdd\xbf\xd1\xd0\x54\x95\x66\xae\xb1\x8c\x32\xce\x04\x92\xff\x51\x5d\xf7\x1f\xcf\x4d\x33\xda\xd5\xa0\x69\x34\xed\x70\x57\xef\xdb\x82\x6e\x73\xe8\xe2\xde\x31\x51\xe1\x4b\x56\x14\x76\xf3\x74\x6e\xba\x4a\x75\xc6\x65\xe6\xa7\xf6\x51\xf2\x66\x55\xe0\xde\x2d\xaf\xdd\xb6\x51\x83\xb6\x0e\xf7\xea\xe7\xa0\x80\x5a\x42\x7c\xda\x34\x9a\x98\x0c\xdb\x8c\x59\xb8\x1a\xcd\xb7\x06\x4b\x71\x29\xe0\x0e\xa8\x43\xac\x16\x6c\xe3\x9a\x14\x4b\xa3\xbd\x74\x31\xa7\x34\x25\xcf\x65\xc6\x35\xa6\x26\x6a\x07\x7e\x27\x8b\x57\x79\xa4\x48\x34\x77\x4c\x0c\x7a\x02\x3b\x59\x3e\xd5\x6a\xd9\x6e\xc1\x3a\xf4\x37\xe6\x20\x49\xb1\xbb\xe1\x1c\x12\x6a\xdd\xb8\x34\xa8\x73\x96\x62\xed\xfa\x1c\x2b\xf9\x0d\xb2\x7a\x44\xb6\x0b\xbb\xe0\x53\xa3\xf7\x87\xee\xf9\x70\x3b\xe5\xb9\xeb\x03\x2f\x70\x56\xcd\x5f\xaa\xcc\x75\x00\xf9\xd2\x24\x4f\x0b\xcd\xa5\x11\x32\xea\xe6\x6d\xa5\xd1\xad\x2f\xab\xf1\xf8\x61\x6b\x62\xa7\x8b\xf6\xc0\x7e\x36\x9a\x68\xd7\xee\x05\x4e\x1b\xd4\xb1\x25\xf6\x18\xbd\x56\xf7\x51\x0f\x84\x8b\x91\x24\x49\x9c\x5c\xa5\xcc\x6a\x8d\x48\xa1\x01\xeb\xd2\x76\x36\x7b\x3d\xf9\x50\x91\xed\x0f\x3f\xc7\xab\x7f\xd4\xac\xb5\x35\x99\x40\xf9\x41\x24\x4f\xb4\xbe\x54\xaf\xd5\xbd\xab\xd0\x3e\x22\x89\xee\xe4\x04\xda\xf3\x6f\x1f\x35\xf2\xc8\xf8\xc4\x03\x93\x2b\xb3\xa0\xd7\xcf\xfd\x02\x25\x98\x05\x6a\x3c\x2a\xa9\xb3\x76\x67\xde\x2b\xb3\x6b\xd1\x76\xd3\x74\xd3\x9e\x22\xbb\x3f\x7a\x3e\xec\x66\x69\x93\x94\xed\x75\x0f\x73\x32\xa4\xa0\xeb\xc9\x77\xf6\xd2\x54\x3d\xe8\x65\x48\xcf\x42\x7b\xe5\x7d\x4e\x0d\x19\x75\xe2\xe9\x57\xfe\xc3\x5a\x89\xb6\x65\x39\xc0\xdc\xb6\x28\x30\x71\xdb\x3d\x38\xc0\xba\x55\x09\x3e\xf1\x5e\x59\xff\x4f\x2f\x53\x8f\x73\x83\xfa\x8b\xde\x2a\xfe\x35\xb2\x4e\x9b\x77\x2a\xb9\xe8\xbf\x53\x9a\xf0\xef\x00\x00\x00\xff\xff\x2b\x4e\xd8\x2e\xbb\x15\x00\x00")

func templates17_upsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates17_upsertGoTpl,
		"templates/17_upsert.go.tpl",
	)
}

func templates17_upsertGoTpl() (*asset, error) {
	bytes, err := templates17_upsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/17_upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSingletonPsql_upsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x5f\x6b\xdb\x3e\x14\x7d\x96\x3e\xc5\xad\xa0\xd4\x06\xe1\xfe\xfa\xfa\x83\x3c\xb4\xb1\xdb\x65\x04\xbb\x89\xed\x6d\x30\xf6\xe0\xd8\xd7\xa9\xc0\x91\x33\xfd\xc9\x56\xd6\x7c\xf7\x21\xc7\xae\xd3\xa6\xa3\x14\x82\x12\x74\xef\x39\x3a\xf7\xe8\x28\x97\x97\xb0\xb2\xa2\xa9\xf2\xad\x46\x65\x16\x16\xd5\xe3\x7d\xab\xcd\x5a\xa1\x3e\x14\x34\x14\x90\x2e\xe6\xa0\x4d\x61\x70\x83\xd2\x80\x36\x4a\xc8\x35\x58\xed\x56\xf3\x80\x60\x3b\x6c\x58\x98\x02\xb6\xaa\xdd\x89\x0a\xab\x80\xd6\x56\x96\xff\xa4\xf6\x2a\x51\x40\xa5\xc4\x0e\x95\x0e\x42\x51\x34\x58\x1a\x0e\xa6\x58\x35\x18\x17\x1b\xec\x8f\xe0\x60\xb7\x55\x61\x30\x91\xd3\x56\xd6\x8d\x28\x0d\xac\xda\xb6\xe1\xa0\xd0\x0c\x35\x0e\x65\x5f\xe3\xf0\xeb\x41\x18\x6c\x84\x36\xf0\xfd\xc7\x81\xc1\x1f\xc4\xfe\xa1\x64\xe8\x83\x89\xdb\xdc\x14\x72\xdd\x60\x30\xab\x50\x9a\x85\x6d\x0d\xa6\x8d\x28\xd1\xe9\x0a\xe6\x0b\x0e\xee\x7b\xb9\x18\xc9\x7d\x4a\x46\xf6\x8f\x10\x3c\xa3\x7c\x4a\x14\x7e\x0c\xab\xd0\xf8\x94\x92\x95\xad\xe1\xff\x63\xdc\x1d\x9a\x1b\x5b\xd7\xa8\x3c\x9f\x92\x0a\x6b\x54\x47\xc5\x7b\x3b\x14\x57\xb6\x76\xf0\xb2\x6d\xec\x46\x6a\x47\xc1\xc2\xe8\xf6\x3a\x9f\x67\xf0\xe5\x7a\x9e\x47\x29\xa3\x44\xd4\xd0\xa0\xf4\x46\x95\x70\x36\x81\xff\x9c\x5d\xcf\xb8\x09\xd4\x1b\x13\xa4\x5b\x25\xa4\xa9\x3d\xe6\x9d\x6b\xbf\xc7\x83\xfb\xcd\x38\x25\x84\x1c\x6c\xd6\xc1\xe7\x56\x1c\xb1\x71\x60\x1c\x98\x3f\x74\x0c\x0a\x9b\xa2\xc4\x87\xb6\xa9\x50\x75\x41\x08\x72\x8d\x33\x59\xe1\xef\xe3\x02\x7f\xa5\x8b\xc3\x15\x87\x2b\xdf\xa7\x64\x4f\x29\x71\x8a\x6e\x7b\x45\x94\x38\x87\xdc\x19\x6c\x16\xa7\xd1\x32\x83\x59\x9c\x25\x70\xae\xdd\x27\x89\x61\x9a\xc4\xb7\xf3\xd9\x34\x83\x4e\xe9\x73\xc6\xf8\x38\x22\xa7\xc4\x19\x25\x6a\x38\x3b\x09\xdc\xd3\x53\x27\xe4\xb0\xef\xc3\x64\x70\x67\x65\xeb\xe0\xab\x12\x06\xd3\x6e\x72\x8f\x85\x09\xc4\x49\xf6\x69\x16\xdf\x31\x27\x12\xb0\xd1\xf8\xb2\xf3\xe6\xd1\xa0\x77\xe1\x5d\xf8\x6f\xc0\x5f\xf8\x37\x26\xba\xb3\xef\xad\x7e\xe6\x43\x98\x40\x7e\x1f\x5e\x67\x11\xa4\x51\x06\xcc\x4d\x40\xea\x56\x81\xe0\xb0\x73\x97\xad\x0a\xb9\xc6\xfe\x95\x74\x42\xdc\x80\x62\xbc\xdf\x13\x65\xbc\x53\x46\xf6\x6e\xf9\xe9\x52\x59\xbd\x8c\xdd\x18\xd7\x93\xa4\xee\x3a\xe4\x6b\x91\x07\x92\x37\x4b\x0c\x26\x10\x7d\x9b\xce\xf3\x30\x0a\x03\xf6\x0e\x7a\x7f\xb8\xf4\x3e\xab\xee\x55\x8c\x53\x9c\x12\x2f\xa3\x2c\x5f\xc6\xb3\xf8\x0e\xd8\xbb\x4e\x77\x7f\x24\x83\xc9\xee\x0c\x85\xc6\x2a\x09\x0e\xd4\xf7\xfb\x74\x4f\xff\x06\x00\x00\xff\xff\x76\xcb\x6a\x7a\x25\x05\x00\x00")

func templatesSingletonPsql_upsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSingletonPsql_upsertGoTpl,
		"templates/singleton/psql_upsert.go.tpl",
	)
}

func templatesSingletonPsql_upsertGoTpl() (*asset, error) {
	bytes, err := templatesSingletonPsql_upsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/singleton/psql_upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_testSingletonPsql_main_testGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x6d\x6f\xe3\xb8\x11\xfe\x2c\xfd\x8a\xa9\x81\x1c\xa4\xad\xc2\x1c\xfa\xf2\x25\x07\x63\x91\x38\x4e\xba\xb8\xac\xe3\xb3\xdd\x1e\x8a\x6e\xdb\xa3\xad\x91\x42\x44\x22\x19\x92\x8a\xd7\x3d\xe4\xbf\x17\x43\x4a\xb6\x9c\xb5\x93\x6d\x8b\x05\xfa\xcd\x26\x9f\x19\xce\x33\xef\x7a\xe2\x06\x4c\xf9\x79\x7a\x73\xfd\x80\x1b\x18\x82\xc1\x12\x3f\x6b\xf6\xb1\xb1\x6e\xa4\x6a\x2d\x2a\x4c\x7e\x49\xde\xd7\xe9\x3f\x2e\x6e\x17\xe3\x19\x2c\x2e\x2e\x6f\xc7\x70\x37\xb9\xfd\x2b\xb0\x77\x9f\xe4\x27\xfb\xdb\x8b\xab\x2b\x18\xdd\x4d\xe6\x8b\xd9\xc5\x87\xc9\x02\xd8\xbb\xf7\x70\x7d\x37\x1b\x7f\xb8\x99\xc0\x8f\x63\x42\xbd\xff\xe1\x93\xfc\x25\x8d\x63\xb7\xd1\x08\xba\x5c\xa0\x75\x68\xc0\x3a\xd3\xac\x1c\xfc\x1a\x47\xf9\x72\xa4\xa4\x84\x77\xf6\xb1\x62\x57\x97\x31\x1d\x4c\x78\x8d\x40\x10\x21\xcb\x38\xba\x57\xd6\x01\xec\xfe\x37\x16\x4d\xff\xbf\xe6\xd6\xf6\xff\x5b\x5b\xd5\x2a\xc7\xdd\xbd\x32\x5e\x5e\x48\x17\xc7\x91\x2e\xa7\xdc\xda\x6b\x51\x6d\x01\x71\xe4\xd0\xba\xab\x4b\xff\x6a\x7b\xf6\x1c\xc7\x45\x23\x57\x20\xa4\x70\x49\x1a\xcc\xfc\xc8\x85\x84\x21\x7c\xd7\x71\xf8\xf5\x99\x60\x67\x67\x60\xd1\x35\x1a\xf2\xa6\xd6\x16\xdc\x3d\x42\xce\x1d\x5f\x72\x8b\x60\x57\xf7\x58\x73\xe0\x32\x07\x51\x93\x19\x16\x84\x23\x3b\x14\x70\x70\x48\x47\xdc\x6c\xc0\x70\x99\xab\xba\xda\x90\xae\x12\x25\x1a\xee\x30\x07\x32\xaa\xa7\x4a\x81\xbb\xe7\xce\x9f\x5a\x58\x71\x09\x4b\x04\xd3\x48\xe0\x25\x17\xd2\x3a\x52\xdc\x58\x21\x4b\xb2\x60\x5f\x91\x7d\xac\x96\x4a\x54\x68\xe0\x6e\xf6\x11\x34\x5f\x3d\xf0\x12\x59\xe0\x97\x68\x78\xd7\xf1\x49\x03\x91\x24\x05\x34\x46\x19\x22\x4d\xd9\x81\xc6\x84\x83\x38\x8e\x9e\x84\x46\xc3\xe6\xe8\xae\xb0\xe0\x4d\xe5\x92\x81\xa6\xb0\x05\x9e\x83\x0c\x06\xba\x59\x56\x62\x35\x48\x8f\x42\xc9\x0b\x83\x0c\xfe\xf8\x87\xdf\xff\xee\x38\xa8\x8d\x20\x29\x34\xf8\xd8\x08\x83\x83\x94\x42\xc7\xda\xd4\x18\x42\x10\xbc\x41\x37\xf7\xf1\x6a\xe5\xf2\xa5\xe4\x35\x61\x23\xcd\x7c\xd6\x1c\x03\xd2\x65\x80\xf9\x64\x3a\x06\xa3\xcb\x00\xf3\x39\x76\x0c\x46\x97\x2d\x8c\x52\xad\x07\xfb\x20\xf7\x78\x7b\x4c\x97\x9e\xc7\xb4\x75\xe4\x89\x31\xf9\x7e\x08\x4f\xbc\xe2\xec\x12\x4b\x21\xff\xc2\x2b\x91\x73\x27\x94\x4c\x52\xd6\xfe\xc1\x24\x8e\x22\x0f\x09\x6a\x26\xca\x8d\x6b\xed\x36\x49\x20\x47\x41\xd9\x71\xc9\x8e\x62\xc9\x25\x1d\x36\xb8\x67\x8b\x9d\x28\x97\xf8\x1f\xe3\xc7\x86\x57\x36\x09\x3c\x33\xf8\xbe\xc3\x07\x72\xaf\x28\x0f\x71\xeb\xe0\x5d\x98\x8e\xe3\x5b\x1f\x74\x02\x5b\x97\x64\x71\x94\xb2\xd1\x3d\xae\x1e\x12\x72\x8f\x28\x7c\x76\xfe\x66\x08\x52\x54\x94\xaf\x91\x41\xd7\x18\x49\xa7\x71\xf4\x1c\xc7\xd1\xd9\x19\x8c\x0c\x72\x87\xc0\xdb\x32\x13\xff\xc2\x1c\xf2\x25\x90\x09\x8c\xe2\xd1\x2b\xfe\xe1\x0e\xc3\xe6\x8e\x2f\x2b\x0c\x17\x5b\x06\xbd\x47\x87\xa0\x59\xcd\x1f\x70\x7a\xd3\xf5\x93\x24\xfd\xe1\x2d\x73\x7a\xb2\xb9\x51\x7a\xe1\x9f\x7e\x53\xae\x2f\xb6\xf2\x6c\xbe\x52\x30\x8e\xa8\x29\x8d\xea\x1c\xce\x87\x80\x9f\x71\xc5\x46\xaa\xae\xb9\xcc\x93\x81\x2e\xff\x49\x77\x54\x62\xa7\xa7\xa1\x7e\x4f\x95\xac\x36\x83\x0c\x76\x64\x3b\x71\x36\x96\x4f\x30\x04\xae\x35\xca\x3c\x51\x96\xfe\x0b\x43\x49\x48\x68\x5d\x8e\xe5\x53\x92\x32\xc6\xd2\x38\x0a\xf6\x1d\x7e\xd2\x3e\x56\x5e\xfd\xce\xe3\x7d\x81\xaf\x7f\x24\x8e\x4c\x06\x6b\x7a\x40\x28\x36\x15\x1a\x93\x9e\xa9\x73\x97\xab\x86\x8a\x70\xdd\xd7\x3d\x77\xb9\x6f\xde\x12\xd7\xd7\x3f\xe2\xe6\x0a\xad\x33\x6a\x83\x26\xd9\xce\xbe\x0c\xcc\x5e\x74\x77\xfa\xb8\x71\xaf\x7a\x5a\x19\xcb\x7e\x36\x5c\x27\x68\xa8\xda\x0a\x2e\x2a\x6a\xdf\x0a\x2c\x89\x42\xeb\x69\x58\x05\x3f\x50\x13\xe8\x87\xb4\x6f\xe3\xff\xfa\x92\x7d\xac\xf6\x9f\x39\xc0\xe7\x67\x2e\x0e\x3d\x52\xd4\x8e\x4d\x8d\x90\xae\x92\xa4\x3d\xfd\xba\x77\xd7\x5c\x38\x28\x94\x39\x4c\x32\x8e\xd6\x6c\x54\x29\x8b\x49\x0a\x67\x67\x70\x51\xd0\xe0\xef\x32\x52\x58\xc8\x95\xc4\x0c\x56\x84\xf0\x73\x73\x6d\x84\x43\x40\x99\x83\x2a\xfc\x81\x16\x1a\xe3\x83\xbe\xfa\x46\x2c\x0e\x38\xb0\x95\x97\xa2\xda\x2e\x05\xfb\x43\xd3\x34\x72\x54\xe7\x89\xa5\x0c\xcb\x3a\xe9\x76\x8f\xc8\x80\x9b\xd2\x02\x63\x2c\xfc\xef\x8d\xd6\xd5\x81\x12\x69\x85\x83\x54\x5b\x4f\xff\x59\x61\x88\x02\x2a\x94\xc1\x98\x94\x3c\xf3\xbd\xf7\xcb\xaa\x57\x02\xc1\x12\xcb\x26\xb8\x9e\x21\xcf\xd1\xb4\xe8\x40\xd7\x86\xf2\x39\x1f\xc2\x77\xcb\x8d\x43\xcb\x2e\x9b\xa2\xf0\xbb\x0e\x5d\x91\xbb\x0f\x5d\xad\xfa\x85\x17\x54\x6c\x0f\x43\xe8\x82\xf0\x36\x96\xe7\x43\xa0\xeb\x59\x23\xdf\x88\x62\x17\x26\xd3\x48\x29\x64\x79\x3e\xd8\xba\x38\x78\x29\x7d\x81\x0f\x8f\xb7\x13\x25\x49\x0f\x5c\xa3\x31\x7b\xd7\x2f\x5b\xe6\x9b\x01\x6f\x3d\x0e\x7f\xfb\x7b\x70\x25\xd9\xdc\x0a\x75\x47\x1d\x8b\xb9\xa6\x77\x8b\x64\x30\xbd\xf9\xd3\xdd\x7c\x31\x3c\xb1\xbe\x01\xd2\x7c\xf5\xd3\xef\x05\x66\x7a\x37\x5b\x0c\x4f\x72\x8f\xa1\x99\x7a\x08\xf3\xe7\xf9\x78\xd6\xe9\xa1\x99\x7e\x50\xcf\xc5\x7c\x7e\xfd\xe1\x76\xdc\xe1\x76\x3b\x2f\xa1\x9f\x8f\xf0\x7a\x39\xcd\x76\xb9\xea\x6a\x9d\x75\x61\x13\xaa\x71\xa2\x62\x0b\xac\xb5\x87\x0d\xfc\xda\x57\x76\x3b\xd0\x6b\x23\xf9\x68\x01\x86\xba\x06\xa5\x69\xb3\x81\x42\x54\xd8\x55\x1f\x11\xbb\x6e\x89\x79\x2b\x06\x27\xf6\xfc\x24\x3f\xd7\xca\xba\xd2\xa0\x3d\xef\x79\xb4\xf3\xda\xd6\x33\xdb\x72\x08\xfb\x5b\xaf\x1e\xbe\x54\xdb\x29\xf2\x40\xdf\xa1\x77\x98\x4a\x12\x28\x7d\xc5\x9c\x93\xa3\x86\x74\x9b\xcf\xff\x91\x49\xbb\xf1\xfb\x0d\xcd\xea\x27\x1d\x0c\xc1\xd5\x9a\xf9\x4d\x2a\xdd\xd6\x0a\x1d\xb5\xd3\xe1\x48\x42\xee\xef\x3a\xbb\x74\x6c\x15\x68\xd6\xb6\x5e\x9f\x82\x01\x9c\x2f\xbf\xd8\x30\x0e\xeb\xee\xaf\x5f\x6f\x68\x26\xa8\xd7\x3b\x38\x3d\x15\xc5\x29\x7e\x16\xd6\xd9\x43\xcf\x9c\x9d\x81\x43\x6e\x72\xb5\x96\xbe\xaf\x37\x0e\x2d\xac\x2a\xe4\xb2\xd1\xe0\xb8\x7d\xb0\xb0\xbe\x47\xe9\x47\x5b\xf8\x8e\x2b\x84\x14\xf6\xbe\x6b\x6e\x87\xec\xec\x14\x1e\xff\x2a\xdb\x5b\x2a\xfd\xb7\x74\xe7\xd6\xb7\xd6\xca\x0e\x0f\x1e\xf1\x5f\xaf\xa7\x5b\xb7\x29\xcb\x66\x58\xab\x27\xda\x97\x7b\x2d\xe7\x58\x74\x95\x24\x56\x49\xfb\xe1\x9f\x05\x3a\xfe\x5b\x5b\x14\x5b\x2e\x07\x9e\xed\xae\x32\x6f\xb5\x37\xe0\x85\x47\x76\x88\x76\xf8\x3c\x56\xec\x4e\xa3\x4c\x06\x5d\xdf\x18\x64\x90\x1b\xf1\x84\x86\x4d\xe7\x3f\xdd\x5e\x36\xa2\xca\x7f\x6a\xd0\x6c\xda\xc1\xd0\x7d\x3a\x85\x2c\xff\xb2\x68\x5e\x96\x54\xfb\x81\x92\xbe\xd6\x00\xa5\xa8\xb2\x2f\x5c\xb6\xcf\xe5\x39\xfe\x77\x00\x00\x00\xff\xff\x00\xef\xd0\xbf\x8f\x11\x00\x00")

func templates_testSingletonPsql_main_testGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonPsql_main_testGoTpl,
		"templates_test/singleton/psql_main_test.go.tpl",
	)
}

func templates_testSingletonPsql_main_testGoTpl() (*asset, error) {
	bytes, err := templates_testSingletonPsql_main_testGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/psql_main_test.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_testSingletonPsql_suites_testGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xc1\x0a\xc2\x30\x10\x44\xef\xfd\x8a\xa5\xe4\xd0\x4a\x9b\x0f\x10\x3c\x78\xd4\x83\x88\xb4\x1f\x10\xed\xb6\x04\xe2\x5a\xba\x5b\x10\x42\xfe\x5d\xd2\x46\xe9\xc1\xdb\x0c\x6f\x32\x99\xed\x67\x7a\x40\x83\x2c\xed\xc8\x38\x49\x21\xb0\x13\x64\xb1\x34\xe8\xa6\x04\x9f\x01\x78\x5f\xc3\x64\x68\x40\x50\x96\x3a\x7c\x57\xa0\xc4\xdc\x1d\xc2\xfe\x00\xba\x89\x8a\x43\x48\x39\xdb\x27\xa8\x4f\x7c\x7e\x59\x5a\x30\xd4\x3f\x8e\x8e\xb7\x56\x19\x67\x0d\xc7\x22\xa5\x8f\x51\x22\xaf\x8d\xdf\x96\x8b\x79\xe2\x92\x16\x7d\x9b\xa9\xc8\xbd\x5f\x9f\xe8\x76\xbc\xba\x79\x32\x2e\x84\xbc\x82\x38\xf8\x0f\x59\x2f\x2a\x97\xbf\x90\xba\xed\x8c\xe4\x42\xf6\x09\x00\x00\xff\xff\x11\x5d\x4c\xce\xff\x00\x00\x00")

func templates_testSingletonPsql_suites_testGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonPsql_suites_testGoTpl,
		"templates_test/singleton/psql_suites_test.go.tpl",
	)
}

func templates_testSingletonPsql_suites_testGoTpl() (*asset, error) {
	bytes, err := templates_testSingletonPsql_suites_testGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/psql_suites_test.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_testUpsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x54\x4d\x6f\xdb\x30\x0c\x3d\x5b\xbf\x82\x0b\xb6\x41\x1e\x5c\x15\xbb\x76\xc8\xa1\x5f\x87\x62\x58\x10\x34\xce\x0f\x50\x6d\x3a\x15\xa2\x48\x86\x44\x2f\xc9\x0c\xfd\xf7\x41\x72\xda\xa6\x6d\x3a\x04\xc3\x86\x61\x87\xc4\x96\xf0\xf8\x1e\xf9\x48\xba\xef\x4f\xe0\xbd\xd4\x4a\x7a\x38\x1b\x83\x38\x8f\x6f\xe8\x45\x29\xef\x34\xc2\xf0\x10\x13\xb9\xc2\x10\x58\xd3\x99\x0a\x08\x3d\xf5\xfd\x10\x21\xe6\xed\x54\x77\x4e\xea\x10\xe6\xad\x47\x47\x9c\xe0\x53\x04\x28\xb3\x10\x65\x0e\x3d\xcb\x48\x4c\xa5\x93\x5a\xa3\xe6\x39\x63\x99\x6a\x40\xa3\xe1\x8f\x04\x57\x76\x6d\x66\xca\x2c\x3a\x2d\x5d\x08\x97\x56\x77\x2b\xe3\x73\x18\x8f\x7f\x05\x9b\x3a\xb5\x92\x6e\xfb\x15\xb7\x8f\x01\x3d\xcb\x32\x12\xb3\xa5\x6a\xf9\x28\xfe\xb7\xca\x2c\x80\x52\x0d\x6b\x45\xf7\x60\x8d\xde\x42\x3b\xc4\xc1\x12\xb7\x50\x0d\x91\xa3\x9c\x65\x81\xb1\xcc\x23\xd6\xb1\x7e\x27\x4d\x6d\x57\xea\x07\x8a\x09\xae\x67\x88\x35\xcf\x59\xf6\x5d\x3a\x40\x97\x7e\xd6\xb1\xec\xf4\x14\xce\x89\x70\xd5\x12\xd0\x3d\xc2\xcd\x64\x76\x7d\x5b\x82\x57\x35\x82\x6d\x40\x1a\x98\x4f\xe3\x0d\xcb\x6c\x64\xdc\xf3\xea\xa9\x82\x3e\x24\x2b\x22\xe9\xbe\xe6\x8c\x5c\x57\x11\x8f\xc9\x14\xf0\xd1\x16\xf0\x86\x01\x57\x17\xe5\xb6\x45\x5f\x00\xb9\x0e\xf3\x2f\x89\xe7\xdd\x18\x8c\xd2\x3b\x23\xae\x63\xa6\x0d\x1f\xcd\x4d\xb2\x80\xec\x93\xc8\xe1\x84\xc0\x27\xe9\x33\xf8\xe0\x47\x45\xe4\xdb\xf9\xd2\xf7\xaa\x01\x63\x09\xc4\xc4\x5e\x5a\x43\xb8\xa1\x10\x2a\xda\xc4\xca\xaa\xe1\x2c\x2e\x64\xb5\x5c\x38\xdb\x99\x9a\xe7\x7d\x8f\xa6\x0e\x81\x65\x03\xe4\x5b\xe7\xa9\xdc\xf0\xc4\xb2\xcf\xf0\xea\xe2\xce\x2a\x2d\x2e\x70\xa1\x4c\xe2\xd0\x1e\xf7\xef\xca\x0d\xaf\x68\x53\xc4\x02\x1f\x14\x8e\x02\xe5\x2c\xab\xb1\x41\x07\xb4\x11\xb7\x56\xeb\x3b\x59\x2d\x63\x43\x1f\xad\xb7\x62\x37\xb7\x6f\xd5\x19\x5b\x80\xa6\x86\x93\x10\x20\x9e\x1a\xa9\x3d\x26\x8d\x02\x92\xf4\x8d\x69\xd0\xf1\xfc\xf9\xe9\xb8\x96\x74\x49\xfa\x70\x3f\x5e\x35\xa2\xb2\x9d\xa1\x74\xf1\x62\xa8\x1e\x16\x90\xe7\xe2\x32\x62\x8e\x2c\xe5\xc9\x85\xd7\x59\xf2\x07\xd9\x08\x49\xc2\x11\xf4\xf9\x19\x64\xb4\x96\x86\xc0\x1a\x04\x87\x95\x75\x75\x01\x0b\x4b\x67\xa3\x62\xc0\xef\x92\x7e\xb1\x29\xf3\xe9\xd5\x79\x79\x7d\x68\x53\xfe\xc4\x2e\xec\x5a\x73\xec\x37\x43\x08\xf1\x57\x37\xe7\xf7\x67\x2c\x2e\xf5\x3f\x1e\xb1\xff\x64\xc2\x02\xfb\x19\x00\x00\xff\xff\xbd\x37\xa4\x75\xbe\x06\x00\x00")

func templates_testUpsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testUpsertGoTpl,
		"templates_test/upsert.go.tpl",
	)
}

func templates_testUpsertGoTpl() (*asset, error) {
	bytes, err := templates_testUpsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/17_upsert.go.tpl": templates17_upsertGoTpl,
	"templates/singleton/psql_upsert.go.tpl": templatesSingletonPsql_upsertGoTpl,
	"templates_test/singleton/psql_main_test.go.tpl": templates_testSingletonPsql_main_testGoTpl,
	"templates_test/singleton/psql_suites_test.go.tpl": templates_testSingletonPsql_suites_testGoTpl,
	"templates_test/upsert.go.tpl": templates_testUpsertGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"17_upsert.go.tpl": &bintree{templates17_upsertGoTpl, map[string]*bintree{}},
		"singleton": &bintree{nil, map[string]*bintree{
			"psql_upsert.go.tpl": &bintree{templatesSingletonPsql_upsertGoTpl, map[string]*bintree{}},
		}},
	}},
	"templates_test": &bintree{nil, map[string]*bintree{
		"singleton": &bintree{nil, map[string]*bintree{
			"psql_main_test.go.tpl": &bintree{templates_testSingletonPsql_main_testGoTpl, map[string]*bintree{}},
			"psql_suites_test.go.tpl": &bintree{templates_testSingletonPsql_suites_testGoTpl, map[string]*bintree{}},
		}},
		"upsert.go.tpl": &bintree{templates_testUpsertGoTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

