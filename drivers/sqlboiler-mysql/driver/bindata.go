// Code generated by go-bindata.
// sources:
// override/templates/17_upsert.tpl
// override/templates/singleton/mysql_upsert.tpl
// override/templates_test/singleton/mysql_main_test.tpl
// override/templates_test/singleton/mysql_suites_test.tpl
// override/templates_test/upsert.tpl
// DO NOT EDIT!

package driver

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templates17_upsertTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\xdd\x4f\xdc\x48\x12\x7f\xb6\xff\x8a\xda\x51\x76\xd7\x3e\x39\x4e\x4e\x3a\xdd\x03\x27\x1e\x96\x8f\x64\xb9\x40\x16\x98\x70\x48\x87\x50\x64\xec\xf2\xd0\xa2\xa7\xdb\x69\xb7\x49\xe6\xbc\xfe\xdf\x4f\x55\x6d\x8f\xed\x81\x19\x26\x1f\x9c\xee\x89\x71\x77\xb9\xea\xd7\xbf\xfa\x6c\x53\xd7\x2f\xe1\x45\x22\x45\x52\xc2\xce\x2e\xc4\xbf\xd1\x2f\x2c\xe3\x0f\xc9\x8d\x44\x70\x7f\xe2\xf7\xc9\x1c\x9b\xc6\x67\xd1\x32\xbd\xc5\x79\xe2\xb6\xe9\x85\x5e\x02\xfe\x84\x78\xda\xef\xf2\x0b\x22\x87\xf8\xb7\x2c\x7b\x2b\xf5\x4d\x22\xe1\x65\xd3\xf8\xaf\x5e\xc1\x45\x51\xa2\xb1\x6f\x21\xb1\x16\xe7\x85\x2d\x21\x51\x20\x14\xad\x45\x90\xa8\x0c\x32\x8d\xbc\x56\x15\x59\x62\x11\xb4\x01\x31\x53\xda\x20\x68\x05\xa9\x56\xb9\x14\xa9\x8d\xfd\xbc\x52\x29\x04\x1a\xfe\x52\xd7\x0e\x7f\x7c\x51\x4c\x85\x9a\x55\x32\x31\x4d\x13\x76\x56\x02\x06\xa1\xb4\x85\xf8\xbd\xde\xd7\xca\xe2\x17\xdb\x34\xa9\xfd\x42\xaa\xe8\x21\x6e\x17\x23\xa8\x6b\x54\x19\x81\x6c\x2d\xef\x6b\x59\xcd\x55\x19\xb5\xe0\xda\x47\xb8\xd1\x42\xc6\xed\x43\x08\x68\x8c\x36\x50\xfb\x9e\x41\x5b\x19\x05\x3a\x76\x86\x9d\xdd\xa1\x4d\x7e\xef\x2d\xda\x83\xbd\x20\xac\x6b\x94\x25\x32\x8e\x08\xba\x8d\x56\xb2\xdd\x57\x59\xd3\x44\x1b\x91\x84\x7e\xe3\xfb\x4b\xd0\xbe\xa3\x9b\x08\x1c\x50\x4e\x3f\x4f\x13\x25\xd2\x15\xf2\x4f\xbf\x8f\x7d\x60\x9d\x25\xad\x31\x01\x5b\xbb\xe3\xf4\xb9\xfd\x51\xfb\x9e\xc8\x09\x14\x45\xe7\xff\xd2\x19\xff\x60\xa3\x3f\xed\x82\x12\x92\x50\x78\x05\x51\x14\xb0\xbe\x4b\x93\x14\x87\xc6\x04\x68\x4c\x18\xfa\x5e\xf3\x98\xe3\xd6\x78\xea\x31\x47\x41\x55\x0a\x35\xa3\x67\xfc\x82\x69\x65\xb5\xf9\x9a\xc4\x19\xa8\x2e\xbe\xcd\x8b\xa7\x0f\xf9\x24\x20\x8e\xbb\xc3\x16\xd2\x80\xd5\x87\xae\xed\xc5\xdb\xa5\xc1\x5b\x4f\x73\xbd\xbd\xcb\x1f\x89\xb3\x61\x5c\x11\x8c\xe7\x73\xeb\x92\xe8\xe7\x70\xe1\x14\x71\x44\x03\x64\x3a\xad\xe6\xa8\x6c\x62\x85\x56\x90\x6b\x03\xb7\xfa\x33\x58\x0d\x85\xd1\x05\x1a\xb9\x80\xaa\xc4\xf1\x59\xd9\xe2\xe8\xb8\xdb\x46\xc0\xff\x57\x00\x2c\x6b\xb0\xc8\x41\xc3\x6e\xef\xab\xb6\x26\xf3\x7e\x19\xbf\xc7\xcf\xc1\xa4\xae\xe3\xd3\xbb\x99\xeb\x68\x3b\xa0\x34\xd4\xf5\xa8\xcb\x11\x5d\xf7\x22\xc3\x8c\x29\xac\xf8\xb4\x13\x76\xae\xef\x51\x03\x24\x47\x4a\x72\xcd\xc4\x8a\x39\x96\x36\x99\x17\x1f\x9d\xd4\xc7\x5b\x94\x05\x9a\x09\xc4\xd0\x38\xe9\x3e\x00\x7f\xd7\xfa\xae\xe4\xa8\x18\x85\x6a\xa6\xf7\x30\xd7\x06\x1d\xa9\x2c\xb4\x75\xdc\x3e\x8c\xcc\xfe\xb4\x04\x97\xd1\x32\x97\xbe\xef\xa9\xff\x1c\x60\x9e\x54\xd2\x72\x97\xff\x54\xa1\x11\x58\xc6\xef\xb5\xfa\x37\x1a\xdd\x6e\x4d\x91\xdc\xda\x3a\xfd\x40\x7f\x56\xbd\xdb\x5b\xa6\x2f\x85\xbd\x6d\x85\x23\xd0\x21\xa9\xbd\x50\xe2\x53\x85\x4f\x68\xf5\x3d\xef\xea\xba\xb4\x46\xa8\x19\xe1\x24\x60\x26\x51\x33\x84\x17\x22\x82\x17\xa9\x96\x83\x49\xa2\xf3\x30\x73\xe5\x64\x45\xce\x42\xb1\xb3\xe5\xd6\x27\x75\xcd\x6b\xce\x69\x93\xa8\x93\xed\x92\xcf\x1b\x1c\xdf\xf3\x1a\xda\xd7\x91\xef\x85\xbe\xef\xbd\x7a\x05\x7b\x95\x90\x19\xa4\x49\x7a\x8b\x70\x87\x0b\x10\xea\xa5\x14\x0a\xa1\x9a\x49\x21\x17\xf0\x12\xe6\x8b\xf2\x93\x84\xfb\x12\x0a\xfa\x5b\x18\x7d\x23\x71\x5e\xfa\xde\x4d\x95\x13\xd6\xd2\x9a\x79\xa2\x66\x12\xa9\x53\xec\x55\x79\x8e\x26\x08\x79\x37\xbe\x34\xc2\xe2\x94\xcf\x1a\x94\xd6\xa4\x5a\xdd\xc7\x47\x56\x27\xc1\x28\x9e\xe3\x77\x42\x65\x54\x33\x28\xc8\x3e\x46\x90\x92\x56\xc7\xc9\x58\x6e\x5f\xcb\x92\x9d\xbb\xaa\x3b\xe5\x98\xec\x97\xf7\x16\x16\x83\x5f\xe3\x5f\x9f\x82\x31\x4e\xf7\xf5\x30\xc6\x72\xdf\x02\xe3\xa1\xce\x41\x14\xfe\x00\x5d\x5d\xe8\x6d\x50\x45\xbe\xdd\xd9\x05\xda\x6d\x37\x42\xdf\xeb\x9d\x77\x5a\x75\xce\xbb\xa9\xf2\x90\x53\xf6\xd1\xf0\x77\xe9\xb9\x4f\xe1\x72\x52\xd9\xf8\xfc\x58\xa7\x77\xa4\x89\x03\x28\x72\x71\x94\x91\xa1\xa7\xdf\xbf\xba\xc3\xc5\xf5\xd6\x86\x2e\x94\x74\xa6\x7c\xef\x3e\x31\x9c\xef\x5c\xcb\x7c\x2e\x23\x3f\xb5\x86\x89\x80\x6e\x82\x33\x68\x09\xc8\xd8\x7b\x47\x83\xa7\x36\x1f\xd7\x21\xe8\xea\xed\xd3\x22\xc3\x62\xb0\x9d\xb4\xae\xec\xf0\x85\x3e\x1a\xe8\x31\xf4\x3d\xaf\x6d\x7a\x3b\xbb\x2b\x49\x70\x31\x78\xfa\x7e\xfc\xa7\x46\xcc\x13\xb3\x78\x87\x8b\x81\x30\x51\x4c\x9c\x4a\x54\x6d\xa6\x86\xd4\x48\x5e\x33\xb9\x4f\xf7\x91\x4a\xf1\x85\xc8\xea\xb6\x63\xac\x76\x95\x08\x52\x5d\xc9\x8c\xeb\xfa\x0d\x17\x9f\xf6\xac\x29\x43\x00\x29\x4a\xee\x32\xdc\x66\xc8\x1c\x0c\x8b\xcc\x94\xc6\xd1\x79\x21\x91\xfa\x7b\x60\xd0\x46\x7d\xf8\xd3\x4b\x1c\x07\x31\xd5\xdf\x05\xec\x3a\xfd\x2e\x92\xce\x68\xe9\x64\x31\x3d\x3b\x0e\x32\x91\x48\x4c\x6d\x04\x93\x15\x68\x93\xae\xd5\x76\x3d\xb6\xd7\x68\xd0\x69\x80\x5d\xc8\xe7\x36\x9e\x16\x46\x28\x9b\x33\xfd\x93\xe9\xe1\xf1\xe1\xfe\x07\xf8\xb9\x84\x37\xe7\x7f\x9c\xd0\x79\x8f\xcf\x9a\x66\x45\x77\x5d\xc7\xe7\x67\x4d\x03\x97\xbf\x1f\x9e\x1f\xc2\xcf\xa5\xab\xd3\xae\x13\x94\xf1\x3f\xb5\x50\x41\x7f\xca\xa3\x0c\x95\x3d\xab\xb4\xc5\xa9\x14\x29\x76\x88\xe3\xe3\xb3\x08\xba\xdf\xe7\x67\x1c\xe2\x61\x04\x93\x68\x12\x76\xda\x5a\x05\x97\xb7\x68\x70\x5f\x26\x55\x89\xec\x1f\x02\x34\x71\x07\x3e\x77\x3f\x5f\x0f\x89\x5b\xba\xdd\x1d\xf6\x3e\x91\x15\x9e\x24\x45\x21\xd4\x2c\xe2\x54\xeb\x5b\xda\x9e\x50\x59\xbb\xb5\xae\x45\x7e\x58\x14\x18\xad\x2b\x00\x4b\xb5\x3d\xc3\xed\x18\x30\x68\xdf\xa3\xfe\x4d\xd5\xab\x8b\x47\x3a\x30\x09\xb6\xc1\xb8\xf4\xcd\x73\x83\x25\xbb\x64\xf0\x11\xa8\x63\xac\x0c\xb6\x71\x33\x12\xd3\xc8\x65\x1a\x73\x76\xd9\x91\xca\x84\xc1\x94\xe2\xd6\x2d\xfc\x8b\x24\xfe\xc8\x03\x4d\x8d\xe7\x3e\x91\xa3\xe1\x81\x37\xcb\x37\x46\xcf\xbb\x23\xb0\xc2\xb6\xc8\x8e\x9c\x14\xba\xa2\xe8\x90\x94\x70\x75\x2d\x94\x45\x93\x27\x29\xd6\x6e\xcc\x22\xee\x56\xc9\x1a\x10\xd9\xbd\xd8\x1b\x3f\xb5\x66\xbd\xe9\x81\x0e\x77\x52\x91\xbb\x31\xf4\x00\x6f\xaa\xd9\x89\xce\x90\xb5\x52\xa2\xbc\xe1\x44\x91\x2a\xe8\xf7\xb9\x39\x99\x4e\x17\xa7\x6a\xf8\xb4\x34\xb1\xb3\x9c\x3d\x5f\xa4\x89\x3a\x4e\x4a\xeb\xaa\xf9\xd1\xc1\x70\x68\x5a\xd9\xe1\x09\x88\x07\xc9\x07\x2f\x75\xc3\xd1\x68\x7c\x77\xab\x06\x4b\x9e\xec\xda\xf1\x94\x86\x4c\x1e\xe6\x83\x01\x68\x87\x29\x8e\xe3\x90\xb5\xd0\x84\xbf\xf9\xe5\xd6\x42\xc0\x13\xec\x06\x45\xdd\xdc\x36\xd4\xf9\x38\xcc\x8f\x5d\xc0\x7f\x1d\xc0\x87\xaf\x7d\x3d\xb4\xe5\x44\xf9\x30\x25\xc6\x2d\x82\x6e\x86\x74\x2d\x74\xd5\x67\x53\xa3\xa0\xc9\x66\xb5\x22\x2f\x5d\xbe\xd6\x81\x14\xf8\x92\x56\x0f\x40\x28\xfb\xf7\xbf\x8d\xc0\xd1\x66\xc5\x45\xee\x24\x29\xe0\xea\xba\x6a\x45\x68\xbd\x2b\x7f\x3c\xd0\x8d\x53\x66\x43\xce\x2c\x3b\xe1\x4c\x5b\x0d\x3c\x9f\xb4\x77\x9a\x27\x91\x3a\x94\x1d\xf7\x2e\x4a\xe2\x81\x58\x46\x83\xd4\x5a\x3a\x0f\x8d\x99\x2e\x54\xfa\x26\x11\xb2\x4f\x03\x2d\xf9\x73\x23\x8f\x39\x19\x7e\xe9\x92\xe0\xf4\x1d\x2e\x96\xd7\x87\xd7\xbd\xcb\x56\x2e\x18\xfc\x6d\x87\x9b\xee\x52\xd3\x48\xf4\x83\xb0\xd2\x4d\x73\xcb\xfd\x3f\xc1\xd2\xe2\x7e\x52\xf2\xed\x43\xc7\x0e\x85\x93\x6c\x1a\xe0\xc1\x8f\x6e\x23\x54\x57\x9b\x26\x70\x67\x76\xe7\x6a\xbd\xc4\x55\xe7\x97\x5f\xd6\xf3\xfb\x57\xda\x5d\xdd\xb9\x7a\x7d\x4d\x7b\x9b\x0b\xf5\xd5\x64\x0c\x67\x72\xbd\xde\x55\xa3\x4b\xe1\x32\x46\x9e\xad\x83\x0c\xa7\x94\x1f\x90\x32\x06\xad\x11\x78\x8f\x6d\x74\x03\xd7\xe7\x72\x4d\x0a\x01\x1d\x77\x14\xee\x9b\xba\xcc\x36\xdd\x2a\xea\xb3\x2a\xfc\xbe\xfa\xdf\x0d\x56\x5b\xb4\x80\xe1\x09\x5c\x49\x5a\x26\xdc\x6a\x61\x1c\x94\x37\xd6\x7e\xae\x3f\x07\x63\x7b\x0f\xd5\xc5\xd3\x34\xe1\x09\x83\x5a\xa1\xd3\x3f\x2c\x9a\x8f\xa8\x7c\xa4\x6a\x7e\xad\xfa\xae\xa0\xfe\x80\x90\x28\x74\x51\xf1\xe7\x98\xcc\xdd\x25\x36\xc7\x04\x71\x37\x4c\x89\x9d\x07\xf7\xa8\xed\x2e\x66\xdd\x05\x70\x0b\x71\xbe\xf0\xc1\xae\x63\x6a\x6b\x03\xcb\x8b\x9f\xb7\xe1\x4b\xd2\xf2\x3f\x0e\x99\xfe\x2d\xb7\x68\xbe\xe9\x2b\x52\x5b\x12\x06\x7d\x9c\x95\x2a\x2a\xb8\x7d\xb1\x68\xfc\xff\x06\x00\x00\xff\xff\x46\xe5\x49\x27\x28\x1a\x00\x00")

func templates17_upsertTplBytes() ([]byte, error) {
	return bindataRead(
		_templates17_upsertTpl,
		"templates/17_upsert.tpl",
	)
}

func templates17_upsertTpl() (*asset, error) {
	bytes, err := templates17_upsertTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/17_upsert.tpl", size: 6696, mode: os.FileMode(420), modTime: time.Unix(1528752047, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSingletonMysql_upsertTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\xdf\x8f\xd3\x30\x0c\xc7\x9f\x93\xbf\xc2\x54\x3a\x5d\x2b\x45\x3d\xee\x15\x69\x0f\x77\x6c\x9c\x0a\x63\xbf\x07\x42\x88\x87\x6c\x71\xb6\x48\x5d\x3a\x12\x67\x30\xa1\xfd\xef\x28\x5d\xb7\xf5\x8e\x21\xf1\xc0\x4b\xeb\xc4\xf6\x37\xfe\xd8\xbe\xbb\x83\x45\x30\xa5\x9a\x6f\x3d\x3a\x1a\x07\x74\xfb\x8f\xfb\xe9\xb8\x7f\xbc\xf5\x20\x21\x1e\x3c\x49\xc2\x0d\x5a\x02\x4f\xce\xd8\x15\x04\x1f\xbf\xb4\x46\x08\x75\x62\x57\x92\x84\xad\xab\x76\x46\xa1\xca\xb9\x0e\x76\x79\x5d\x37\x55\x46\x82\x72\x66\x87\xce\xe7\x5d\x23\x4b\x5c\x92\x00\x92\x8b\x12\x07\x72\x83\x8d\xbe\x80\xb0\x55\x92\x50\xc0\x8f\xb5\x21\x2c\x8d\x27\xf8\xfa\xed\xe8\xcb\x4e\x35\xfc\xe2\xec\xe2\xed\xc4\xdb\x8d\xb4\xab\x12\xf3\x42\xa1\xa5\x71\xa8\x08\xa7\xa5\x59\x62\x7c\x32\xef\x8f\x05\xc4\xff\x64\xdc\xd2\xcc\x38\x67\x8b\xa0\xe1\x4d\x3b\xfb\x09\xe9\x31\x68\x8d\x2e\xcd\x38\x53\xa8\xd1\xb5\x9c\xa3\x70\x72\x2e\x82\x8e\xe9\x3b\xe9\x60\x59\x95\x61\x63\x7d\x53\x17\x67\x46\x43\x89\x36\xbd\x3c\x03\xaf\x3a\xf0\x3a\xd6\xcb\x4e\xa1\x9d\x26\xd8\xe7\xef\x2b\xd3\x0a\x15\x90\x08\x48\x32\xce\x0e\xfc\xac\x73\x6c\x45\x06\x9d\x93\x88\xde\x50\xfe\x6e\xeb\x8c\x25\x9d\x72\xc6\x22\x82\x88\xff\xa4\x18\x4c\x7b\x93\x19\x14\x4f\x83\xe1\xa4\x07\xc5\x60\x36\x84\x1b\x0f\xe9\x8d\xcf\xe0\xd3\x43\x7f\xde\x9b\xd6\x76\x52\x07\x9f\x5b\x5e\x9f\x9a\xba\x6a\xbb\x45\x5b\xca\x25\xae\xab\x52\xa1\xf3\x75\x17\xe7\x1e\x0b\xab\xf0\x67\xdb\x21\x5e\xc0\x0a\xb8\x17\x70\x9f\x45\xa9\x8c\x33\xe6\x90\x82\xb3\xb0\x08\x3a\x9f\xd6\xc8\x69\x43\xf7\x82\xa2\x81\x38\x33\xfc\xa5\x78\x18\x0e\xa0\x3b\x1f\xf5\x8b\xb7\x0f\xb3\x1e\x7c\xe8\x7d\x81\xf9\xa8\x1b\xcd\x9a\xea\x19\x54\x8b\xe9\xbf\x21\xc5\x91\xeb\xca\x81\x11\xb0\x8b\x6b\xe3\xa4\x5d\x61\xb3\xac\xf5\x6c\x8c\x06\x73\x19\x77\xa4\xca\x3f\x3b\x43\xf8\xb8\x27\x4c\x6f\xc5\x6d\x6c\xc9\x81\x33\xf6\x3d\xae\xa7\x7a\xbe\x79\x97\xbd\xfd\x63\x65\x77\x19\x6f\x89\x35\x8d\x3c\x6a\x5c\xf3\x24\xd0\x69\x9a\x96\x26\xff\x98\x79\x2c\x30\xbb\x6d\xa6\x73\x6d\x6c\x07\xfe\x3b\x00\x00\xff\xff\xa9\x3a\x4a\xd3\x2e\x04\x00\x00")

func templatesSingletonMysql_upsertTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSingletonMysql_upsertTpl,
		"templates/singleton/mysql_upsert.tpl",
	)
}

func templatesSingletonMysql_upsertTpl() (*asset, error) {
	bytes, err := templatesSingletonMysql_upsertTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/singleton/mysql_upsert.tpl", size: 1070, mode: os.FileMode(420), modTime: time.Unix(1528415516, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_testSingletonMysql_main_testTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x5b\x6f\xdb\x3a\x12\x7e\x96\x7e\xc5\xac\x81\x9c\x95\x72\x14\xa6\x40\x81\x7d\x48\x61\x04\x8d\xe3\x14\x41\x9b\x4b\xed\xec\x16\x8b\xa6\xd8\x32\xd2\x38\x21\x2a\x91\x0a\x49\xc5\xf1\x06\xf9\xef\x8b\x21\x75\x73\x62\x19\x2d\xd0\x7d\x3b\x4f\xad\x38\x1f\xe7\xf2\x0d\xe7\xe2\x3c\x70\x0d\xfa\xf6\xf1\x6c\x35\xff\xfc\xe9\x07\xae\x60\x0c\x1a\x6f\xf1\xb1\x64\x67\x95\xb1\x13\x55\x94\x22\xc7\xe8\x7b\x74\x58\xc4\x51\x94\x5c\xcb\xf8\xf0\xda\xfc\x39\xb9\x38\x9f\x5f\xcd\xde\x9f\x9e\x5f\xb1\xdd\xc3\x93\x8b\xd9\xf4\xf4\xc3\x39\x7c\x9c\xfe\x9b\xed\x1e\x5e\xcb\xf8\xcf\xef\x71\x18\xda\x55\x89\x50\xac\xcc\x7d\x7e\x85\xc6\xa2\x06\x63\x75\x95\x5a\x78\x0a\x83\xec\x66\xa2\xa4\x84\x5d\x73\x9f\xb3\xe3\xa3\x90\x0e\xce\x79\x81\x81\xb1\x5a\xc8\xdb\x30\xb8\x53\xc6\xb6\x1f\x95\x41\xdd\x7e\x94\xdc\x98\xf6\xc3\x98\xbc\x50\x59\x77\xad\x54\xda\x06\x42\xda\x30\x0c\x54\x69\x85\x92\x27\x22\x47\xa8\xa5\x61\x60\xd1\xd8\xe3\x23\x32\xd4\x9c\x3d\x87\xe1\xa2\x92\x29\x08\x29\x6c\x14\x7b\xcf\xce\xb8\x90\x30\x86\x3f\x7a\x9e\x3f\x3d\xb7\xc8\xa8\x80\xdd\x9e\x24\x06\x83\xb6\x2a\xa3\x18\x50\x6b\xa5\x49\x03\xb1\x89\x5a\xfb\x83\x30\x0c\x1e\x44\x89\x9a\xcd\xd1\x1e\xe3\x82\x57\xb9\x8d\x46\xee\x3e\xab\x9d\x1f\x25\x30\xb2\xba\xc2\x51\x3c\x0c\xa5\xb8\x46\x09\xbc\x7d\xfb\xe6\x1f\x71\x18\x06\x05\xf3\x74\xc1\x18\xfc\x8d\x0f\x68\xe7\x2e\xa0\xe6\x42\x76\x23\x79\xe1\x54\x16\x8c\xb8\x1c\x46\x92\xd4\xe3\x88\xe6\x61\x1c\x49\x3d\x8e\x32\x30\x8c\x23\x69\x8d\x53\x7a\xcd\xee\xa9\x5c\x8f\xc7\x81\x6a\x12\x86\xf5\x35\x2c\x51\xdc\xc4\xea\x18\x1e\x78\xce\xd9\x11\xde\x0a\xf9\x2f\x9e\x8b\x8c\x53\x9e\xa3\x98\xd5\x1f\x18\x85\x41\xe0\x20\x5e\xcf\xb9\xb2\xd3\xa2\xb4\xab\xc8\x07\x98\xc0\x5a\x3c\xc9\x20\x98\x78\x69\xc1\x9e\xa4\x16\x7c\xae\x6c\xe4\xfe\x33\xbd\xaf\x78\x6e\x22\x1f\x6b\x02\x6f\xda\x0b\x3e\xc0\x2d\xea\x7d\x02\x5b\x7c\x93\xaf\xe1\x0b\x35\x0f\xed\x8d\x96\x97\x24\x0c\x62\x36\xb9\xc3\xf4\x47\x44\x1c\x89\x85\x7b\x7c\x7f\x1b\x83\x14\x39\x3d\xc7\x40\xa3\xad\xb4\xa4\xd3\x30\x78\x0e\xc3\x60\x7f\x1f\x26\x1a\xb9\x45\xe0\xa0\xb9\xcc\x54\x21\xfe\x8b\x19\x64\x37\x40\x3e\x30\xca\x4a\xaf\x50\xc6\x1d\x86\xcd\x2d\xbf\xc9\xd1\x0b\xda\x18\x7a\x46\xc7\x50\xb0\x82\xff\xc0\x8b\xb6\xf6\xa2\xf8\xdd\xb0\x3b\x4a\x1b\xf6\x45\xf3\x32\x42\x4d\x79\x49\x55\x95\x67\xf2\xef\x16\x48\x05\xf8\xfa\x85\x85\xc8\xdd\x33\x7e\x5e\xb7\x92\x69\x55\x5e\x39\x27\xb7\x5a\xa0\x7b\xfd\x6b\xa9\x8b\xfb\x27\x2f\x86\x41\x56\x15\xe5\xa4\xc8\xe0\x60\x0c\xf8\x88\x29\x9b\xa8\xa2\xe0\x32\xab\x9f\x26\x49\x47\x09\x39\xe3\x8b\xd5\xf8\x80\x13\x18\xed\xed\x49\xb5\x97\x71\xcb\xbd\xb8\xa6\x29\xf0\xd6\x87\x15\x0e\x29\x23\x4d\x37\xdc\xa0\x93\x77\xa9\x21\xe2\x75\x02\x4b\xd2\x26\x14\xbb\x14\x25\x46\x71\xeb\x34\x9b\xdb\x4c\x55\x54\x80\xcb\x9e\x65\x3a\x75\xdd\x4d\xe2\xf2\xe4\x23\xae\x8e\xd1\x58\xad\x56\xa8\xa3\x5e\xff\x4f\x40\xaf\x25\xb5\xd3\xc8\xb5\xfd\x95\x8c\x2e\xb8\xc8\x31\x03\xab\xc0\xd0\x55\x68\x69\x83\xd4\x07\xee\x33\xdb\x59\xea\xfb\xf9\x3b\x6c\xad\xdb\xd9\x10\xd2\x17\x2e\x36\x59\x59\x14\x96\x5d\x6a\x21\x6d\x2e\x49\x7d\xfc\x73\x86\x97\x5c\x58\x58\x28\x3d\x14\x67\x18\x2c\xd9\x24\x57\x06\xa3\x18\xf6\xf7\xe1\xfd\x82\x66\x62\xf3\xc6\x84\x81\x4c\x49\x4c\x20\x25\x04\xd8\x3b\x84\xa5\x16\x16\x01\x65\x06\x6a\xe1\x0e\x4a\x51\x62\xb8\x91\xae\xff\x63\x1c\x2f\x63\xa8\x15\x48\x91\x6f\x99\x89\x26\x3f\x53\x19\x46\xae\xb5\xfb\x51\x1b\xd7\xff\x92\x5f\x66\x29\x6c\x7a\x07\x4e\xfa\x14\x06\x29\x37\x58\xcf\xc0\x83\xce\xc3\xd1\x6c\xfa\xf9\x9f\xa7\xb3\xe9\xf1\xa8\x41\x2c\x78\x6e\xd6\x21\xc7\xa7\xf3\xf7\x47\x9f\x1c\xa4\xae\x9b\xbe\xf4\x72\x36\x3d\x99\xce\xbc\x86\x2d\x03\x7c\xbd\xe2\x7a\x6e\xd6\x7a\x88\xc4\x79\x49\x2c\x2e\x22\xaa\xc6\x1a\xbe\x47\xad\x69\xbc\x63\x5c\x55\x76\xdb\x46\x3c\x6c\xe8\x65\x6b\xec\x56\x06\x5b\x94\x89\xcb\x9d\x2b\xe5\xca\x8a\x9c\x5d\x61\x51\x3a\xd8\x88\x16\x04\xaf\xbf\x69\x86\xdb\x7a\xfc\x60\x56\xfd\x63\xd9\xd8\x57\xcd\xd5\xe4\x92\x4c\x3b\x82\xc3\xe0\x3f\x49\xfd\xbe\x94\xa1\x3a\xb4\xf5\x34\xf4\x86\x95\x61\xa7\x86\xe6\xd2\xa3\x30\xd6\x3d\x2a\xe7\x80\xd7\x31\x06\xca\x62\x18\x3c\x03\xe6\x06\xe1\x17\xfc\x74\xcd\x1f\xa4\xb2\x54\xbe\x16\x8a\x76\x2f\x21\x07\x29\x03\x27\x65\xfd\x8e\x1d\x57\xa3\xaf\x69\x2e\x50\xda\x6f\x04\xe9\xc4\x8b\x5a\x4a\x97\xc7\x3b\xe6\x5a\xba\xe4\xd4\xce\xbf\x86\xd1\x94\x1e\xef\x64\x35\x8c\xbe\x36\xc2\x68\x55\xe8\xb4\xd1\xd7\x66\x6d\xdc\x98\xa5\xd2\x59\x07\xa5\x93\x8d\x50\x63\xf2\x3d\x7a\xfd\x1d\xb4\xad\x98\x66\xb0\xc7\x9e\x6e\xcf\x6b\x53\xcb\x2f\x48\x28\xb5\xb2\x2a\x55\xf9\xd8\xa6\xe5\x36\xae\xda\x7e\xf4\x17\x5d\x2f\xe9\xea\x97\x2e\x3d\xdf\xa2\x64\x6e\xbb\x89\xbb\x4e\x47\x67\x75\xdb\x1e\xae\xed\xf5\xcd\xa2\xab\x6c\x6a\xa0\x54\x59\xfd\x1e\x52\x57\x62\x33\xd6\x61\xc7\xbc\x7b\x35\xda\x1b\xe3\x05\xd3\x95\x9c\x14\x59\x64\xee\xf3\x66\xf7\x1b\x6d\xf1\xa3\xbf\x18\x6d\xf7\x82\x90\x9d\x0f\x54\xaa\x54\xd1\xe6\xb7\x7a\x63\x91\xeb\x4c\x2d\x65\xdf\x17\xb1\x70\x3b\x91\xfb\xfd\xd7\xeb\x0c\xcd\x59\x4b\x75\x7f\x60\x1f\xfc\xe2\xce\xd7\x3a\xac\x0c\x9b\x61\xa1\x1e\xe8\xa5\xfc\x54\x8f\x6e\xe2\xa3\x35\x29\x69\x46\x5f\x3d\x13\x12\xe0\xfa\xd6\x00\x63\xac\x19\x69\x6d\x50\x4e\x30\x06\x5e\x96\x28\xb3\xe8\xeb\x37\x0f\x78\x7a\xb9\xce\x3d\x7b\x15\x8c\x31\x7a\x5f\xe9\x86\x4d\xb0\xb6\xd8\xc3\x11\xac\x5d\xdb\xbc\x5e\xc3\xce\x71\x39\x43\x9e\xa1\xf6\x9e\x92\x36\xe3\xf7\xbd\x83\x31\xfc\x71\xb3\xb2\x68\xd8\x51\xb5\x58\xb8\x9f\xae\x24\xaa\x59\x7c\x25\x4a\xfb\x9b\xa2\x57\xd1\x1e\xfa\x21\xe0\x2f\xf7\x53\x41\xe2\x59\x25\x5f\x67\xa1\xbf\x6e\x34\x93\x47\x57\x52\x0a\x79\x7b\x30\x6a\xd9\xf4\xb1\xc5\xeb\x70\x6f\xba\xfe\xd9\x13\xc5\xaf\xa5\xa8\x75\x5f\x3a\x90\xef\xad\x5b\x49\xaa\x24\xbd\xc4\xa8\xfe\xab\x43\xe2\xd3\x17\x0f\x3f\xca\xf6\xd5\x7b\x49\xe2\xd4\x3b\x73\xeb\xbf\xf1\x83\x0e\x51\x73\x76\x9f\xb3\x8b\x12\x65\xb7\xd8\x67\x5a\x3c\xa0\x66\x6e\xc5\x3e\xaa\x44\x9e\x7d\xae\x50\xaf\xea\x80\x9a\x9f\xa6\xbe\x05\xae\x17\x5f\xd3\x91\x9b\x96\x5b\x77\xbf\x5e\xcf\x5b\xcf\x41\x47\x44\xf2\x8a\x9d\xf5\x40\x9e\xc3\xff\x05\x00\x00\xff\xff\xaa\xfc\xbe\x6b\xf8\x11\x00\x00")

func templates_testSingletonMysql_main_testTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonMysql_main_testTpl,
		"templates_test/singleton/mysql_main_test.tpl",
	)
}

func templates_testSingletonMysql_main_testTpl() (*asset, error) {
	bytes, err := templates_testSingletonMysql_main_testTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/mysql_main_test.tpl", size: 4600, mode: os.FileMode(420), modTime: time.Unix(1528388322, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_testSingletonMysql_suites_testTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xc1\x0a\xc2\x30\x10\x44\xef\xfd\x8a\xa5\xe4\xd0\x4a\x9b\x0f\x10\x3c\x78\xd4\x83\x88\xb4\x1f\x10\xed\xb6\x04\xe2\x5a\xba\x5b\x10\x42\xfe\x5d\xd2\x46\xe9\xc1\xdb\x0c\x6f\x32\x99\xed\x67\x7a\x40\x83\x2c\xed\xc8\x38\x49\x21\xb0\x13\x64\xb1\x34\xe8\xa6\x04\x9f\x01\x78\x5f\xc3\x64\x68\x40\x50\x96\x3a\x7c\x57\xa0\xc4\xdc\x1d\xc2\xfe\x00\xba\x89\x8a\x43\x48\x39\xdb\x27\xa8\x4f\x7c\x7e\x59\x5a\x30\xd4\x3f\x8e\x8e\xb7\x56\x19\x67\x0d\xc7\x22\xa5\x8f\x51\x22\xaf\x8d\xdf\x96\x8b\x79\xe2\x92\x16\x7d\x9b\xa9\xc8\xbd\x5f\x9f\xe8\x76\xbc\xba\x79\x32\x2e\x84\xbc\x82\x38\xf8\x0f\x59\x2f\x2a\x97\xbf\x90\xba\xed\x8c\xe4\x42\xf6\x09\x00\x00\xff\xff\x11\x5d\x4c\xce\xff\x00\x00\x00")

func templates_testSingletonMysql_suites_testTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonMysql_suites_testTpl,
		"templates_test/singleton/mysql_suites_test.tpl",
	)
}

func templates_testSingletonMysql_suites_testTpl() (*asset, error) {
	bytes, err := templates_testSingletonMysql_suites_testTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/mysql_suites_test.tpl", size: 255, mode: os.FileMode(420), modTime: time.Unix(1528526602, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_testUpsertTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x54\xcd\x6e\xdb\x3c\x10\x3c\x8b\x4f\xb1\x9f\xf1\xb5\xa0\x0a\x85\x41\xaf\x29\x7c\xc8\xdf\x21\x28\x6a\x18\xb1\xfc\x00\x8c\xb4\x72\x08\xd3\xa4\x40\xae\x6a\xb9\x02\xdf\xbd\x20\xe5\x24\x4e\x9c\x14\x39\xb4\x87\x1c\x6c\x89\xc4\xec\xcc\xee\xec\xae\x86\xe1\x04\xfe\x97\x5a\x49\x0f\x67\x53\x10\xe7\xf1\x0d\xbd\x28\xe5\x9d\x46\x18\x1f\x62\x26\x37\x18\x02\x6b\x3a\x53\x01\xa1\xa7\x61\x18\x23\xc4\xb2\x9d\xeb\xce\x49\x1d\xc2\xb2\xf5\xe8\x88\x13\x7c\x89\x00\x65\x56\xa2\xcc\x61\x60\x19\x89\xb9\x74\x52\x6b\xd4\x3c\x67\x2c\x53\x0d\x68\x34\xfc\x91\xe0\xca\x6e\xcd\x42\x99\x55\xa7\xa5\x0b\xe1\xd2\xea\x6e\x63\x7c\x0e\xd3\xe9\x9f\x60\x73\xa7\x36\xd2\xed\xbe\xe3\xee\x31\x60\x60\x59\x46\x62\xb1\x56\x2d\x9f\xc4\xff\x56\x99\x15\x50\xaa\x61\xab\xe8\x1e\xac\xd1\x3b\x68\xc7\x38\x58\xe3\x0e\xaa\x31\x72\x92\xb3\x2c\x30\x96\x79\xc4\x3a\xd6\xef\xa4\xa9\xed\x46\xfd\x42\x31\xc3\xed\x02\xb1\xe6\x39\xcb\x7e\x4a\x07\xe8\xd2\xcf\x3a\x96\x9d\x9e\xc2\x39\x11\x6e\x5a\x02\xba\x47\xb8\x99\x2d\xae\x6f\x4b\xf0\xaa\x46\xb0\x0d\x48\x03\xcb\x79\xbc\x61\x99\x8d\x8c\x07\x5e\x3d\x55\x30\x84\x64\x45\x24\x3d\xd4\x5c\x90\xeb\x2a\xe2\x31\x99\x02\x3e\xdb\x02\xde\x30\xe0\xea\xa2\xdc\xb5\xe8\x0b\x20\xd7\x61\xfe\x2d\xf1\xfc\x37\x05\xa3\xf4\xde\x88\xeb\x98\x69\xc3\x27\x4b\x93\x2c\x20\xfb\x24\xf2\x7a\x42\xe0\x93\xf4\x19\x7c\xf2\x93\x22\xf2\xed\x7d\x19\x06\xd5\x80\xb1\x04\x62\x66\x2f\xad\x21\xec\x29\x84\x8a\xfa\x58\x59\x35\x9e\xc5\x85\xac\xd6\x2b\x67\x3b\x53\xf3\x7c\x18\xd0\xd4\x21\xb0\x6c\x84\xfc\xe8\x3c\x95\x3d\x4f\x2c\x87\x0c\x47\x17\x77\x56\x69\x71\x81\x2b\x65\x12\x87\xf6\x78\x78\x57\xf6\xbc\xa2\xbe\x88\x05\x3e\x28\xbc\x0b\x94\xb3\xac\xc6\x06\x1d\x50\x2f\x6e\xad\xd6\x77\xb2\x5a\xc7\x86\x3e\x5a\x6f\xc5\x7e\x6e\xdf\xaa\x33\xb6\x00\x4d\x0d\x27\x21\x40\x3c\x25\xb9\x1b\xd3\xa0\xe3\xf9\xf3\xd3\xfb\xda\xd0\x25\xb9\xd7\x7b\x70\x64\x7e\x65\x3b\x43\xe9\xe2\xc5\x20\x3d\x2c\x1d\xcf\xc5\x65\xc4\xbc\x33\xfd\xa7\xca\x8f\xb3\xe4\x0f\xb2\x11\x92\x84\x23\xe8\xeb\x33\xc8\x64\x2b\x0d\x81\x35\x08\x0e\x2b\xeb\xea\x02\x56\x96\xce\x26\xc5\x88\xdf\x27\xfd\x62\x3b\x96\xf3\xab\xf3\xf2\xfa\xb5\xed\xf8\x1b\xf3\xdf\x48\xed\xf1\x4d\xd8\xd1\x77\x42\x08\xf1\x4f\xb7\xe5\xe3\xcd\xd5\x07\x19\xab\xc0\x7e\x07\x00\x00\xff\xff\xdf\xb2\x0c\xd1\xa7\x06\x00\x00")

func templates_testUpsertTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testUpsertTpl,
		"templates_test/upsert.tpl",
	)
}

func templates_testUpsertTpl() (*asset, error) {
	bytes, err := templates_testUpsertTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/upsert.tpl", size: 1703, mode: os.FileMode(420), modTime: time.Unix(1528525226, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/17_upsert.tpl": templates17_upsertTpl,
	"templates/singleton/mysql_upsert.tpl": templatesSingletonMysql_upsertTpl,
	"templates_test/singleton/mysql_main_test.tpl": templates_testSingletonMysql_main_testTpl,
	"templates_test/singleton/mysql_suites_test.tpl": templates_testSingletonMysql_suites_testTpl,
	"templates_test/upsert.tpl": templates_testUpsertTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"17_upsert.tpl": &bintree{templates17_upsertTpl, map[string]*bintree{}},
		"singleton": &bintree{nil, map[string]*bintree{
			"mysql_upsert.tpl": &bintree{templatesSingletonMysql_upsertTpl, map[string]*bintree{}},
		}},
	}},
	"templates_test": &bintree{nil, map[string]*bintree{
		"singleton": &bintree{nil, map[string]*bintree{
			"mysql_main_test.tpl": &bintree{templates_testSingletonMysql_main_testTpl, map[string]*bintree{}},
			"mysql_suites_test.tpl": &bintree{templates_testSingletonMysql_suites_testTpl, map[string]*bintree{}},
		}},
		"upsert.tpl": &bintree{templates_testUpsertTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

