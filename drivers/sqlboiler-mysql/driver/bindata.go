// Code generated by go-bindata.
// sources:
// override/templates_test/singleton/mysql_main.tpl
// DO NOT EDIT!

package driver

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templates_testSingletonMysql_mainTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\x5b\x4f\xdc\xb8\x17\x7f\x4e\x3e\xc5\xf9\x47\xa2\xff\xa4\x0a\xe6\x9d\x2a\x0f\x65\x80\x15\xda\x5e\xe8\xc0\xaa\x0f\xdd\x6a\x65\x92\x13\x6a\x35\xb1\x83\xed\x30\x9d\x45\x7c\xf7\xd5\xb1\x9d\xcb\xc0\xcc\xa8\x48\xdd\xb7\x7d\x8a\xec\xf3\xf3\xb9\xdf\x62\xd7\x1d\x42\xbb\x36\x77\xcd\x35\x1a\x8b\x1a\x8c\xd5\x7d\x69\xe1\x21\x8e\xaa\x9b\x85\x92\x12\x5e\x9b\xbb\x86\x9d\x9e\xc4\x74\xf1\x81\xb7\x18\x19\xab\x85\xbc\x8d\xa3\x6f\xca\xd8\xf1\xd0\x1b\xd4\xe3\xa1\xe3\xc6\x8c\x07\x63\x9a\x56\x55\xd3\xb3\x4e\x69\x1b\x09\x69\xe3\x38\x52\x9d\x15\x4a\x9e\x8b\x06\x21\x50\xe3\xc8\xa2\xb1\xa7\x27\x24\x68\xb8\x7b\x8c\xe3\xba\x97\x25\x08\x29\x6c\x9a\x79\xcd\xde\x73\x21\xa1\x80\x57\x33\xcd\x1f\x1e\x47\x64\xda\xc2\xeb\x19\x25\x03\x83\xb6\xef\xd2\x0c\x50\x6b\xa5\x89\xc3\x3d\xd7\x74\xf0\x17\x71\x1c\xb5\xcc\x1b\x07\x05\xdc\x8b\x0e\x35\xfb\x0d\xed\x95\x13\x9f\x26\x8e\x13\xab\x6e\x24\x6f\x31\xc9\x08\x4b\x96\xef\x46\x12\xd5\xe3\xc8\x29\xbb\x71\x44\xf5\x38\xf2\xd7\x6e\x1c\x51\x03\x4e\xe9\x0d\xb9\x17\xd2\x8e\x20\xa5\x83\xd0\xe0\xef\xdd\xfc\x02\x80\xd0\x47\x47\xb0\xd0\xc8\x2d\x02\x07\xcd\x65\xa5\x5a\xf1\x37\x56\x50\xdd\x00\x19\xcb\x88\xdd\x2c\x1e\xc5\x84\x61\x57\x96\xdf\x34\xe8\x09\xe9\xe0\xbd\x2c\x8e\x23\x51\x3b\xc7\x16\xd0\xb2\x96\x7f\xc7\x8f\x63\x88\xd3\xec\x8d\xa3\xfc\xaf\x00\x29\x1a\x0a\x42\xa4\xd1\xf6\x5a\xfa\x20\x18\xf6\x59\xf3\x2e\x45\xad\x73\x48\x4a\xd5\x37\x95\xfc\xbf\x05\x62\x01\x3e\x4d\xa0\x16\x8d\x53\xfa\x71\x53\x4a\xa5\x55\x77\xed\x94\xdc\x2b\x81\xde\xcd\x9f\x95\xce\xee\x9f\x7c\x18\x47\x55\xdf\x76\x8b\xb6\x82\xe3\x02\xf0\x07\x96\x6c\xa1\xda\x96\xcb\x2a\xf8\x94\xa8\x49\x4e\xca\x60\xcd\xfb\xc6\x1a\x6f\x70\x0e\xc9\xe1\xa1\x54\x87\x15\xb7\xdc\x93\x83\x9b\x22\x2f\x7d\x37\xc3\x5d\xcc\x88\xd3\x0d\x37\xe8\xe8\x53\x68\xc8\xf1\x3a\x87\x15\x71\x13\x8a\x5d\x8a\x0e\xd3\x6c\x54\x9a\x5d\xd9\x4a\xf5\x94\x39\xab\x99\x64\xba\x75\x45\x24\x71\x75\xfe\x3b\xae\x4f\xd1\x58\xad\xd6\xa8\x53\x7d\xfb\xe3\xfd\xfa\xea\xd3\xbb\xef\xb8\xce\x41\x6f\x04\x75\xe2\xc8\xb5\x7d\x49\x44\x6b\x2e\x1a\xac\xc0\x2a\x30\xf4\x14\x46\xb7\x41\xe9\x0d\xf7\x91\x9d\x24\xcd\xf5\xfc\x15\xb2\x36\xe5\x6c\x31\xe9\x33\x17\xdb\xa4\xd4\xad\x65\x97\x5a\x48\xdb\x48\x62\x9f\xfd\x9c\xe0\x15\x17\x16\x6a\xa5\x77\xd9\x19\x47\x2b\xb6\x68\x94\xc1\x34\x83\xa3\x23\x78\x5b\x53\xeb\x1d\x72\x4c\x18\xa8\x94\xc4\x1c\x4a\x42\x80\xfd\x86\xb0\xd2\xc2\x22\xa0\xac\x40\xd5\xee\xa2\x13\x1d\xc6\x5b\xdd\xf5\x2f\xda\xf1\xd4\x86\xc0\x40\x8a\x66\x4f\xeb\x35\xcd\x7b\x55\x61\xea\x7a\x92\xef\xe8\x59\xf8\x92\x5e\x66\x25\x6c\xf9\x0d\x1c\xf5\x21\x8e\x4a\x6e\x10\x12\xab\x7b\x4c\x8e\x27\x0d\x93\xe5\xd9\xa7\x3f\x2e\x96\x67\xa7\xc9\x80\xa8\x79\x63\x36\x21\xa7\x17\x57\x6f\x4f\xde\x39\x48\xa8\x9b\x39\xf5\x72\x79\x76\x7e\xb6\xf4\x1c\xf6\xcc\x89\xcd\x8a\x9b\xa9\x19\xf8\x90\x13\xaf\x3a\xf2\x62\x9d\x52\x35\x06\xf8\x21\xb5\xa6\xe2\xc0\xb8\xaa\x9c\x86\x5a\xb6\x5b\xd0\xd3\xd6\x38\x4d\x26\xdb\x76\xb9\x8b\x9d\x2b\xe5\xde\x8a\x86\x5d\x63\xdb\x39\x58\x92\xe4\x90\x78\xfe\x43\x33\x0c\x09\xf0\xb2\xb2\xf0\xc9\xb2\xb5\xaf\x9a\xeb\xc5\x25\x89\x76\x0e\x8e\xa3\xbf\xf2\x90\x5f\xca\x50\x1d\xda\xd4\x0f\x3f\x2f\x58\x19\x76\x61\x3e\x28\x7b\xf6\x43\x18\xeb\x92\xca\x29\xe0\x79\x14\x40\x51\x8c\xa3\x47\xc0\xc6\x20\xbc\x40\x4f\xd7\xfc\x41\x2a\x4b\xe5\x6b\xa1\x1d\x07\x2a\x29\x48\x11\x38\xef\x42\x1e\x3b\x5f\x25\x5f\xca\x46\xa0\xb4\x5f\x09\x32\x91\xeb\x40\xa5\xc7\xc5\x81\xf9\x53\xba\xe0\x04\xe5\x9f\xc3\x68\x7e\x16\x07\x55\x80\xd1\x69\x2b\x8c\x66\xf6\xc4\x8d\x4e\xdb\xb9\x71\x63\x56\x4a\x57\x13\x94\x6e\xb6\x42\x8d\x69\x0e\x29\xfb\x27\xe8\x58\x31\xc3\xa4\xce\xbc\xbb\xbd\x5f\x87\x5a\x7e\xe2\x84\x4e\x2b\xab\x4a\xd5\x14\xb6\xec\xf6\xf9\x6a\xec\x47\xff\xb9\xeb\xa9\xbb\xe6\xa5\x4b\xe9\xdb\x76\xcc\x6d\x37\xd9\xd4\xe9\xe8\x2e\xb4\xed\xdd\xb5\xbd\xb9\x59\x4c\x95\x4d\x0d\x94\x2a\x6b\xde\x43\x42\x25\x0e\x63\x1d\x0e\xcc\x9b\x67\xa3\x7d\x10\xde\x32\xdd\xcb\x45\x5b\xa5\xe6\xae\xc9\x21\xec\x09\x7b\xf4\x98\x2f\x46\xfb\xb5\x20\xe4\xa4\x03\x95\x2a\x55\xb4\xf9\xa5\xda\x58\xe4\xba\x52\x2b\x39\xd7\x45\xd4\x6e\x27\x72\xbf\x19\xb3\xce\x30\xdc\x8d\xae\x9e\x0f\xec\xe3\x17\xee\x7c\xa3\xc2\xca\xb0\x25\xb6\xea\x9e\x32\xe5\xa7\x7a\xf4\x60\x1f\xad\x49\xf9\x30\xfa\xc2\x4c\xc8\x81\xeb\x5b\x03\x8c\xb1\x61\xa4\x8d\x46\x39\x42\x01\xbc\xeb\x50\x56\xe9\x97\xaf\x1e\xf0\xf0\x74\x9d\x7b\xf4\x2c\x18\x63\x94\x5f\xe5\x96\x4d\x30\x48\x9c\xe1\x08\x36\xae\x6d\x9e\xaf\x61\x1f\x70\xb5\x44\x5e\xa1\xf6\x9a\x12\x37\xe3\xf7\xbd\xe3\x02\x5e\xdd\xac\x2d\x1a\x76\xd2\xd7\xb5\xfb\x43\x22\x52\xf0\xe2\x33\x52\x39\xdf\x14\x3d\x8b\xf1\xd2\x0f\x01\xff\x78\x1e\x0a\x22\x2f\x7b\xf9\x3c\x0a\xf3\x75\x63\x98\x3c\xba\x97\x52\xc8\xdb\xe3\x64\xf4\xa6\xb7\x2d\xdb\x84\x7b\xd1\x2c\xfc\xb4\x64\xcf\xa9\xa8\xf5\x9c\xba\x23\xde\x7b\xb7\x92\x52\x49\xca\xc4\x34\xfc\xdc\xe6\x3e\x7c\xd9\xee\xa4\x1c\xb3\xde\x53\x72\xc7\xde\x89\xdb\xfc\x95\x8c\x26\x44\xf0\xd9\x5d\xc3\x3e\x76\x28\xa7\xc5\xbe\xd2\xe2\x1e\x35\x73\x2b\xf6\x49\x2f\x9a\xea\x53\x8f\x7a\x1d\x0c\xf2\x5d\x72\x68\x81\x9b\xc5\x37\x74\xe4\xa1\xe5\x86\xee\x37\xeb\x79\x9b\x31\x98\x1c\x91\x3f\xf3\xce\xa6\x21\x8f\xf1\x3f\x01\x00\x00\xff\xff\x2f\x88\x94\x10\x08\x10\x00\x00")

func templates_testSingletonMysql_mainTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonMysql_mainTpl,
		"templates_test/singleton/mysql_main.tpl",
	)
}

func templates_testSingletonMysql_mainTpl() (*asset, error) {
	bytes, err := templates_testSingletonMysql_mainTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/mysql_main.tpl", size: 4104, mode: os.FileMode(420), modTime: time.Unix(1526677135, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates_test/singleton/mysql_main.tpl": templates_testSingletonMysql_mainTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates_test": &bintree{nil, map[string]*bintree{
		"singleton": &bintree{nil, map[string]*bintree{
			"mysql_main.tpl": &bintree{templates_testSingletonMysql_mainTpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

