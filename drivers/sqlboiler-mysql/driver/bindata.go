// Code generated by go-bindata. DO NOT EDIT.
// sources:
// override/templates/17_upsert.go.tpl (7.48kB)
// override/templates/singleton/mysql_upsert.go.tpl (1.175kB)
// override/templates_test/singleton/mysql_main_test.go.tpl (5.348kB)
// override/templates_test/singleton/mysql_suites_test.go.tpl (264B)
// override/templates_test/upsert.go.tpl (1.899kB)

package driver

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templates17_upsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\xdd\x6f\xdb\x38\x12\x7f\x76\x80\xfc\x0f\xb3\x46\x77\x57\x3e\xa8\x6a\x0f\x38\xdc\x43\x0e\x79\x68\x3e\xda\xcd\x35\xe9\x3a\x71\x73\x01\x2e\x08\x0a\x46\x1a\x39\x44\x68\x52\xa5\xa8\x38\x3e\x9d\xfe\xf7\x03\x87\x94\xf5\x11\xdb\x71\x7b\xcd\x62\x9f\x62\x89\xc3\x99\x1f\xe7\x37\x5f\x54\xca\xf2\x35\xbc\x62\x82\xb3\x1c\xf6\xf6\x21\x7a\x67\x7f\x61\x1e\x7d\x66\xb7\x02\xc1\xfd\x89\x3e\xb1\x19\x56\xd5\xee\x0e\xc9\xe6\xf1\x1d\xce\x98\x5b\xb7\x3b\x1a\x11\xf8\x2f\x44\x93\x66\xd5\xed\xe0\x29\x44\xef\x92\xe4\x83\x50\xb7\x4c\xc0\x6b\xfb\xf2\xcd\x1b\xb8\xcc\x72\xd4\xe6\x03\x30\x63\x70\x96\x99\x1c\x98\x04\x2e\xed\xbb\x10\x98\x4c\x20\x51\x48\xef\x8a\x2c\x61\x06\x41\x69\xe0\x53\xa9\x34\x82\x92\x10\x2b\x99\x0a\x1e\x9b\x68\x77\x27\x2d\x64\x0c\x81\x82\xbf\x94\xa5\x3b\x43\x74\x99\x4d\xb8\x9c\x16\x82\xe9\xaa\x1a\xd5\x66\x02\x82\x21\x95\x81\xe8\x93\x3a\x54\xd2\xe0\xa3\xa9\xaa\xd8\x3c\x5a\x5d\xf6\x21\xf2\x2f\x43\x28\x4b\x94\x89\x85\xe9\x4d\x1f\x2a\x51\xcc\x64\x1e\x7a\x74\xfe\x11\x6e\x15\x17\x91\x7f\x18\x01\x6a\xad\x34\x94\xbb\x3b\x03\x8d\xa6\xd0\x12\x54\xe4\x2c\x3b\xc3\x6d\xa3\xb4\xf1\x03\x9a\xa3\x83\x60\x54\x96\x28\x72\x24\x20\x21\xd4\x0b\x5e\xd2\xaf\xcb\xa4\xaa\xc2\x8d\x50\x46\xbb\x3b\xd5\xee\x8e\xf5\xb4\x07\xee\x1e\x78\x4a\x7e\x6c\xb9\xde\xfe\x1c\x33\xc9\xe3\x3e\x09\xe3\xff\x8f\x05\x20\xa5\xb9\x7d\x47\x7e\xd8\x9e\x96\xf1\x4b\xf3\x62\x19\xe1\xa9\x85\x65\x23\xf5\x8f\x24\xe5\x1f\x64\xf4\xa7\x7d\x90\x5c\x10\x8c\x41\x66\xbd\x14\x90\xc2\x2b\xcd\xb2\x63\xad\x03\xd4\x7a\x34\xda\xdd\x19\x54\x6b\x29\x5c\xc7\xd9\x2a\xca\xa0\xc8\xb9\x9c\xda\x67\x7c\xc4\xb8\x30\x4a\x7f\x53\x2a\xb5\x74\x67\xdf\x49\xe8\xf8\xa9\x67\x2d\x14\xe7\xc5\x63\x0f\xaa\xe5\xdf\xa7\x2c\x37\xe2\xfe\x55\x6b\xd7\xf3\x5e\xff\x06\xf6\x57\xc4\x5c\x3b\xc6\x2c\x8e\x17\x67\xf8\x81\x69\x98\x2d\x26\xe7\xa7\x2b\x9d\x7a\x29\xf9\xd7\xa2\x36\x0e\xfb\x70\x7d\x93\x1b\xcd\xe5\xb4\x74\x65\x58\x33\x39\x45\x78\xc5\x43\x78\x15\x2b\xd1\x2a\xc4\xf5\x0e\x32\x32\xb0\xa2\x3c\x25\x99\xc8\x69\xa4\xd7\xc3\xb2\xa4\x57\xae\xb0\x0f\x43\x2f\xb9\x04\xe7\x1f\xaa\x1a\xf7\x32\x38\x5e\x24\xee\x26\x88\x1d\xea\x20\x51\x71\x31\x43\x69\x98\xe1\x4a\x42\xaa\x34\xdc\xa9\x39\x18\x05\x99\x56\x19\x6a\xb1\x80\x22\xc7\x2e\x3d\x64\xb2\xc3\xd0\xd6\x61\xfb\xe7\x8a\xda\xa6\x97\xf0\x14\x14\xec\xb7\x02\xcc\x37\x17\x92\xc8\xa3\x4f\x38\x0f\x86\x65\x19\x8d\xef\xa7\x8e\xc6\x3d\x90\x0a\xca\xb2\xd3\xb3\xad\xc7\x1e\x78\x82\x09\x79\xb1\xa0\xf3\x0e\x7d\x44\x7a\xd2\x2d\x9f\xc2\x32\x34\x34\x7c\x86\xb9\x61\xb3\xec\x8b\x13\xfc\x72\x87\x22\x43\x3d\x84\x08\xaa\x5a\xbe\xc9\x9d\xdf\x94\xba\xaf\xc3\xac\x9d\x66\x89\x3a\xc0\x54\x69\x74\xce\x25\xa9\xad\x73\x6e\x45\x56\x35\x87\x76\xa8\x07\xad\xd8\xdc\xdd\x19\xc8\xff\x1c\x61\xca\x0a\x61\x68\x7c\xf9\x5a\xa0\xe6\x98\x47\x9f\x94\xfc\x37\x6a\xe5\x97\x26\x68\x39\xf6\x11\x70\xa4\xe6\xb2\x89\x01\xef\xf6\x2b\x6e\xee\xbc\x70\x08\x6a\x44\x7a\x5d\xba\x3c\xa3\x76\xcb\xfc\x75\x4a\x9d\xa3\x04\xca\x60\xa9\x7d\x64\x09\x7e\xbb\x96\xde\x98\x49\xeb\x35\x47\x07\xcc\xb9\xb9\x03\x06\x86\x46\x2f\x73\xc7\x0c\xf8\xf5\x3a\x9d\x6c\x6a\x31\x28\x48\x35\xc4\x64\xba\x45\xf6\x9b\x37\x70\x50\x70\x91\x40\xcc\xe2\x3b\x84\x7b\x5c\x00\x97\xaf\x05\x97\x08\xc5\x54\x70\xb1\x80\xd7\x30\x5b\xe4\x5f\x05\x3c\xe4\x90\xd9\xbf\x99\x56\xb7\x02\x67\xf9\xee\xce\xe0\xb6\x48\xad\x27\x72\xa3\x67\x4c\x4e\x05\xda\xae\x78\x50\xa4\x29\xea\x60\xe4\x96\xa3\x2b\xcd\x0d\x4e\xa8\x48\x05\xb9\xd1\xb1\x92\x0f\xd1\x89\x51\x2c\xe8\x44\x7f\xf4\x91\xcb\x84\x8a\xa2\x8d\xc8\x2f\x21\xc4\x56\xaf\x2b\x67\x5d\xc1\x43\x25\x72\xe7\x99\xbe\xf6\xd8\x1f\xaa\x59\x38\x58\x18\x0c\x7e\x8d\x7e\x7d\x16\x4b\xb7\x44\x6c\xc0\xd2\x15\xfc\x5e\x2c\x4f\xf5\xb6\x02\xf6\x07\xe9\xab\x03\x75\xb3\x3a\x4b\xf7\xde\x3e\xd8\x75\xbf\x64\x57\x1a\x3e\xc7\x45\xcd\xe7\x6d\x91\x8e\x7c\xb6\xaf\xcc\x19\x97\xd8\x87\x36\x88\xce\x0a\x13\x5d\x9c\xaa\xf8\x9e\x94\x51\x5c\x85\x2e\xbc\x12\x6b\xec\x79\x05\xd7\xf7\xb8\xb8\xd9\xde\xd4\xa5\x14\xde\xd8\xee\xce\xc0\xf6\x4f\x5b\x2d\x28\x61\xea\xec\xfa\xc9\x5b\x27\x67\xd4\xb3\xac\x46\x63\xe1\x74\x29\x3d\x69\x3d\xd9\x54\xb6\x1b\xd6\xe1\x78\x27\x44\x9d\xc9\x9b\xc4\x56\x54\x93\x2d\xc5\x55\x61\x3a\x3b\x9a\x28\xa1\x67\xeb\xdd\x81\x6f\xa4\x7b\xfb\xbd\x3c\xb9\x6c\x3d\xfd\xa0\x83\x8c\x35\x9f\x31\xbd\xf8\x88\x8b\xb6\xb4\x73\x7b\x5d\xc3\x1c\x88\x76\x01\x7b\xbe\x41\x15\xd2\xd5\x2e\x55\x97\xb4\x5e\xbb\x0a\x21\x56\x85\x48\xa8\x55\xdc\x52\xad\xf2\x87\x76\xc5\x0c\x04\xcf\x5d\xfb\xf2\x25\xcd\x5a\x84\x76\x55\x9a\xd8\x59\x7d\x96\x09\xb4\xe3\x43\xa0\xd1\x84\x4d\x82\xd0\x3e\x0a\x8f\xc8\x16\xf4\x05\xec\x3b\x1b\x2e\xc8\xce\xed\xab\x33\x5b\xce\x83\x84\x33\x81\xb1\x09\x61\xd8\x83\x37\xac\x3b\x79\xdd\xc2\x5b\x2a\x35\x3a\x15\xb0\x0f\xe9\xcc\x44\x93\x4c\x73\x69\x52\x47\xc6\x70\x72\x7c\x7a\x7c\xf8\x19\x7e\xce\xe1\xfd\xc5\xef\x67\xf6\xd4\xa7\xe7\x55\xd5\xd3\x5e\x96\xd1\xc5\x79\x55\xc1\xd5\x6f\xc7\x17\xc7\xf0\x73\x3e\x74\x14\xb9\xb1\x2f\x8f\xfe\xa9\xb8\x0c\x9a\x93\x9e\x24\x28\xcd\x79\xa1\x0c\x4e\x04\x8f\xb1\x06\x1d\x9d\x9e\x87\x50\xff\xbe\x38\xa7\xd8\x1f\x85\x30\x0c\x87\xa3\xa5\x3a\xaf\xe1\xea\x0e\x35\x1e\x0a\x56\xe4\x48\x3c\x59\x48\x43\x77\xe8\x0b\xf7\xf3\x6d\xdb\x7b\xed\x10\x70\x47\x7e\x60\xa2\xc0\x33\x96\x65\x5c\x4e\x43\x4a\xc5\xa6\x55\x1e\x70\x99\xf8\xa5\x75\xbd\xf7\xf3\x22\xc3\x70\x5d\x8d\x58\xaa\x6d\x39\xda\x4f\x19\xed\xe9\xa0\x3b\x1e\x50\xa1\xab\xe3\xd3\x1e\xdc\xca\xd6\xc1\xb9\xa4\xe9\xa5\x11\x5b\xc3\x64\x71\x15\xde\x1e\x60\x87\xb8\x5a\xf6\x68\x72\x29\x15\x77\x4c\x89\xc2\x13\x99\x70\x8d\xb1\x8d\x65\xf7\xe2\x5f\x56\xe2\xf7\x34\x50\xd4\xb7\x1e\x98\xe8\x4c\x28\xb4\x9a\xbf\xd7\x6a\x56\x1f\x85\x34\xfa\xa2\xdc\x61\x6c\xe4\x4b\xa8\x03\x94\xc3\xf5\x0d\x97\x06\x75\xca\x62\x2c\xab\x66\x54\xe9\xbb\xad\xed\xd3\x7a\x6b\x63\x7f\x6c\xf4\x7a\xeb\x2d\x25\xad\x09\xb4\x33\x7b\x37\xf3\x24\x4d\xc5\x47\x78\x5b\x4c\xcf\x54\x82\xce\x9e\x4d\xac\xf7\x94\x58\x42\x06\x8d\x00\xf5\x3b\x5d\x5b\xa1\xdc\x1e\x6d\x21\x6e\x7d\x37\x5a\x0e\x95\x76\xbe\xef\x59\x3f\xc9\x49\x3e\x88\xcd\xa3\xbb\x4d\x0e\xe6\xb4\x95\xfa\x68\x4f\x9d\x3d\x34\x09\x3e\x31\x3c\xdf\x06\xdd\x7c\x35\xa6\xe6\xb2\x68\x2b\x75\xcc\xe4\x29\xcb\x8d\x6b\x5c\x27\x47\xed\x4b\x5f\x6f\xa5\xbe\xfc\xd1\xd5\x6f\xe5\xda\x1a\xc7\x6b\xcc\x69\x06\xf6\xd3\xbc\x9d\xc9\xe9\x0e\x14\xb4\xd0\x3b\x94\x51\x14\x8d\x9c\x9e\x96\xe7\xd6\x6d\xf7\x46\x02\x1a\xf9\x37\xa9\xaa\x0f\xdc\x55\xbb\x06\xec\x97\x3a\x85\xbf\x15\xe6\xd3\x8d\xdf\x03\x70\x79\x0d\x59\x95\xe8\xdd\x56\x78\xa5\x59\x16\xa0\xd6\xae\xba\x6e\x6a\x88\x76\xc0\xeb\x77\x9d\x5e\xb6\xac\x61\xd4\xe6\xb2\xb0\xaf\x8f\x80\x4b\xf3\xf7\xbf\xf5\x30\xda\x65\x77\x33\x38\x63\x19\x5c\xdf\x14\xb5\x90\x5d\xa8\xab\x3c\x8d\xb9\xbd\x42\xb0\xa9\x14\x34\xbd\x7f\xaa\x8c\x02\x1a\xd4\xfc\xcd\x70\x2b\xcc\x0e\x6f\xcd\x86\x8b\x9e\xa8\x25\x97\xd0\x5c\xb9\xde\xbd\xc7\x5a\x4f\x16\x32\x7e\xcf\xb8\x68\xd9\x7b\x15\x2b\x41\xdf\xa3\x69\xe6\x4b\xf0\xb1\x4e\x93\xf1\x47\x5c\x2c\x3f\x32\xbc\x6d\x11\xd9\xfb\x86\x42\x5f\xfc\x68\xe0\x58\xaa\xea\xca\x7e\xe6\x46\xb8\x11\xd7\xb7\x82\x9e\x38\x09\xab\xc8\x41\x71\xc2\x55\x05\x34\x10\xc7\x4a\x44\xb6\x8f\x54\x55\xe0\x4e\xef\x4f\xe8\xa9\xa3\xe2\xfa\xcb\x2f\xeb\xfd\xfd\x57\xbb\xda\x5f\xb9\x7e\x7b\x63\xd7\x36\x77\xa6\xeb\x61\xe3\x9a\xaa\x1a\xde\x6c\x24\xae\x77\xcd\x5e\x46\xce\x8b\x75\xcd\xce\x98\xf6\x23\x12\x4a\xa3\xd1\x1c\x1f\xb0\xbe\x0f\x53\x2b\xca\xd7\x25\x18\xd0\xa1\x3b\x79\xb0\xa9\xab\x6e\xd3\x9e\xc3\x26\xdf\x46\x2f\xd4\xeb\xea\xa1\x73\x9b\x76\xd7\x3e\x9b\x2f\x68\x7f\x68\xe7\x5b\x8f\x75\xfe\x2c\xc2\x4e\x1f\x5c\xe5\xc4\x56\x39\x27\x23\x17\x6a\x1e\x74\xcd\x3e\x55\x1f\x4d\x62\x46\x63\xa2\x9d\x61\xbc\xbd\x8e\x37\x56\x28\x5d\xd1\x27\xbe\xd9\xc0\xb2\x85\xfc\x88\x28\xcf\x54\x56\xd0\xd7\xbb\xc4\xdd\x17\x9f\x09\x73\x57\x23\xdb\xe9\xbe\xb7\xe2\xde\xbc\xdd\x6d\x7c\x79\xef\xdf\x42\x9e\xee\xf9\xb0\xef\x5c\xb6\xbd\x89\xe6\xbe\x3f\xd8\xfc\x01\x72\xf9\x7f\xb7\x44\xbd\x4b\x0d\xea\xef\xfa\xf8\x58\x57\xbd\xf6\x3c\x43\x6a\x25\xb5\x97\xee\x47\xf1\xff\x05\x00\x00\xff\xff\xc6\xbf\x6e\xde\x38\x1d\x00\x00")

func templates17_upsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates17_upsertGoTpl,
		"templates/17_upsert.go.tpl",
	)
}

func templates17_upsertGoTpl() (*asset, error) {
	bytes, err := templates17_upsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/17_upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa0, 0xb0, 0x97, 0x4, 0x5c, 0x70, 0x95, 0xeb, 0x37, 0x4, 0xa5, 0xea, 0xb8, 0x23, 0x93, 0x31, 0x4b, 0x79, 0x6b, 0x3d, 0x9e, 0x5b, 0xdb, 0x99, 0x9d, 0xbe, 0x40, 0xaa, 0x4d, 0xb1, 0xd8, 0xc}}
	return a, nil
}

var _templatesSingletonMysql_upsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\xcd\x8e\xd3\x30\x10\xc7\xcf\x89\x94\x77\x18\x22\xad\x9a\x48\x56\x96\xbd\x22\xf5\xb0\x4b\xcb\x2a\x50\xfa\x5d\x10\x42\x1c\xdc\x7a\xdc\x5a\x72\x9d\xe2\x8f\x42\x85\xfa\xee\xc8\x71\xda\x66\x97\x82\x38\xec\x25\xf5\x78\x66\xfe\x33\xbf\xf1\xf4\xf6\x16\x96\x4e\x48\xb6\xd8\x19\xd4\x76\xe2\x50\x1f\x3e\x1e\x66\x93\x41\xb8\x35\x40\xc1\x1b\xc6\x52\x8b\x5b\x54\x16\x8c\xd5\x42\xad\xc1\x19\xff\xb5\x1b\x04\x57\x27\xf6\xa8\xa5\xb0\xd3\xd5\x5e\x30\x64\x45\x12\x73\xa7\x56\xd7\x85\x33\x26\x28\x30\x2d\xf6\xa8\x4d\xd1\x13\x54\xe2\xca\x12\xb0\x74\x29\x71\x48\xb7\xd8\x14\x20\xe0\x76\x8c\x5a\x24\xf0\x63\x23\x2c\x4a\x61\x2c\x7c\xfd\x16\x7c\xf9\xa9\x89\x5f\x49\x1c\x5d\xdc\x5d\x7f\xbd\xa5\x6a\x2d\xb1\x28\x19\x2a\x3b\x71\x95\xc5\x99\x14\x2b\xf4\x35\x8b\xc1\x84\x80\xff\x9d\x4e\x5a\xa2\x79\x12\x47\x97\xda\xd7\x25\xfe\xc8\x3e\x27\xe4\x49\x9c\xc4\xd1\xd2\x71\x78\xd3\x4e\x7d\x44\xfb\xe0\x38\x47\x9d\x79\x79\x86\x1c\x75\xcb\x3b\x76\x27\xef\xd2\xf1\xa0\xb0\xa7\x1a\x56\x95\x74\x5b\x65\x1a\xb6\x24\x8e\x04\x07\x89\x2a\xbb\xb4\x0a\xaf\xba\xf0\xba\x86\x8e\x4e\xc1\xdd\x26\xdc\x14\xef\x2b\xd1\x8a\x25\x90\x92\xd4\x17\x3f\xd6\xfa\x8d\x54\x18\x69\x0e\xdd\xb3\x0e\xdf\xda\xe2\xdd\x4e\x0b\x65\x79\xe6\x6d\xcf\x42\xea\x43\x5a\x0e\x67\xfd\xe9\x1c\xca\xc7\xe1\x68\xda\x87\x72\x38\x1f\xc1\x8d\x81\xec\xc6\xe4\xf0\xe9\x7e\xb0\xe8\xcf\xea\x73\x1a\xa2\xcf\x13\x09\x66\xd3\x5e\x30\x5a\xe4\x92\xae\x70\x53\x49\x86\xda\xd4\x43\x5d\x18\x2c\x15\xc3\x9f\x6d\x07\x79\x46\x4d\xe0\x8e\xc0\x5d\x5e\x6b\x79\xa2\x48\xa3\x75\x5a\xc1\xd2\xf1\x62\x56\xc3\x67\x17\xd0\xe7\x3c\x27\x9c\x33\xcd\x5f\x30\x60\x34\x84\xde\x62\x3c\x28\xdf\xde\xcf\xfb\xf0\xa1\xff\x05\x16\xe3\x9e\x3f\x06\xbe\xa7\x78\x6d\xba\x97\x83\x0b\x9b\xc0\x2b\x0d\x82\xc0\xde\x2f\x94\xa6\x6a\x8d\xcd\xff\x20\x3c\x97\xe0\x20\x5a\x5b\xe0\xf1\x8a\xcf\x5a\x58\x7c\x38\x58\xcc\x3a\xa4\x53\x0f\xe8\xe8\x3f\xdf\xfd\xe6\xb2\xa7\x7b\xf9\x8f\x95\xde\xe7\xcd\xb8\x82\x5e\x33\xd8\x20\x72\xd5\x95\x42\xb7\x19\x60\x96\xfe\x77\x6e\x68\x33\xef\x5c\x1e\xec\xea\x63\x1e\x93\xf8\x77\x00\x00\x00\xff\xff\x3c\xfb\x53\x8d\x97\x04\x00\x00")

func templatesSingletonMysql_upsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSingletonMysql_upsertGoTpl,
		"templates/singleton/mysql_upsert.go.tpl",
	)
}

func templatesSingletonMysql_upsertGoTpl() (*asset, error) {
	bytes, err := templatesSingletonMysql_upsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/singleton/mysql_upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf2, 0xf4, 0xeb, 0xe, 0x9c, 0xaf, 0xd0, 0xb1, 0x66, 0x75, 0x29, 0x33, 0x1c, 0xd3, 0x3f, 0xaf, 0xc3, 0x21, 0x81, 0xd7, 0x1, 0x9, 0xa7, 0x2a, 0x7b, 0xc5, 0x14, 0x7c, 0x54, 0x6, 0xa1, 0x9f}}
	return a, nil
}

var _templates_testSingletonMysql_main_testGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\xdf\x6f\xdb\xb6\x16\x7e\xb6\x01\xff\x0f\x67\x06\xba\x2b\x75\x0a\x5b\x60\xc0\x7d\xc8\x20\x14\x8d\xe3\x0c\xc1\xda\xb4\xb5\x73\xef\x70\xb1\x0c\x1b\x2d\xd1\x09\x11\x89\x54\x48\x2a\x8e\x6f\x91\xff\xfd\xe2\x90\x94\x44\x29\xb6\x9b\xf5\xf6\x71\x4f\x89\xc9\x8f\xe7\xc7\x77\x0e\x0f\x3f\xfb\x9e\x2a\x50\xd7\x0f\xef\xb7\xcb\x4f\xef\x6e\xd9\x16\x52\x50\xec\x9a\x3d\x54\xe4\x7d\xad\xcd\x4c\x96\x15\x2f\x58\xf4\x67\xf4\xa6\x8c\xa3\x28\xb9\x12\xf1\x9b\x2b\xfd\xc3\xec\xc3\xc5\xf2\x72\xf1\xf6\xfc\xe2\x92\xbc\x7c\x73\xf6\x61\x31\x3f\xff\xf9\x02\x7e\x99\xff\x87\xbc\x7c\x73\x25\xe2\x1f\xfe\x8c\x27\xe3\xc9\xd8\x6c\x2b\x06\xe5\x56\xdf\x15\x97\x4c\x1b\xa6\x40\x1b\x55\x67\x06\x3e\x4f\xc6\xa3\x7c\x35\x93\x42\xc0\x4b\x7d\x57\x90\xd3\x13\x44\x8f\xf2\xd5\x05\x2d\x19\x20\x8a\x8b\xeb\xc9\x78\x74\x23\xb5\x01\x08\x16\x6a\xcd\x54\x6f\xa1\xa2\x5a\xf7\x16\xb4\x2e\x4a\x99\xb3\x00\x21\x95\xb5\xc1\x85\xb1\x4e\x64\x65\xb8\x14\x67\xbc\xe8\x30\x93\xf1\xc8\x30\x6d\x4e\x4f\xac\xfb\xce\xd4\x2d\xaf\x96\x9f\xde\xcd\xca\x1c\x56\x52\x16\x93\xf1\x23\x42\xd7\xb5\xc8\x80\x0b\x6e\xa2\xd8\xe7\xf1\x9e\x72\x01\x29\x7c\x1f\x24\xfa\xf9\x31\x44\x47\x25\xbc\x0c\x36\x63\xd0\xcc\xd4\x55\x14\x03\x53\x4a\x2a\x6b\x05\x4b\xc0\x94\x72\x2b\x36\xa2\x7b\x5e\x31\x45\x96\xcc\x9c\xb2\x35\xad\x0b\x13\x4d\xad\x09\xe2\x13\x9c\x26\x30\x35\xaa\x66\xd3\xf8\x00\x16\x73\x9f\x26\xf0\xe3\x8f\xaf\xff\x69\xeb\x31\x2a\x89\xe7\x38\x05\x77\xe6\x67\x66\x96\x36\xdf\xe6\x48\xbe\x12\xb4\x74\x56\x4b\x62\xf9\xdf\x0b\xc5\x5d\x0f\xb4\x75\xd9\x0b\xc4\x5d\x0f\xb4\xf5\xda\x0b\xc4\xdd\x06\x88\x65\x0b\x80\xe7\xa2\x9f\x95\x43\x35\xd5\xde\x6b\xb1\x61\xcb\xc1\x83\x2a\xef\x3d\x81\x98\x1e\x09\x41\x1b\x04\x87\x4e\xa4\x2c\x5a\x27\xb7\xbc\xd2\x77\x45\x56\xe6\x53\x47\x33\x56\x32\x85\x7b\x5a\x50\x72\xc2\xae\xb9\xf8\x37\x2d\x78\x4e\xb1\xef\xa2\x98\xf8\x0f\x2c\x9a\x8c\x47\x23\x8b\x71\x01\x5c\x48\x33\x2f\x2b\xb3\x8d\x1c\x9d\x09\xf4\xd8\x4b\xf6\xa3\xb1\x0e\x2d\xda\x15\xa5\x43\x5f\x48\x13\xd9\x7f\xe6\x77\x35\x2d\x74\xe4\x98\x4d\xe0\x75\x7b\xc2\xd1\x79\xc8\x81\xeb\x99\xf6\x40\xc3\xce\x81\x13\x9e\xf6\xf6\x48\x5b\x06\x3c\x13\x93\xd9\x0d\xcb\x6e\x23\xc7\x15\x5f\xdb\xc6\xff\x2e\x05\xc1\x0b\x7b\x17\x46\x8a\x99\x5a\x09\x5c\x9e\x8c\x47\xf6\x1a\x8d\x5e\xbd\x82\x99\x62\xd4\x30\xa0\xa0\xa8\xc8\x65\xc9\xff\xcb\x72\xc8\x57\x80\xb1\x10\x67\xa7\x60\x22\x0a\x8b\x1c\x43\x9a\xc2\x6b\x67\x73\x50\xfc\xd6\x06\x59\x1a\xba\x2a\x98\xdb\x68\x73\x8d\x5b\xc7\x3e\xbc\x14\x4a\x52\xd2\x5b\xf6\xa1\x9d\x1e\x51\xfc\xd3\x81\xc0\xa5\xd2\xe4\x57\x45\xab\x88\x29\xac\x64\x26\xeb\x22\x17\xff\x30\x80\x36\xc0\x8d\x20\x58\xf3\xc2\xf5\x58\xeb\xe9\xbb\x5e\xb7\x59\x93\x81\xff\x5c\xc9\xea\xd2\x26\xb1\xcb\x77\x9f\x35\xb4\xd9\x3b\x9c\x59\xf6\xfe\xca\x71\xfc\x93\xd7\x65\x85\xa1\x1c\xa7\xc0\x1e\x58\x46\x66\xb2\x2c\xa9\xc8\x7d\xe3\xe3\xee\x34\xc1\xc8\xdc\xd8\xd1\x8e\x97\x04\xa6\x47\x47\x42\x1e\xe5\xd4\x50\xb7\xdd\x72\x3a\x72\x61\xec\x37\xb9\xcf\x1c\xda\x5a\x51\xcd\xec\x7e\x50\x61\x17\xa6\x4a\x60\x83\x06\xb9\x24\x1f\x79\xc5\xa2\x38\x88\x7d\x69\x72\xcc\xf5\x38\x85\xef\x57\x5b\xc3\x34\x39\xa9\xd7\x6b\x37\xa1\x83\x70\x0e\xa0\x02\x5b\x64\x69\x72\x59\xe3\x5c\xda\x0c\x56\x1d\xcd\x3d\x97\xee\x64\xeb\x01\x51\xf6\x9d\x10\x6c\x73\xf6\x0b\xdb\x9e\x32\x6d\x94\xdc\x32\x15\x05\x4f\x6f\x02\x2a\x7e\x72\xca\xd9\x1e\x84\xea\xac\xb7\x05\xee\x42\xa1\xca\x7c\xa1\xbe\x83\xde\x5c\x53\x5e\xb0\x1c\x8c\x04\x8d\x87\xa1\x2d\x2d\x64\xae\x34\xb6\x47\x07\x0d\x15\x06\xf8\x6d\x3c\x3e\xf1\xb6\x33\xbf\x5f\x29\xdf\xed\x6c\x5d\x1a\xf2\x51\x71\x61\x0a\x81\x5e\xe2\x27\x8b\xbd\xda\xf8\x89\x15\xc5\xf1\x73\x23\xdd\x50\x6e\x60\x2d\xd5\x01\x7a\xf0\xcf\x1f\xd8\x1b\x64\x56\x48\xcd\xa2\x18\x5e\xbd\x82\xb7\x6b\xd4\x3d\xcd\x3d\xe2\x1a\x72\x29\x58\x02\x19\x22\xc0\xdc\x30\xd8\x28\x6e\x18\x30\x91\x83\x5c\xdb\x85\x8a\x57\x6c\x90\x7d\xc7\xf6\xd7\xe7\x3f\xe8\x9f\xff\x97\x81\xa7\xcd\xe1\x18\xf0\x86\x04\x2f\x0e\x2b\x20\x5d\xbc\x97\x39\x8b\x02\xad\x16\xfb\xbf\x36\x21\xbd\xe1\x26\xbb\x01\xbb\x8d\x9f\x33\xaa\x99\x17\x3c\xc7\xc1\xa4\x9d\x2e\xe6\x9f\xfe\x75\xbe\x98\x9f\x4e\x5b\xcc\x9a\x16\x7a\x00\x3a\x3d\x5f\xbe\x3d\x79\xe7\x40\x7e\xb6\xf4\xf6\x3f\x2e\xe6\x67\xf3\x85\xb7\x72\x58\xb9\xf5\x47\x53\x18\xb1\x37\x86\x94\x2f\x2b\xe4\x7c\x1d\xe1\xdc\xf2\xf8\x23\x1c\xf6\xe9\x0b\x6d\xe7\x57\x27\x41\xe3\x83\xce\x86\x0f\x4e\xa0\x17\x4d\x59\x25\xe0\x27\x16\x97\xb5\xe1\x05\xb9\x64\x65\x65\x71\x53\xd4\x86\xce\x47\xfb\xc4\x1c\x7c\x65\xf7\x96\xdc\xf5\xcc\xbe\xf7\x4a\x5f\xce\x3e\xa2\x7f\xcb\xf8\x64\x3c\xfa\x23\xf1\xed\x2a\x35\x4e\x05\xe3\xa5\x89\x77\x2f\x35\x39\xd7\x28\x11\x1e\xb8\x36\xb6\x45\xfd\x03\x67\xcd\xa4\x80\xb5\x45\xdb\xc0\x0a\xcd\xe0\xaf\xc4\x6b\x1f\x57\x10\xd2\xe0\x38\x31\x50\x76\xc2\xd4\x05\x8a\x25\x39\xab\xfc\x35\xb0\xc4\x4d\x7f\xcb\x0a\xce\x84\xf9\xdd\xa2\xba\xfd\xb5\xdf\x46\x03\xe9\x0b\x7d\x25\x6c\xb9\x9a\x24\x9e\xe2\x50\x3a\xa5\x2f\x72\x8f\xc3\x4f\xbb\x71\x28\xe1\x3a\x7b\xf8\x29\x0e\x15\x0b\xca\xde\x18\x73\xf5\x5a\x65\x87\x23\xaa\xf5\x46\xaa\xbc\x33\x62\xcf\xb8\x14\x77\xe0\xb5\x2e\x8e\xf0\xee\x74\xf8\xf6\xc2\x35\x5a\x2c\xf6\x21\x38\xfe\x07\x7e\x5b\xa2\x2a\x25\x8d\xcc\x64\x91\x9a\xac\xfa\x02\xa5\xed\x60\xfc\x9b\xd5\xaf\x64\x35\x9c\x0c\x78\x23\xca\x8a\x58\x55\x1a\x87\x93\x15\x57\xfd\xfb\x72\x70\x78\xf4\x05\x5f\x30\x3a\x70\x78\xe3\xad\x0d\x07\x95\xbf\xe8\x8d\xca\x82\x17\xfa\xa7\xa7\x4a\xab\x89\xa0\x24\xaa\x16\xb3\x32\x8f\xf4\x5d\xd1\x28\xfc\xe9\xe1\x60\x42\xe9\xfa\x85\x50\x10\xda\x05\x82\x73\x00\x07\x86\xfe\xe6\x21\x19\x46\x55\x2e\x37\xa2\x17\x10\x5f\x5b\xb9\x6a\x7f\x99\xd8\x31\x7b\x9a\xbd\xae\x00\xcf\xd1\xee\xc7\x5f\x25\xde\x7b\xcf\xa9\xd4\x64\xc1\x4a\x79\x8f\x9d\xf6\xdc\xd7\xa3\x61\x04\x65\x67\xd2\x3c\xd7\xfe\xc5\x4a\x80\xaa\x6b\x0d\x84\x90\xe6\xed\xed\x38\xb0\x3b\x29\xd0\xaa\x62\x22\x8f\x7e\xfb\xdd\x21\x3e\x0f\x65\xf9\xa3\xb3\x41\x08\x71\xed\x99\xed\xd0\xf4\xde\x69\x88\x44\x5c\x2b\x85\x9d\x69\x4d\x2e\xd8\x66\xc1\x68\xce\x94\x8b\xd6\x19\xd4\x4e\x6b\xef\x14\xee\xfa\x80\xa8\xcf\x42\x9d\xee\x8c\x74\xab\xee\x81\xd2\x5e\x42\x07\x15\xc2\xfd\x45\x2d\x76\x14\x27\x14\x51\xcd\xdb\xa8\x6a\x21\xb8\xb8\x3e\x9e\xb6\xc4\xba\x1c\xe3\x01\xde\xb9\xef\x69\xad\xc1\xf6\x50\x8a\xed\xf8\xee\xfb\x4c\x49\x95\x49\x81\xcd\x1c\xf9\x5f\xd4\x12\x57\xd2\xf8\x50\x5f\x0f\xda\x3a\x71\x3e\xbc\xdb\xc1\x4f\x52\xa3\x0e\xe5\x49\xbc\x2b\xc8\x87\x8a\x89\xee\x9b\x5b\xae\xf8\x3d\x53\xc4\x7e\x99\x39\xa9\x79\x91\x7f\xaa\x99\xda\xfa\xec\x9a\x5f\x35\xdc\x90\xed\xdf\xe4\xe6\x3d\x68\xe6\xbd\x1f\xad\xe1\x40\x1d\x14\xa5\xe3\x24\xd9\xc5\xd5\x20\xa3\xc7\xc9\xf8\x7f\x01\x00\x00\xff\xff\x7c\x72\x6e\xc2\xe4\x14\x00\x00")

func templates_testSingletonMysql_main_testGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonMysql_main_testGoTpl,
		"templates_test/singleton/mysql_main_test.go.tpl",
	)
}

func templates_testSingletonMysql_main_testGoTpl() (*asset, error) {
	bytes, err := templates_testSingletonMysql_main_testGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/mysql_main_test.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x50, 0x56, 0x4c, 0xa, 0xe7, 0x86, 0x1f, 0xa2, 0xb4, 0x4, 0x68, 0x54, 0x87, 0x8c, 0x91, 0xc9, 0xbb, 0x70, 0xb4, 0xbb, 0x18, 0x6e, 0x65, 0x3a, 0x3a, 0x1, 0x4a, 0x45, 0x65, 0xf, 0x59, 0x21}}
	return a, nil
}

var _templates_testSingletonMysql_suites_testGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xc1\xca\xc2\x30\x10\x84\xef\x85\xbe\xc3\x52\x72\x68\x7f\xda\x3c\xc0\x0f\x1e\x3c\xea\x41\x44\xda\x07\x88\x76\x5b\x02\x71\x2d\xdd\x2d\x08\x21\xef\x2e\x31\x16\x29\x78\x9b\x61\x26\x5f\x66\x87\x85\x6e\xd0\x22\x4b\x37\x31\xce\x52\x0a\xfc\x09\xb2\x58\x1a\x75\x5b\x81\xcf\x33\x00\xef\x1b\x98\x0d\x8d\x08\xca\x52\x8f\xcf\x1a\x94\x98\xab\x43\xf8\xdf\x81\x6e\xa3\xe2\x10\xd6\xa2\x1d\x3e\xa9\x3e\xf0\xf1\x61\xe9\x9d\x43\xf3\x2d\xa0\xe3\x8d\x57\xc6\x59\xc3\x91\xa5\xf4\x3e\x4a\xe4\x04\x5d\x39\x27\x73\xc7\x54\x17\x7d\x59\xa8\x2c\xbc\x4f\x6f\x74\x37\x9d\xdd\x32\x1b\x17\x42\x51\x43\x5c\xfd\x23\x49\x67\x55\xe9\x37\xa4\x7e\x33\x65\xb5\x21\xcf\x5e\x01\x00\x00\xff\xff\x27\x41\xb1\xc4\x08\x01\x00\x00")

func templates_testSingletonMysql_suites_testGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonMysql_suites_testGoTpl,
		"templates_test/singleton/mysql_suites_test.go.tpl",
	)
}

func templates_testSingletonMysql_suites_testGoTpl() (*asset, error) {
	bytes, err := templates_testSingletonMysql_suites_testGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/mysql_suites_test.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc2, 0x77, 0x23, 0x9d, 0xca, 0x7c, 0x5, 0xb3, 0xeb, 0xa, 0x78, 0xc, 0x30, 0x77, 0xe2, 0x6, 0x5b, 0x35, 0x61, 0xeb, 0x5f, 0xd9, 0x83, 0x3f, 0xb0, 0x9f, 0xb6, 0x96, 0x74, 0x62, 0x21, 0x4}}
	return a, nil
}

var _templates_testUpsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x54\xcd\x6e\xdb\x3c\x10\x3c\x4b\x80\xde\x61\x3f\xe3\x6b\x41\x15\x0a\xd3\x5e\x53\xf8\xe0\xfc\x1c\x82\xb6\x86\x1b\xcb\xe7\x82\x91\x56\x0e\x61\x9a\x54\xa9\x55\x6d\x57\xe0\xbb\x17\xa4\xe2\xd8\x49\x9c\xd6\x87\xf6\x90\x83\x7f\x48\xcc\xee\xcc\x70\xb8\xec\xba\x13\xf8\x5f\x28\x29\x1a\x38\x1b\x02\x1f\xf9\x7f\xd8\xf0\x5c\xdc\x2a\x84\xfe\x87\x8f\xc5\x12\x9d\x4b\xe2\xaa\xd5\x05\x10\x36\xd4\x75\x7d\x09\x9f\xd5\x13\xd5\x5a\xa1\x9c\x9b\xd5\x0d\x5a\x62\x04\xef\x3c\x40\xea\x39\xcf\x53\xe8\x92\x38\x22\x3e\x11\x56\x28\x85\x8a\xa5\x49\x9c\xc4\x91\xac\x40\xa1\x66\x0f\x3d\x2e\xcd\x4a\x4f\xa5\x9e\xb7\x4a\x58\xe7\x46\x4a\x5d\x18\xd5\x2e\x75\x93\xc2\x70\xf8\x3b\xe4\xc4\xca\xa5\xb0\x9b\x4f\xb8\x79\x28\xf0\x7c\x11\xf1\xe9\x42\xd6\x6c\xe0\xbf\x6b\xa9\xe7\x40\xc1\xcb\x4a\xd2\x1d\x18\xad\x36\x50\xf7\x85\xb0\xc0\x0d\x14\x7d\xe9\x20\x4d\xe2\xc8\xed\xc4\x2d\x37\xd3\xaf\x9f\xf7\x5c\xee\x58\x67\x5a\x7e\x6f\x71\x5f\xe2\xfb\x3f\xd3\x6a\x03\x6d\xa8\xdb\xf2\x01\x19\x28\x8c\xae\x94\x2c\x08\x8c\xde\xd2\x27\x71\xd4\x20\x96\x3e\x09\x2b\x74\x69\x96\xf2\x27\xf2\x31\xae\xa6\x88\xa5\x3f\xbd\xe8\x87\xb0\x80\x36\x7c\x8c\x4d\xe2\xe8\xf4\x14\x46\x44\xb8\xac\x09\xe8\x0e\xe1\x7a\x3c\xbd\xba\xc9\xa1\x91\x25\x82\xa9\x40\x68\x98\x4d\xfc\x4e\x12\x47\xc6\x37\x3d\xe8\xa8\xbb\xf7\xed\xfb\xee\xf3\x4e\xc9\xb6\x05\x31\x2f\x28\x83\xb7\x26\x83\x17\x72\xb8\x3c\xcf\x37\x35\x36\x19\x54\x42\x35\x98\x7e\x0c\x8d\xfe\x1b\x82\x96\x6a\x7b\x32\x57\x5e\x6e\xc5\x06\x33\x1d\xce\x84\xcc\x8e\xe6\xb0\x26\x68\x02\xf9\x19\xbc\x69\x06\x99\x6f\xb8\x3b\xa0\xae\x93\x15\x68\x43\xc0\xc7\xe6\xc2\x68\xc2\x35\x39\x57\xd0\xda\xfb\x2b\xfa\x35\x3f\x17\xc5\x62\x6e\x4d\xab\x4b\x96\x76\x1d\xea\xd2\xdf\xde\xa8\xc7\x7c\x69\x1b\xca\xd7\x2c\xb4\xd9\x6f\xf1\x6c\xe3\xd6\x48\xc5\xcf\x71\x2e\x75\x68\xa2\x1a\xdc\xdf\xcb\xd7\xac\xa0\x75\xe6\x5d\x6e\x29\x8e\x02\x79\x23\x25\x56\x68\xc1\x4f\x13\x4b\xa1\x83\x6f\x30\x04\x5a\xf3\x1b\xa3\xd4\xad\x28\x16\x2c\x05\x17\xc2\x7e\xc8\xc4\xf0\xfb\xe9\x7a\xc9\xbb\xcf\x06\x75\x09\x27\xce\x81\x5f\x05\x05\xd7\xba\x42\xcb\xd2\xc7\xab\x23\xe3\x69\x03\xdf\xe1\x6c\x0e\x85\x52\x98\x56\x53\xd8\x7b\x72\xcd\xb6\xcf\x03\x4b\xf9\x85\xc7\x1c\x69\x61\xcf\xfe\x01\xa9\x6c\xc7\xed\x51\x81\xdc\xe3\x3e\x3c\x46\x0d\x56\x42\xfb\xe9\x42\xb0\x58\x18\x5b\x66\x30\x37\x74\x36\xc8\xfa\x82\x9d\xf8\x27\x43\x34\x9b\x5c\x8e\xf2\xab\x83\x43\xf4\xd7\xa6\xe4\x45\xd8\xb3\x47\x8d\x73\xfe\xcf\x47\xea\x75\x5e\xb4\xd7\x75\xcf\x5c\x12\xff\x0a\x00\x00\xff\xff\xb6\xcf\xd1\xcb\x6b\x07\x00\x00")

func templates_testUpsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testUpsertGoTpl,
		"templates_test/upsert.go.tpl",
	)
}

func templates_testUpsertGoTpl() (*asset, error) {
	bytes, err := templates_testUpsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x22, 0x8e, 0xbf, 0xb4, 0xb4, 0xf3, 0x8e, 0x54, 0x7a, 0xc3, 0xf2, 0xc1, 0x23, 0x5a, 0xba, 0xa3, 0xf6, 0xd5, 0x80, 0xc9, 0x1a, 0x41, 0x27, 0xb7, 0x2d, 0x95, 0x3a, 0xfb, 0x4f, 0x14, 0x2e, 0x30}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/17_upsert.go.tpl":                        templates17_upsertGoTpl,
	"templates/singleton/mysql_upsert.go.tpl":           templatesSingletonMysql_upsertGoTpl,
	"templates_test/singleton/mysql_main_test.go.tpl":   templates_testSingletonMysql_main_testGoTpl,
	"templates_test/singleton/mysql_suites_test.go.tpl": templates_testSingletonMysql_suites_testGoTpl,
	"templates_test/upsert.go.tpl":                      templates_testUpsertGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"17_upsert.go.tpl": &bintree{templates17_upsertGoTpl, map[string]*bintree{}},
		"singleton": &bintree{nil, map[string]*bintree{
			"mysql_upsert.go.tpl": &bintree{templatesSingletonMysql_upsertGoTpl, map[string]*bintree{}},
		}},
	}},
	"templates_test": &bintree{nil, map[string]*bintree{
		"singleton": &bintree{nil, map[string]*bintree{
			"mysql_main_test.go.tpl":   &bintree{templates_testSingletonMysql_main_testGoTpl, map[string]*bintree{}},
			"mysql_suites_test.go.tpl": &bintree{templates_testSingletonMysql_suites_testGoTpl, map[string]*bintree{}},
		}},
		"upsert.go.tpl": &bintree{templates_testUpsertGoTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
