// Code generated by go-bindata.
// sources:
// override/templates/17_upsert.tpl
// override/templates_test/singleton/mysql_main_test.tpl
// override/templates_test/singleton/mysql_suites_test.tpl
// override/templates_test/upsert.tpl
// DO NOT EDIT!

package driver

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templates17_upsertTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\xdd\x6e\xdb\xb8\x12\xbe\x96\x9e\x62\x6a\xf4\xb4\xd2\x81\xc3\xe4\x00\x07\x7b\x91\x85\x2f\x36\x7f\x6d\xb7\x49\x6a\xc7\xe9\x06\xd8\x20\x08\x64\x69\xe4\x10\xa1\x49\x95\xa2\x92\x7a\x55\xbd\xfb\x62\x48\xc9\x96\x1c\x27\x71\x9b\xf6\xaa\x35\x67\x38\x3f\xdf\x0c\xbf\x19\xa5\x2c\xb7\xe0\xb5\x89\x26\x02\x4f\xa3\x19\x8e\xb9\x9c\x16\x22\xd2\xb0\x3b\x00\x76\x4e\xa7\x8c\x8e\xe1\x1b\xe4\x8d\xe4\x1b\x18\x6e\x04\xee\x47\x39\xc2\x56\x55\xf9\xd6\xc0\x5d\xa4\x37\xbe\x1e\x47\x33\x14\xdd\xeb\x79\x7c\x83\xb3\xc8\x5e\x78\x78\x95\x8d\x97\xd2\xaa\xf2\xb7\xb7\xe1\x73\x96\xa3\x36\xef\x20\x32\x06\x67\x99\xc9\x21\x92\xc0\x25\x9d\xf5\x21\x92\x09\x24\x0a\xed\x59\x91\x25\x91\x41\x50\x1a\xf8\x54\x2a\x8d\xa0\x24\xc4\x4a\xa6\x82\xc7\x86\xf9\x69\x21\x63\x08\x14\xfc\xb7\x2c\x1f\x02\x50\x55\x61\xe3\x26\x70\x66\xf6\x95\x28\x66\x32\x87\xcb\xab\xdc\x68\x2e\xa7\x7d\xb8\xbf\xe1\x06\x05\xcf\x0d\x30\xc6\xdc\x61\x08\xa8\xb5\xd2\x50\xfa\x9e\x46\x53\x68\x09\x8a\x39\x33\xc1\x44\x71\xc1\xde\xa1\x39\xd8\x0b\xc2\x3e\x74\x6c\xb6\x4c\x31\xc6\x42\xbf\xf2\x5b\x59\x0e\x5f\x96\x26\x0c\x23\xc9\xe3\x9c\xce\x6c\x68\x9b\xe7\x3d\xfc\xbe\xc4\x4b\xdf\xe3\x29\xf9\xa0\x0a\xfe\x40\xd6\xbf\xdb\xbb\xaf\x06\x20\xb9\x20\x63\x5e\x46\x81\x3b\x03\x17\x3a\xca\x0e\xb5\x0e\x50\xeb\x30\xf4\xbd\xaa\x83\xd0\x3a\x80\xa0\xa0\x86\xa3\xdf\xf8\x15\xe3\xc2\x28\xfd\x3d\x9d\xd1\x32\x9d\xfd\x20\x7a\xc3\x80\x1c\x83\x8d\xfe\x70\x11\xc2\x4f\x00\x94\xcc\xfe\x22\x20\x7f\x3a\x8e\x1b\x62\xf5\x72\xa8\x16\x8f\x8e\xa7\xa0\x60\xb0\x4c\xbd\x7e\x84\x56\x9e\xb3\x53\xbc\x0f\x7a\x65\xc9\x86\xb7\x53\x8a\xa4\xaa\x76\x41\x2a\x28\xcb\x16\xdf\x54\x15\x64\x5a\xdd\xf1\x04\x13\x48\x95\x86\xc2\x46\xd8\xb3\x58\xf9\x1e\x91\x15\x41\x24\x28\xe9\x9e\xe1\x33\xcc\x4d\x34\xcb\xae\x9d\xd6\xf5\x0d\x8a\x0c\x75\x0f\x18\x54\x4e\x9b\xa7\x20\x95\x01\x76\xaa\xde\x2b\x75\x9b\x5b\xc2\xeb\x14\x35\x51\x7b\x98\x2a\x8d\x0e\x08\xab\x64\xd1\x78\x58\xc4\x65\x26\x14\x8a\x8d\x04\x65\x62\xfd\xc8\x7f\x0e\x30\x8d\x0a\x61\x72\x32\xfa\xa5\x40\xcd\x31\x67\xa7\x4a\xfe\x8d\x5a\xd5\xa2\x31\x9a\xa0\x2c\x57\x79\xba\xaa\x6a\x80\x2f\xb8\xb9\xa9\x35\xfb\xa0\x42\xdf\xf7\xb6\xb7\x61\xaf\xe0\x22\x81\x38\x8a\x6f\x10\x6e\x71\x0e\x5c\x6e\x09\x2e\x11\x8a\xa9\xe0\x62\x0e\x5b\x30\x9b\xe7\x5f\x04\xdc\xe5\x90\xd1\xbf\x99\x56\x13\x81\xb3\xdc\xf7\x26\x45\x4a\x91\xe4\x46\xcf\x22\x39\x15\x48\x04\xb0\x57\xa4\x29\xea\x20\xf4\x3d\x82\xf5\xba\x0f\x31\xa9\xe8\x48\x4e\x71\xa5\xd6\x94\xed\xa4\x48\xd9\x85\xe6\x06\xc7\xb6\xc2\x41\x6c\x0b\xb0\x3c\xde\x9b\x1b\x0c\xde\xb2\xb7\x6b\xcd\x2d\x5b\xe4\xc5\xa6\x5a\xd0\x3e\x61\x8b\xc0\xd9\x1d\x00\x49\x6b\x41\xe8\x7b\xcb\xec\x87\x45\x93\xfd\xa4\x48\x43\xdb\x18\x0f\x0b\xe1\x3a\x60\x9f\xc0\x3e\x29\x0c\x3b\x3b\x56\xf1\x2d\x99\xb1\xf0\xf7\x5d\x15\x12\xf2\xf2\xcc\xe5\xcb\x5b\x9c\x5f\x6d\xe6\xe2\xb3\x14\xce\x89\xef\xdd\x45\xda\x36\x9c\x7d\x28\xbe\xed\xd1\x57\xb5\x4b\xca\xbb\x99\x3a\x1a\x4d\xb7\xb0\x1f\xac\xc0\x55\x8e\x5a\xcc\xf7\xbc\xb5\xae\x1b\xa6\x7a\x46\xde\x6e\xc3\x0d\x54\x55\x61\xda\xda\xcb\x62\xd9\x9f\x8b\x36\xa0\x5f\xa1\xef\x79\x35\x59\x75\x12\xf8\xdc\x6a\xbd\x97\x24\x30\xd4\x7c\x16\xe9\xf9\x47\x9c\xb7\x35\xbb\x34\x6d\xc3\x20\x34\x53\x10\x28\xeb\xe9\x1a\x12\x5d\xed\x58\x94\x9f\x67\xab\x42\xda\x15\xc9\xa8\x9a\x97\x56\xb9\xab\x0f\xb1\x2a\x44\x62\x49\x67\x62\x5f\x6f\x9d\x73\x6c\x43\x00\x42\x83\xb8\xcc\x92\x99\x6b\x2d\x46\x7c\x31\x87\x25\x6f\xd8\x57\xef\x5a\x65\x44\xa2\x93\xf9\x78\x74\x1c\x24\x3c\x12\x18\x9b\x3e\xf4\x56\x5c\xf6\x1a\xaa\xee\xd7\x23\x23\x5c\x58\xd6\xe8\x2c\xc0\x00\xd2\x99\x61\xe3\x4c\x73\x69\x52\x0b\x71\x6f\x7c\x78\x7c\xb8\x7f\x0e\xff\xc9\xe1\xe8\xec\xd3\x09\xe5\x71\x3c\xaa\xaa\x15\xdb\x65\xc9\xce\x46\x55\x05\x17\xef\x0f\xcf\x0e\xa1\x2c\xef\x6f\x50\xe3\xbe\x88\x8a\x1c\x81\x1d\x8f\x80\x9d\x8d\x60\xa7\xd9\x16\x87\x1f\x71\xce\x6a\xa8\x29\x2c\x72\xe3\xe6\x43\xce\xfe\x54\x5c\x06\xad\xae\x4d\x50\x9a\x51\xa1\x0c\x8e\x05\x8f\xb1\x49\x8e\x1d\x8f\xfa\xd0\xfc\xff\x6c\x64\xdb\x3d\xec\x43\xaf\xdf\x0b\x17\xb5\x73\x99\xdd\x45\xa2\xc0\x93\x28\xcb\xec\x48\xa2\x87\xd3\xc2\x8f\xcb\xa4\x16\xad\x65\xdc\xf3\x79\x86\xfd\xb5\xaf\x78\x61\x70\x09\x64\x3d\x2b\x5a\x73\xa0\x33\x08\x88\x7c\x9a\x76\xa2\x60\x49\xb1\xee\xa5\x45\x09\x7e\x5d\x98\xe4\x91\x5c\xad\x09\xb2\x1b\xa5\x0d\xb3\x72\x23\xd4\x42\x67\x09\x16\x53\x0b\xf4\x07\x99\x70\x8d\xb1\x09\x9a\x83\xbf\x48\xe3\x53\x1a\x28\xda\x50\xee\x22\xd1\x99\x6a\x56\x98\x1f\x69\x35\x6b\x82\xb7\x06\x6b\x82\xec\x14\x26\x74\xb4\xe6\x22\xa1\x15\x82\x4b\x83\x3a\x8d\x62\x2c\xdd\x14\x26\xd4\x56\x61\x6a\x41\xd8\x5c\x5c\x3a\x1f\x1a\xfd\xb8\xeb\x96\x0d\x97\x29\x4f\xdd\x4e\x73\x80\x93\x62\x7a\xa2\x12\xb4\x56\xe9\x25\x1c\xd9\x97\x20\x64\xb0\x94\xdb\xa9\xa2\x1b\x5b\xf6\x4d\x86\xcf\x6b\x13\x3a\x8b\xd5\xe4\x75\x1c\xc9\xe3\x28\x37\x8e\x93\x3f\x1c\xb4\xbe\xa4\xf6\x57\x24\x76\x0f\xb1\xeb\xc9\x83\x4b\x56\xa4\x31\xb7\x9b\x40\xbd\xa7\xd0\x46\x62\x57\xb3\xa0\x15\x9e\xf3\x6e\xbf\x57\xbc\xb2\x44\x51\x7f\xcf\x79\xd7\x4d\xa7\x6d\x70\xab\xd9\x61\xd6\xb4\x50\x97\x0b\x69\x6f\xa5\xa5\xd5\xf1\xcf\x53\x8c\x48\x33\x7c\x95\xa2\x16\x10\x3d\x9a\x30\x35\x8a\xa0\xd3\x03\xe0\xd2\xfc\xf6\xff\x4e\x70\x24\xe4\x44\x19\x3c\xe5\xa8\xf7\x95\x58\x6d\xa6\x27\xba\x69\x41\xee\x53\x65\x14\xd8\xd9\x5b\x2f\x83\xcf\xc6\xe4\xe2\x69\xd0\x74\x25\x61\x2d\xb5\x84\xd6\x83\x47\x81\x3b\xd4\x7a\x3c\x97\xf1\x51\xc4\xc5\xb2\x41\x94\xb0\xdf\xd4\xbb\x03\xe0\x32\xc1\xaf\xeb\xa8\x13\x76\x9a\xee\xd8\x02\xba\xd0\xea\xa2\x77\x58\x4f\x7a\x58\x58\xea\xa8\x9e\x73\x23\xdc\x8e\xb2\x90\xb7\xfe\x58\x40\x9a\x8a\xb9\x28\x9c\x66\x55\x81\x5d\x67\x62\x25\x18\xd1\x4d\x55\x05\x2e\x67\x97\x57\x5d\x0f\xfb\x1e\xdf\xbc\x79\x1c\xdf\xff\x91\x74\x55\x72\xb9\x73\x45\xb2\x27\xf8\xeb\xb2\xd7\x8d\xa5\x77\xf5\x78\x9d\x3a\xeb\xf6\x4a\x2b\x0c\xba\xcd\x40\x36\xca\xd2\x6d\x8f\xeb\xe0\xb5\x88\x59\x20\x58\x17\x9d\xbe\xbd\x88\x32\x71\x2a\x2f\x64\x90\x66\xf6\x6e\x40\x22\xdd\x7c\xdc\xd3\x24\xef\xad\x57\x6c\x4d\x9d\xa9\xfb\xa0\x6b\x7c\xdd\x5d\x36\x8e\x23\x3b\x8c\x88\x3b\x9d\xb1\x9f\xf0\xb8\x33\x95\x15\xf6\xa3\x2b\x71\x1b\x1e\x58\xea\xcd\x9f\x78\xed\xed\x12\xee\x3e\x58\x68\x37\x58\x8f\x9b\x05\xfc\x39\x5d\xbb\x70\xc3\xc0\xe1\xbe\x99\xe9\xc5\xe2\xed\x3d\xf1\x99\xb8\xf8\xfb\x51\xa2\xfe\x48\x0d\xea\x07\x9f\x88\x75\x57\x2e\x88\xb7\xbe\x20\xe9\xc1\x2f\xfb\xb5\xf2\xff\x0d\x00\x00\xff\xff\x19\xd2\xa7\x4c\xe2\x13\x00\x00")

func templates17_upsertTplBytes() ([]byte, error) {
	return bindataRead(
		_templates17_upsertTpl,
		"templates/17_upsert.tpl",
	)
}

func templates17_upsertTpl() (*asset, error) {
	bytes, err := templates17_upsertTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/17_upsert.tpl", size: 5090, mode: os.FileMode(420), modTime: time.Unix(1527188625, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_testSingletonMysql_main_testTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x5b\x6f\xdb\x3a\x12\x7e\x96\x7e\xc5\xac\x81\x9c\x95\x72\x14\xa6\x40\x81\x7d\x48\x61\x04\x8d\xe3\x14\x41\x9b\x4b\xed\xec\x16\x8b\xa6\xd8\x32\xd2\x38\x21\x2a\x91\x0a\x49\xc5\xf1\x06\xf9\xef\x8b\x21\x75\x73\x62\x19\x2d\xd0\x7d\x3b\x4f\xad\x38\x1f\xe7\xf2\x0d\xe7\xe2\x3c\x70\x0d\xfa\xf6\xf1\x6c\x35\xff\xfc\xe9\x07\xae\x60\x0c\x1a\x6f\xf1\xb1\x64\x67\x95\xb1\x13\x55\x94\x22\xc7\xe8\x7b\x74\x58\xc4\x51\x94\x5c\xcb\xf8\xf0\xda\xfc\x39\xb9\x38\x9f\x5f\xcd\xde\x9f\x9e\x5f\xb1\xdd\xc3\x93\x8b\xd9\xf4\xf4\xc3\x39\x7c\x9c\xfe\x9b\xed\x1e\x5e\xcb\xf8\xcf\xef\x71\x18\xda\x55\x89\x50\xac\xcc\x7d\x7e\x85\xc6\xa2\x06\x63\x75\x95\x5a\x78\x0a\x83\xec\x66\xa2\xa4\x84\x5d\x73\x9f\xb3\xe3\xa3\x90\x0e\xce\x79\x81\x81\xb1\x5a\xc8\xdb\x30\xb8\x53\xc6\xb6\x1f\x95\x41\xdd\x7e\x94\xdc\x98\xf6\xc3\x98\xbc\x50\x59\x77\xad\x54\xda\x06\x42\xda\x30\x0c\x54\x69\x85\x92\x27\x22\x47\xa8\xa5\x61\x60\xd1\xd8\xe3\x23\x32\xd4\x9c\x3d\x87\xe1\xa2\x92\x29\x08\x29\x6c\x14\x7b\xcf\xce\xb8\x90\x30\x86\x3f\x7a\x9e\x3f\x3d\xb7\xc8\xa8\x80\xdd\x9e\x24\x06\x83\xb6\x2a\xa3\x18\x50\x6b\xa5\x49\x03\xb1\x89\x5a\xfb\x83\x30\x0c\x1e\x44\x89\x9a\xcd\xd1\x1e\xe3\x82\x57\xb9\x8d\x46\xee\x3e\xab\x9d\x1f\x25\x30\xb2\xba\xc2\x51\x3c\x0c\xa5\xb8\x46\x09\xbc\x7d\xfb\xe6\x1f\x71\x18\x06\x05\xf3\x74\xc1\x18\xfc\x8d\x0f\x68\xe7\x2e\xa0\xe6\x42\x76\x23\x79\xe1\x54\x16\x8c\xb8\x1c\x46\x92\xd4\xe3\x88\xe6\x61\x1c\x49\x3d\x8e\x32\x30\x8c\x23\x69\x8d\x53\x7a\xcd\xee\xa9\x5c\x8f\xc7\x81\x6a\x12\x86\xf5\x35\x2c\x51\xdc\xc4\xea\x18\x1e\x78\xce\xd9\x11\xde\x0a\xf9\x2f\x9e\x8b\x8c\x53\x9e\xa3\x98\xd5\x1f\x18\x85\x41\xe0\x20\x5e\xcf\xb9\xb2\xd3\xa2\xb4\xab\xc8\x07\x98\xc0\x5a\x3c\xc9\x20\x98\x78\x69\xc1\x9e\xa4\x16\x7c\xae\x6c\xe4\xfe\x33\xbd\xaf\x78\x6e\x22\x1f\x6b\x02\x6f\xda\x0b\x3e\xc0\x2d\xea\x7d\x02\x5b\x7c\x93\xaf\xe1\x0b\x35\x0f\xed\x8d\x96\x97\x24\x0c\x62\x36\xb9\xc3\xf4\x47\x44\x1c\x89\x85\x7b\x7c\x7f\x1b\x83\x14\x39\x3d\xc7\x40\xa3\xad\xb4\xa4\xd3\x30\x78\x0e\xc3\x60\x7f\x1f\x26\x1a\xb9\x45\xe0\xa0\xb9\xcc\x54\x21\xfe\x8b\x19\x64\x37\x40\x3e\x30\xca\x4a\xaf\x50\xc6\x1d\x86\xcd\x2d\xbf\xc9\xd1\x0b\xda\x18\x7a\x46\xc7\x50\xb0\x82\xff\xc0\x8b\xb6\xf6\xa2\xf8\xdd\xb0\x3b\x4a\x1b\xf6\x45\xf3\x32\x42\x4d\x79\x49\x55\x95\x67\xf2\xef\x16\x48\x05\xf8\xfa\x85\x85\xc8\xdd\x33\x7e\x5e\xb7\x92\x69\x55\x5e\x39\x27\xb7\x5a\xa0\x7b\xfd\x6b\xa9\x8b\xfb\x27\x2f\x86\x41\x56\x15\xe5\xa4\xc8\xe0\x60\x0c\xf8\x88\x29\x9b\xa8\xa2\xe0\x32\xab\x9f\x26\x49\x47\x09\x39\xe3\x8b\xd5\xf8\x80\x13\x18\xed\xed\x49\xb5\x97\x71\xcb\xbd\xb8\xa6\x29\xf0\xd6\x87\x15\x0e\x29\x23\x4d\x37\xdc\xa0\x93\x77\xa9\x21\xe2\x75\x02\x4b\xd2\x26\x14\xbb\x14\x25\x46\x71\xeb\x34\x9b\xdb\x4c\x55\x54\x80\xcb\x9e\x65\x3a\x75\xdd\x4d\xe2\xf2\xe4\x23\xae\x8e\xd1\x58\xad\x56\xa8\xa3\x5e\xff\x4f\x40\xaf\x25\xb5\xd3\xc8\xb5\xfd\x95\x8c\x2e\xb8\xc8\x31\x03\xab\xc0\xd0\x55\x68\x69\x83\xd4\x07\xee\x33\xdb\x59\xea\xfb\xf9\x3b\x6c\xad\xdb\xd9\x10\xd2\x17\x2e\x36\x59\x59\x14\x96\x5d\x6a\x21\x6d\x2e\x49\x7d\xfc\x73\x86\x97\x5c\x58\x58\x28\x3d\x14\x67\x18\x2c\xd9\x24\x57\x06\xa3\x18\xf6\xf7\xe1\xfd\x82\x66\x62\xf3\xc6\x84\x81\x4c\x49\x4c\x20\x25\x04\xd8\x3b\x84\xa5\x16\x16\x01\x65\x06\x6a\xe1\x0e\x4a\x51\x62\xb8\x91\xae\xff\x63\x1c\x2f\x63\xa8\x15\x48\x91\x6f\x99\x89\x26\x3f\x53\x19\x46\xae\xb5\xfb\x51\x1b\xd7\xff\x92\x5f\x66\x29\x6c\x7a\x07\x4e\xfa\x14\x06\x29\x37\x58\xcf\xc0\x83\xce\xc3\xd1\x6c\xfa\xf9\x9f\xa7\xb3\xe9\xf1\xa8\x41\x2c\x78\x6e\xd6\x21\xc7\xa7\xf3\xf7\x47\x9f\x1c\xa4\xae\x9b\xbe\xf4\x72\x36\x3d\x99\xce\xbc\x86\x2d\x03\x7c\xbd\xe2\x7a\x6e\xd6\x7a\x88\xc4\x79\x49\x2c\x2e\x22\xaa\xc6\x1a\xbe\x47\xad\x69\xbc\x63\x5c\x55\x76\xdb\x46\x3c\x6c\xe8\x65\x6b\xec\x56\x06\x5b\x94\x89\xcb\x9d\x2b\xe5\xca\x8a\x9c\x5d\x61\x51\x3a\xd8\x88\x16\x04\xaf\xbf\x69\x86\xdb\x7a\xfc\x60\x56\xfd\x63\xd9\xd8\x57\xcd\xd5\xe4\x92\x4c\x3b\x82\xc3\xe0\x3f\x49\xfd\xbe\x94\xa1\x3a\xb4\xf5\x34\xf4\x86\x95\x61\xa7\x86\xe6\xd2\xa3\x30\xd6\x3d\x2a\xe7\x80\xd7\x31\x06\xca\x62\x18\x3c\x03\xe6\x06\xe1\x17\xfc\x74\xcd\x1f\xa4\xb2\x54\xbe\x16\x8a\x76\x2f\x21\x07\x29\x03\x27\x65\xfd\x8e\x1d\x57\xa3\xaf\x69\x2e\x50\xda\x6f\x04\xe9\xc4\x8b\x5a\x4a\x97\xc7\x3b\xe6\x5a\xba\xe4\xd4\xce\xbf\x86\xd1\x94\x1e\xef\x64\x35\x8c\xbe\x36\xc2\x68\x55\xe8\xb4\xd1\xd7\x66\x6d\xdc\x98\xa5\xd2\x59\x07\xa5\x93\x8d\x50\x63\xf2\x3d\x7a\xfd\x1d\xb4\xad\x98\x66\xb0\xc7\x9e\x6e\xcf\x6b\x53\xcb\x2f\x48\x28\xb5\xb2\x2a\x55\xf9\xd8\xa6\xe5\x36\xae\xda\x7e\xf4\x17\x5d\x2f\xe9\xea\x97\x2e\x3d\xdf\xa2\x64\x6e\xbb\x89\xbb\x4e\x47\x67\x75\xdb\x1e\xae\xed\xf5\xcd\xa2\xab\x6c\x6a\xa0\x54\x59\xfd\x1e\x52\x57\x62\x33\xd6\x61\xc7\xbc\x7b\x35\xda\x1b\xe3\x05\xd3\x95\x9c\x14\x59\x64\xee\xf3\x66\xf7\x1b\x6d\xf1\xa3\xbf\x18\x6d\xf7\x82\x90\x9d\x0f\x54\xaa\x54\xd1\xe6\xb7\x7a\x63\x91\xeb\x4c\x2d\x65\xdf\x17\xb1\x70\x3b\x91\xfb\xfd\xd7\xeb\x0c\xcd\x59\x4b\x75\x7f\x60\x1f\xfc\xe2\xce\xd7\x3a\xac\x0c\x9b\x61\xa1\x1e\xe8\xa5\xfc\x54\x8f\x6e\xe2\xa3\x35\x29\x69\x46\x5f\x3d\x13\x12\xe0\xfa\xd6\x00\x63\xac\x19\x69\x6d\x50\x4e\x30\x06\x5e\x96\x28\xb3\xe8\xeb\x37\x0f\x78\x7a\xb9\xce\x3d\x7b\x15\x8c\x31\x7a\x5f\xe9\x86\x4d\xb0\xb6\xd8\xc3\x11\xac\x5d\xdb\xbc\x5e\xc3\xce\x71\x39\x43\x9e\xa1\xf6\x9e\x92\x36\xe3\xf7\xbd\x83\x31\xfc\x71\xb3\xb2\x68\xd8\x51\xb5\x58\xb8\x9f\xae\x24\xaa\x59\x7c\x25\x4a\xfb\x9b\xa2\x57\xd1\x1e\xfa\x21\xe0\x2f\xf7\x53\x41\xe2\x59\x25\x5f\x67\xa1\xbf\x6e\x34\x93\x47\x57\x52\x0a\x79\x7b\x30\x6a\xd9\xf4\xb1\xc5\xeb\x70\x6f\xba\xfe\xd9\x13\xc5\xaf\xa5\xa8\x75\x5f\x3a\x90\xef\xad\x5b\x49\xaa\x24\xbd\xc4\xa8\xfe\xab\x43\xe2\xd3\x17\x0f\x3f\xca\xf6\xd5\x7b\x49\xe2\xd4\x3b\x73\xeb\xbf\xf1\x83\x0e\x51\x73\x76\x9f\xb3\x8b\x12\x65\xb7\xd8\x67\x5a\x3c\xa0\x66\x6e\xc5\x3e\xaa\x44\x9e\x7d\xae\x50\xaf\xea\x80\x9a\x9f\xa6\xbe\x05\xae\x17\x5f\xd3\x91\x9b\x96\x5b\x77\xbf\x5e\xcf\x5b\xcf\x41\x47\x44\xf2\x8a\x9d\xf5\x40\x9e\xc3\xff\x05\x00\x00\xff\xff\xaa\xfc\xbe\x6b\xf8\x11\x00\x00")

func templates_testSingletonMysql_main_testTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonMysql_main_testTpl,
		"templates_test/singleton/mysql_main_test.tpl",
	)
}

func templates_testSingletonMysql_main_testTpl() (*asset, error) {
	bytes, err := templates_testSingletonMysql_main_testTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/mysql_main_test.tpl", size: 4600, mode: os.FileMode(420), modTime: time.Unix(1527187183, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_testSingletonMysql_suites_testTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\xb1\x8e\x83\x30\x10\x44\x7b\xbe\x62\x84\x28\xe0\x04\xfe\x80\x93\xae\xba\xea\xae\x48\x11\x91\x0f\x70\xc2\x82\x2c\x39\x1b\x84\x17\x29\x92\xf1\xbf\x47\x18\x8b\x90\xce\xe3\x99\xb7\x3b\xdb\xcf\x7c\x43\x4b\x4e\x2e\xa3\xa3\x49\x4a\xc1\x97\x90\x13\xc3\x83\x6a\x2b\xf8\x0c\xf0\xbe\xc1\xa4\x79\x20\x14\x86\x3b\x7a\xd6\x28\x44\x5f\x2d\xe1\xfb\x07\xaa\x5d\x5f\x2e\x84\x94\x33\x7d\x32\xd5\x9f\xfb\x7f\x18\x8e\x36\x9a\xdd\x27\xeb\x8e\x72\xcb\x9e\xf4\x3d\x0e\x4b\x64\x94\x0b\x46\x3b\x4f\xda\x62\x81\x18\xb1\xf4\xab\x77\x50\xd4\x79\xe6\x32\xf7\xfe\x4d\x87\x90\xd7\x58\x6b\x7f\x7e\x6e\x27\x55\x71\x19\x71\x77\xec\x91\x54\xc8\x5e\x01\x00\x00\xff\xff\x2f\xea\xf2\xb5\x00\x01\x00\x00")

func templates_testSingletonMysql_suites_testTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonMysql_suites_testTpl,
		"templates_test/singleton/mysql_suites_test.tpl",
	)
}

func templates_testSingletonMysql_suites_testTpl() (*asset, error) {
	bytes, err := templates_testSingletonMysql_suites_testTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/mysql_suites_test.tpl", size: 256, mode: os.FileMode(420), modTime: time.Unix(1527187000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_testUpsertTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x93\x5f\x6f\xda\x30\x14\xc5\x9f\xe3\x4f\x71\x17\x6d\x53\x32\xa5\xae\xf6\xda\x89\x87\x96\xf2\x30\x4d\x43\xa8\x84\x0f\x60\x92\x1b\x6a\xe1\xd8\x91\x7d\x53\x60\x69\xbe\xfb\xe4\x00\x2d\x7f\x82\xc4\x4b\xa5\x3e\xc0\xc3\xf5\x39\xd7\x3f\x1f\x0e\x4d\x73\x03\x5f\x49\xcc\x15\x8e\x45\x89\x53\xa9\x17\xb5\x12\x16\xee\x06\xc0\x53\x3f\xe5\x7e\x0c\xaf\xe0\xf6\x27\xaf\x40\x92\x14\x0e\x85\x43\xb8\x69\x5b\x76\xbc\x60\xa2\x6a\x2b\xd4\xb9\xbd\xda\xce\x7b\xcd\x2f\xc2\x5e\x65\xcd\x44\x89\xaa\xd7\x7a\x15\xf6\xb1\xbd\xa8\x75\x06\x84\x8e\x9a\xe6\x94\xbe\x6d\x67\x95\x43\x4b\x11\xc1\x0f\xaf\x90\x7a\xc1\xd3\x18\x1a\x16\x10\x9f\x08\x2b\x94\x42\x15\xc5\x8c\x05\xb2\x00\x85\x3a\x6a\x9a\x53\x8e\xb6\x1d\x1a\x55\x97\xda\xc5\x30\x18\x5c\xd4\x4c\xac\x2c\x85\xdd\xfc\xc1\xcd\x9b\xba\x61\x41\x40\x7c\xba\x94\x55\x14\xfa\xef\x4a\xea\x05\x74\x78\xb0\x92\xf4\x0c\x46\xab\x0d\x54\x5b\x1f\x2c\x71\x03\xd9\xd6\x19\xc6\x2c\x68\x19\x0b\x1c\x62\xee\x43\xb0\x42\xe7\xa6\x94\xff\x90\x8f\x71\x35\x45\xcc\xa3\x98\x05\x2f\xc2\x02\xda\xee\x63\x2c\x0b\x6e\x6f\xe1\x9e\x08\xcb\x8a\x80\x9e\x11\x7e\x8f\xa7\xa3\xa7\x14\x9c\xcc\x11\x4c\x01\x42\xc3\x6c\xe2\x27\x2c\xe8\x63\xf7\x97\x1c\x26\xf7\x7e\xd2\xb4\x5d\x30\xfe\xa2\x43\x8e\x29\xd9\x3a\xa3\xc8\x03\x26\xf0\xbd\x6f\x65\x02\x7d\xd3\xc7\x87\x74\x53\xa1\x4b\x80\x6c\x8d\xf1\xaf\x6e\xef\x97\x01\x68\xa9\x76\x61\x8d\xfc\x6b\x8a\x28\x9c\xe9\x2e\x26\x32\xef\x97\x5e\x20\x04\xd7\xb1\xdc\xc1\x37\x17\x26\x7e\xe1\x2e\x3c\x5a\xfb\x57\xfd\xad\x1d\xa5\xeb\x68\x6e\xa4\xe2\x0f\xb8\x90\x3a\x8a\x63\x16\xe4\x58\xa0\x05\x5a\xf3\x27\xa3\xd4\x5c\x64\x4b\x1f\xe8\xdb\x33\xfb\xc0\xf9\xbe\x44\xeb\xc4\xd3\x5e\x87\x5e\x77\x9e\x0b\xdc\x67\xc0\x99\xa9\x35\x75\x83\xd3\x9f\x63\x5f\xe4\x88\xd6\x31\x1f\x7a\xd9\x01\xef\x39\x43\xb4\xdf\xe9\x25\xdd\x56\x2f\xfa\x79\x24\x09\x57\x42\x13\x18\x8d\x60\x31\x33\x36\x4f\x60\x61\xe8\x2e\x4c\xb6\xfa\x1d\xd1\x49\xa7\x66\x93\xc7\xfb\x74\xd4\xd7\xa9\x8f\x68\x48\x21\x94\xc3\x7e\xcd\xd9\x5f\x8d\x73\xfe\xb1\x65\xfa\x44\xdd\xf8\x0c\xd5\x68\xd9\xff\x00\x00\x00\xff\xff\x6a\x24\xbf\xe5\x69\x06\x00\x00")

func templates_testUpsertTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testUpsertTpl,
		"templates_test/upsert.tpl",
	)
}

func templates_testUpsertTpl() (*asset, error) {
	bytes, err := templates_testUpsertTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/upsert.tpl", size: 1641, mode: os.FileMode(420), modTime: time.Unix(1527186185, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/17_upsert.tpl": templates17_upsertTpl,
	"templates_test/singleton/mysql_main_test.tpl": templates_testSingletonMysql_main_testTpl,
	"templates_test/singleton/mysql_suites_test.tpl": templates_testSingletonMysql_suites_testTpl,
	"templates_test/upsert.tpl": templates_testUpsertTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"17_upsert.tpl": &bintree{templates17_upsertTpl, map[string]*bintree{}},
	}},
	"templates_test": &bintree{nil, map[string]*bintree{
		"singleton": &bintree{nil, map[string]*bintree{
			"mysql_main_test.tpl": &bintree{templates_testSingletonMysql_main_testTpl, map[string]*bintree{}},
			"mysql_suites_test.tpl": &bintree{templates_testSingletonMysql_suites_testTpl, map[string]*bintree{}},
		}},
		"upsert.tpl": &bintree{templates_testUpsertTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

