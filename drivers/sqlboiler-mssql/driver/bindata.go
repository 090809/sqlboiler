// Code generated by go-bindata. DO NOT EDIT.
// sources:
// override/templates/17_upsert.go.tpl (5.894kB)
// override/templates/singleton/mssql_upsert.go.tpl (1.357kB)
// override/templates_test/singleton/mssql_main_test.go.tpl (3.945kB)
// override/templates_test/singleton/mssql_suites_test.go.tpl (255B)
// override/templates_test/upsert.go.tpl (1.723kB)

package driver

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templates17_upsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x51\x6f\xe3\xb8\x11\x7e\x96\x7e\xc5\x5c\x50\xdc\x4a\xad\xa3\xb4\xaf\x29\xfc\x90\x6c\xf6\xb6\xc1\x5d\x52\xdf\xfa\xd2\x00\x0d\x82\x80\x96\x46\x36\x11\x9a\xd4\x52\x94\x1d\x57\xd5\x7f\x2f\x86\xa4\x2c\xd9\xb1\x13\x67\x6f\x53\xdc\xc3\x22\x96\x38\x9a\xf9\xf8\x7d\xc3\x19\xce\xd6\xf5\x31\xfc\x89\x09\xce\x4a\x38\x1d\x42\x72\x46\xbf\xb0\x4c\x7e\x63\x13\x81\xe0\xfe\x24\xd7\x6c\x8e\x4d\x13\x5a\xd3\x32\x9d\xe1\x9c\xb9\x65\xfa\xa0\xb3\x80\xff\x42\x32\xee\x56\xed\x07\x3c\x87\xe4\x2c\xcb\x3e\x0b\x35\x61\x02\x8e\x9b\x26\x3c\x39\x81\x9b\xa2\x44\x6d\x3e\x03\x33\x06\xe7\x85\x29\x81\x49\xe0\x92\xde\x0d\x80\xc9\x0c\x32\x85\xf6\x5d\x55\x64\xcc\x20\x28\x0d\x7c\x2a\x95\x46\x50\x12\x52\x25\x73\xc1\x53\x93\x84\x79\x25\x53\x88\x14\xfc\xb9\xae\x1d\xfe\xe4\xa6\x18\x73\x39\xad\x04\xd3\x4d\x13\xb7\x51\x22\x0b\x42\x2a\x03\xc9\xb5\xfa\xa8\xa4\xc1\x27\xd3\x34\xa9\x79\x22\x57\xf4\x90\xf8\x97\x03\xa8\x6b\x94\x19\x81\xf4\x91\x3f\x2a\x51\xcd\x65\x39\xf0\xe0\xfc\x23\x4c\x14\x17\x89\x7f\x88\x01\xb5\x56\x1a\xea\x30\xd0\x68\x2a\x2d\x41\x25\x2e\xb0\x8b\xdb\x8f\x69\xbf\xfb\x8c\xe6\xe2\x3c\x8a\xeb\x1a\x45\x89\x16\xc7\x00\xda\x05\x6f\xe9\xd7\x65\xd6\x34\x83\x17\x91\xc4\x61\x13\x86\x6b\xd0\xa1\xa3\x9b\x08\xec\x51\x4e\x3f\x47\x4c\xf2\x74\x8b\xfc\xd1\xef\x63\x1f\xac\xcf\x92\xde\x59\x02\x0e\x96\x63\xf4\xde\x7a\xd4\x61\xc0\x73\x02\x45\xd9\xf9\xff\x14\xe3\xef\x36\xe8\x0f\x43\x90\x5c\x10\x8a\xa0\x20\x8a\x22\xeb\xef\x56\xb3\xe2\x93\xd6\x11\x6a\x1d\xc7\x61\xd0\xec\x12\x6e\x8f\x52\xbb\x84\x82\xaa\xe4\x72\x4a\xcf\xf8\x84\x69\x65\x94\x7e\xcb\xc1\xe9\xb9\x2e\xbe\x4d\xc5\xd1\x73\x3e\x09\x88\xe3\xee\x93\x87\xd4\x63\xf5\xb9\xb4\x9d\xb9\x7f\xd5\xfb\xea\x75\xae\x0f\x97\x7c\x47\x9e\xf5\xf3\x8a\x60\xbc\x9f\xac\x6b\xa2\xbf\xbb\x84\x87\xc9\xf4\xc7\x52\x69\x5d\x28\x79\x0e\x0a\x86\x1d\xa1\xbe\x70\xda\xf5\x32\xb9\xc6\x65\x74\x54\xd7\xc9\xe8\x71\xea\xda\xce\x29\x48\x05\x75\xbd\xd1\x8a\xa0\xd0\x6a\xc1\x33\xcc\x20\x57\x1a\x2a\xbb\xdb\x23\xab\x40\x18\x50\x97\x22\xb6\x05\xf1\x77\x64\xf8\x1c\x4b\xc3\xe6\xc5\x83\xb3\x7a\x98\xa1\x28\x50\x1f\x41\x02\x8d\xb3\xee\xb2\xe4\x1f\x4a\x3d\x96\x56\xba\x8d\x7c\xca\xd4\x39\xe6\x4a\xa3\x23\xd5\x1a\x1d\x9c\x5c\xcf\xd3\xa7\xdb\x2d\xc1\xb5\x68\x2d\x97\x61\x18\xc8\xff\x5c\x60\xce\x2a\x61\x6c\x2b\xfe\x5a\xa1\xe6\x58\x26\xd7\x4a\xfe\x1b\xb5\xf2\x4b\x63\x24\x59\xbd\xe8\x17\x6a\x29\x3b\xd9\x3d\xd3\xb7\xdc\xcc\xbc\xf1\x00\x54\x1c\x86\xc1\xc9\x09\x9c\x57\x5c\x64\x90\xb2\x74\x86\xf0\x88\x2b\xe0\xf2\x58\x70\x89\x50\x4d\x05\x17\x2b\x38\x86\xf9\xaa\xfc\x2a\x60\x51\x42\x41\x7f\x0b\xad\x26\x02\xe7\x65\x18\x4c\xaa\x9c\xc0\x94\x46\xcf\x99\x9c\x0a\xa4\xd2\x78\x5e\xe5\x39\xea\x28\xb6\xab\xc9\xad\xe6\x06\xc7\x46\x73\x39\x8d\x4a\xa3\x53\x25\x17\xc9\xa5\x51\x2c\xda\xc8\x8d\xe4\x67\x2e\x33\x3a\x24\x24\xd8\xc3\x00\x52\xf2\xaa\x99\x9c\xe2\x66\x0e\x51\xbe\x94\x96\xa8\x6d\xdf\xa9\xd5\xb7\x7b\x7d\xbe\x32\x18\x7d\x48\x3e\xbc\x06\x63\x23\x27\x5f\x80\xb1\x69\xf7\x2d\x30\x9e\xfb\xec\x29\xfa\x82\x2f\x12\xe4\x74\x08\xb4\xea\x17\xe2\x30\xe8\x18\x1f\x55\x2d\xe3\x93\x2a\x8f\x6d\xce\xee\xd4\xdf\xe5\xe7\x47\xd2\xf8\xaa\x32\xc9\x97\x5f\x54\xfa\x48\x9e\xac\xea\x03\x27\x7e\x46\x81\x5e\xff\xfe\xee\x11\x57\xf7\x07\x07\xba\x91\xc2\x85\x0a\x83\x05\xd3\x36\xe1\xed\x61\x0e\xed\x39\xfa\xc1\x07\x26\x02\xda\x7b\x86\x46\x43\x40\x36\x29\xbf\xec\x3d\x51\x9a\x87\x41\xb0\x0f\xc1\x99\x10\x6d\xcd\x79\xc1\x6a\xc7\x81\x38\xcc\x5a\x55\xa6\xff\x41\xa7\x22\x3d\xc6\xeb\x7d\x40\xff\x5c\x8c\xe9\xca\x30\x2f\x04\xce\x51\x9a\xa8\xdd\xe8\xeb\xb1\xce\x2a\xa3\xc8\x25\x25\x0f\x1f\xc0\x62\x3b\x21\x2d\x6f\xc4\x63\x17\x8a\x0a\x0e\xe3\xb2\x3c\x93\xab\x7d\xb5\x60\xa4\xf9\x9c\xe9\xd5\xcf\xb8\x5a\xd7\xe6\x45\x0c\x3f\xfe\xf8\x36\x2f\xbb\x2a\xca\x22\x76\x88\x3a\x0e\x58\x51\xa0\xcc\xfc\x96\xef\x4e\xf9\x7d\xdb\x07\xee\xf8\x5f\xfe\x76\x7a\x9f\x24\x09\xed\x8f\x12\xdd\xfe\xe3\x39\x08\x94\xde\x3c\xa6\x46\xf0\x57\xe7\xf1\xd5\x3e\x50\x49\x3b\x75\x18\xe5\x2b\xfe\x76\x57\x18\x40\xaa\x2a\x91\xd9\xba\x3c\xb1\x05\xcf\x63\x4c\xed\x3e\x40\xf0\xd2\x76\x09\xdb\x26\x28\xdc\xb6\x80\x57\xa8\xa7\x18\x69\x7c\x93\x70\xbf\xd7\x8f\x67\x96\x4e\x4f\xe0\xbb\xfe\xe9\x70\xab\x28\xde\xf4\x9e\xbe\xcb\xd1\x78\x9e\x1f\x3e\xb3\x3d\x82\xfd\x99\xed\x0c\x0e\x27\xa8\x53\xdc\x7d\xf9\xce\x8a\x7b\xfc\x3b\x15\xb7\x85\x28\xa1\xbe\xba\x82\xa1\xb3\x77\xa5\xec\x57\x7a\x75\x35\x1e\xff\xfa\x4b\x94\x71\x26\x30\x35\x03\x38\xaa\xeb\xfe\xac\xdb\x34\x47\x7b\xf7\xbc\xe3\xb0\xb5\x2c\xf5\x0a\x9e\xa5\x62\x39\xe3\x06\x09\x15\x69\x3c\x67\x8f\x18\xdd\xdd\x97\xb6\xe6\x0f\x2c\x47\x87\x46\xa0\x16\x16\xa4\xaa\x58\x45\x6b\x8f\x87\xc3\x8b\x37\x80\xac\x0f\x70\xcf\x93\x83\xef\x4f\xee\xcb\xa6\x6e\x87\xd6\x74\x4d\xf1\x82\x89\x0a\xaf\x58\x51\xd8\x7d\x51\x3f\xe8\xae\x33\xe7\x5c\x66\x7e\x69\xdf\x6e\x7f\x5b\x15\xfb\x13\x6c\xed\x76\x8d\x21\x76\x29\xb6\x75\xcf\xda\xb8\x68\xf5\x0b\x0f\x49\x41\x86\x3e\x07\x1d\x62\x8d\xe6\xbd\xf1\xda\x14\x08\x76\x42\xdd\xc4\xda\x56\xca\xc6\xf6\x53\x51\xd9\x7a\xa0\x31\xa7\xbc\x4c\x2e\x65\xc6\x35\xa6\x26\x6a\x5f\xfc\x8b\x2c\xfe\x99\x47\x8a\x52\x62\xc1\xc4\xc6\xdd\xd1\x2e\x96\x3f\x69\x35\x6f\xb7\x60\x1d\xfa\xcb\xc0\x86\x4e\xb1\x6b\xde\x0e\x49\x09\x77\xf7\x5c\x1a\xd4\x39\x4b\xb1\x76\xf7\x61\xe2\x6e\x9b\xac\x1e\x91\xed\x87\x5d\xf0\x91\xd1\xfb\x43\xf7\x7c\xb4\xd7\xf6\x8d\x59\x65\x7d\x0d\xb7\x43\xc4\x05\x4e\xaa\xe9\x95\xca\xd0\x86\xca\xe7\x26\xf9\xa9\xd0\x5c\x1a\x21\xa3\x6e\xdd\xde\xac\x74\x1b\xc0\x1e\xf3\xf8\x75\x6b\xa2\x2c\xf6\x57\x71\x1a\x85\x36\x03\x5f\x96\xd6\x38\x4a\xcd\x93\xeb\x7b\x4b\xfb\x99\xbd\xae\x6d\xb9\xa2\xad\x5a\xbb\xed\x98\xcb\x03\x70\x2d\x77\xa1\x69\xe7\xc8\x03\xd8\xdf\xc9\x5e\xe0\x32\x99\xe6\x90\xc4\x96\xb8\x2f\x6a\x19\xf5\x50\xb8\x70\x74\x74\x93\x71\xca\xec\xc9\x20\x09\xfd\xb1\xef\xd3\xb1\xcb\x93\x0f\x15\xd9\xa9\xe7\x2d\x5e\xfd\xb6\xd6\x27\x61\x38\x84\xf2\xab\x48\x3e\x69\x7d\xad\xbe\xa8\xa5\xbb\x2a\xfb\x88\x74\x44\x4e\x4e\xc0\xd6\x66\x3b\x1b\xcb\x0f\xc6\xe7\x28\x30\xb9\x32\x33\x1a\xa2\x97\x33\x94\x60\x66\xa8\xf1\x43\x49\xc3\xa2\xab\x5e\xfe\x10\x81\xdd\xc5\x7e\x8e\x1e\xda\x03\x6f\x37\x47\x03\xee\x6e\x8a\xb6\x19\x79\xfe\xdd\xeb\x84\x6c\xee\xbf\x1b\x33\x77\x8e\x87\xd4\x12\x6f\x35\x2b\x22\xd4\xda\xb6\xa3\xb7\x34\xc6\x76\x18\xde\xba\x7f\x1f\x76\xa1\x6f\x07\x87\x03\xcc\xed\xa0\x00\x43\xb7\xdd\x83\x03\xac\x07\x86\xe0\x85\x11\x7c\xfd\xff\xa9\x99\x3a\xcb\x0d\xea\x6f\x1a\xbf\xfd\x80\xbd\x96\xcd\x3b\x95\x5c\xf4\x47\xef\x26\xfc\x5f\x00\x00\x00\xff\xff\xda\x71\x18\x40\x06\x17\x00\x00")

func templates17_upsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates17_upsertGoTpl,
		"templates/17_upsert.go.tpl",
	)
}

func templates17_upsertGoTpl() (*asset, error) {
	bytes, err := templates17_upsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/17_upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x33, 0x7d, 0xf6, 0xc4, 0x3e, 0xf1, 0x5a, 0x5, 0x6b, 0x39, 0xbf, 0xeb, 0xc9, 0xea, 0x4e, 0xeb, 0x64, 0x9b, 0xd2, 0x5e, 0x82, 0x78, 0xd3, 0xd, 0x4e, 0xd1, 0xc9, 0x2, 0x8b, 0x23, 0xb9, 0xfe}}
	return a, nil
}

var _templatesSingletonMssql_upsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x53\x4d\x6f\xda\x40\x10\x3d\x7b\x7f\xc5\xd4\x52\x24\xaf\xb2\x72\x9a\x6b\x23\x2a\xd1\xe0\x26\x54\xc4\x40\x6c\xda\x03\xe1\xb0\xe0\x31\x59\xc9\x2c\x68\x3f\x50\xa3\x2a\xff\xbd\x1a\xdb\x94\xcf\x4a\x55\x2f\xe0\x9d\x8f\xa7\x37\xef\xcd\xdc\xdc\xc0\xdc\xab\xaa\x98\x6c\x2c\x1a\x37\xf6\x68\xde\x9e\xb2\x6c\x3c\x68\xa2\x16\x24\xd0\xc3\x3a\xe9\x70\x85\xda\x81\x75\x46\xe9\x25\x78\x4b\xbf\xee\x15\xc1\xd7\x8d\x3d\xe9\x24\x6c\xcc\x7a\xab\x0a\x2c\x62\x56\x7a\xbd\xb8\x8c\x1b\x15\x4a\x42\x61\xd4\x16\x8d\x8d\x7b\x4a\x56\xb8\x70\x02\x9c\x9c\x57\x98\xca\x15\xb6\xf8\x02\x36\x46\xad\xa4\x79\x13\xe0\x37\x85\x74\x28\x40\x69\x02\x82\xe9\x6c\x57\xb1\xf6\x6e\xe3\xf7\x01\xbe\xa3\xf6\x8b\x05\x6d\x6d\x87\x42\x2b\xa9\x97\x15\xc6\xfd\x02\xb5\x1b\xfb\xb5\xc3\xac\x52\x0b\x24\x1a\xf1\x60\x2c\x80\xfe\x9f\xc7\x3b\x78\xce\x58\x30\xf7\x25\x7c\x3a\x6c\x7d\x40\xf7\xc5\x97\x25\x9a\x88\xb3\xa0\xc0\x12\xcd\x41\x72\xe4\x77\xc9\xb9\x2f\xa9\xdd\x3a\x69\x5c\x5f\x17\xf8\x93\x50\x6e\x19\x0b\xca\x95\x8b\xbf\x6e\x8c\xd2\xae\xa4\x22\x01\xe1\x53\xf2\xfc\x90\x40\x3f\xcd\x87\x70\x65\x41\x5a\x98\xba\xd9\x8b\x0e\x0f\x74\xe0\x97\xda\x26\x59\x3f\x7d\x80\x28\x4b\x06\xc9\x7d\x0e\x57\x96\xd7\xad\x76\x06\xd1\xf4\xca\xce\x38\x21\xb0\x20\x38\xe0\x56\xc9\x05\xbe\xae\xab\x02\x8d\xad\x07\x9e\x58\xac\x99\x1d\x26\x04\x54\xa8\xa3\x56\x6e\x2e\x60\xcf\x5f\xc0\x2d\x6f\x01\x95\x5e\xda\xf8\xdb\x5a\xfd\x29\x14\xad\xda\x51\xa3\x1f\xbf\x0e\x45\x78\x7d\x10\x1a\x8c\x39\x3f\x9a\xa1\x1d\x61\x98\x42\x14\x52\x62\x6d\x40\x09\xd8\x92\x46\x46\xea\x25\xee\x0c\x27\xfb\x02\x55\x82\x82\x0f\x1d\xf8\x58\xbf\xce\x51\xa0\x9b\xf6\x80\x60\x82\x77\x16\x5c\x10\x6a\x6a\x67\x31\x49\x02\x1d\x52\xb6\xfe\x0c\x05\x6c\x05\x6c\x39\xa3\x96\x33\x40\xd2\xee\xc4\xbc\xeb\xce\x91\x30\xec\x42\xd7\x8f\xc7\x24\x85\xa7\x6e\x7e\xff\x98\xf4\x20\xa7\x47\x78\xd9\xb7\x51\xaf\x9b\x27\x90\x25\x64\x5a\xed\xf3\xde\xa3\x0c\xdd\x48\x1a\xb9\x22\xd3\x6d\x74\xac\xe0\xa9\xc8\xc7\xe6\x34\x87\xc1\x2f\xd3\x6e\x93\x7f\x65\x9d\x0e\xf3\x7f\x61\xde\x4f\xb3\xe4\x39\x87\x88\x76\xed\x7b\x77\x30\x49\xb2\xfa\x3b\x3c\x5b\x8b\xe6\x7c\x04\x84\x24\xe6\x7f\x6f\x61\x7b\x84\xa7\x4b\x48\x63\xa8\xb2\xae\x68\x8e\x9e\xc3\xe7\x76\x37\xce\x29\xbf\xe8\xe1\x24\x1f\x4d\x72\x68\xb8\x27\xbd\xda\xfe\xbb\x70\x27\x66\x4b\xb8\x01\x12\x10\xce\xc4\xbe\x30\xa4\x9d\x7d\x07\xac\x2c\x9e\xa0\xb7\xe0\x77\x61\xbd\x40\x2c\x30\xe8\xbc\xd1\x30\xf7\x65\x9c\x35\x1e\x71\xf6\xce\x7e\x07\x00\x00\xff\xff\xa0\xc3\x9b\xd6\x4d\x05\x00\x00")

func templatesSingletonMssql_upsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSingletonMssql_upsertGoTpl,
		"templates/singleton/mssql_upsert.go.tpl",
	)
}

func templatesSingletonMssql_upsertGoTpl() (*asset, error) {
	bytes, err := templatesSingletonMssql_upsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/singleton/mssql_upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa6, 0x69, 0x72, 0x38, 0xff, 0x12, 0xac, 0xfa, 0x17, 0xbb, 0xc6, 0xa8, 0xc0, 0x42, 0x97, 0xf5, 0x69, 0xf1, 0x9d, 0x12, 0xd9, 0x70, 0x6f, 0x7a, 0xe3, 0x4, 0xf9, 0x1a, 0xc7, 0xd0, 0xf4, 0x4}}
	return a, nil
}

var _templates_testSingletonMssql_main_testGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\xed\x53\xdb\x36\x18\xff\x6c\xff\x15\x4f\x73\xd7\xd6\x66\x9e\x68\xd7\xdd\x3e\xd0\xcb\xf5\xf2\x62\x5a\xae\x24\x81\x38\x5b\xb7\xa3\x0c\x94\x58\x06\x1d\xb6\x64\x24\x19\x9a\x31\xfe\xf7\x9d\x24\xdb\xb1\xd3\x24\x85\x4f\xe3\x4b\xd0\xa3\xe7\xf5\xf7\xbc\xc9\x77\x58\x80\xb8\xfa\x36\x8a\xa2\xd3\xe3\x1b\xb2\x84\x2e\x08\x72\x45\xbe\xe5\x68\x54\x48\x35\xe0\x59\x4e\x53\xe2\x5d\x7a\x1f\x32\xff\xef\xde\xf1\x2c\x9c\xc2\xac\xd7\x3f\x0e\x01\xed\xf5\x86\xc3\xaf\xf2\xa7\xc1\x64\x1c\xcd\xa6\xbd\xa3\xf1\x0c\xd0\x1e\x1c\x4e\xa6\xe1\xd1\xc7\x31\x7c\x0e\xff\x42\x7b\x1f\xd0\xde\x57\xf6\x61\x1a\x1e\x86\xd3\x70\x3c\x08\x23\xb4\x77\xe9\xbb\xae\x5a\xe6\x04\x32\x29\x6f\xd3\x19\x91\x8a\x08\x90\x4a\x14\x0b\x05\x0f\xae\x13\xcf\x07\x9c\x31\xd0\x7f\x7b\xf2\x36\x45\xc3\xbe\xa6\x8d\x71\x46\x0c\x4d\x2a\x41\xd9\x95\xeb\x5c\x73\xa9\x00\x5a\xa4\x42\x12\xb1\x46\xca\xb1\x94\x6b\x24\x29\xd3\x8c\xc7\xa4\xc5\xc5\x45\xa5\x8b\x32\xe5\x3a\x8a\x48\x35\xec\x1b\x93\xb5\xd4\x0d\xcd\xa3\xd3\xe3\x41\x16\xc3\x9c\xf3\xd4\x7d\x74\xdd\xa4\x60\x0b\xa0\x8c\x2a\xcf\xb7\x7e\x8f\x30\x65\xd0\x85\x57\x8d\xb8\x1e\x1e\x6b\x4e\x2f\x83\xbd\xc6\x8d\x0f\x92\xa8\x22\xf7\x7c\x20\x42\x70\xa1\x35\xe8\x24\x10\x21\x2c\xc1\x75\x9d\x3b\x9a\x13\x81\x22\xa2\x86\x24\xc1\x45\xaa\xbc\x8e\x91\x47\x72\x71\x4d\x32\xdc\x09\xa0\x13\xcf\x79\xc7\xdf\xc1\x68\x43\xd5\x9c\x4a\x14\x64\x17\xab\x86\xa0\x13\xc0\xdb\x5f\xdf\xbd\xf3\x5d\xd7\xc9\x50\x09\x79\x17\xac\xc4\x47\xa2\x22\x03\x45\x25\x10\xcf\x19\xce\x8c\xca\x0c\x99\x5c\x6c\xe5\xd4\xb7\x96\xcf\x24\x68\x2b\x9f\xbe\xb5\x7c\x26\x6b\x5b\xf9\xf4\x6d\xc9\xa7\xf3\xd6\xe0\x3b\x62\xed\x78\x0c\x53\x95\xef\xad\xfa\x2a\x94\x0c\x77\x23\xf5\x5b\x05\x34\x4f\x33\xfc\x46\x6d\x34\x64\xfa\x9c\xa7\xb5\x89\x1b\x9a\xcb\xdb\x74\x91\xc5\x1d\x8d\xae\x4e\x72\x17\xee\x70\x8a\x51\x9f\x5c\x51\xf6\x07\x4e\x69\x8c\x15\xe5\xcc\xf3\x51\x79\x20\x9e\xeb\x38\x86\xc5\x1a\x1f\x73\x15\x66\xb9\x5a\x7a\x3b\xd1\x0b\xa0\x7d\x7c\x9e\x0e\x9b\xa9\x5a\x47\x79\xac\x74\x8c\xb9\xf2\xcc\x3f\xe1\x6d\x81\x53\xe9\x6d\x87\x3d\x80\x37\xb5\x12\x4b\x79\xae\x27\x15\xbc\xb5\x9a\x9a\xf0\x3c\x3d\x75\x6e\x6b\x45\x2b\x8a\xeb\xf8\x68\x70\x4d\x16\x37\x9e\xce\x09\x4d\x4c\xef\xbd\xe8\x02\xa3\xa9\xee\x46\x47\x10\x55\x08\xa6\xa9\xae\xf3\xe8\xba\xce\xfe\x3e\x0c\x04\xc1\x8a\x00\x06\x81\x59\xcc\x33\xfa\x0f\x89\x21\x9e\x83\x76\x0d\x19\x15\x29\x61\x5e\xb3\x88\x7c\xe8\x76\xe1\x8d\x51\xb7\x56\x5b\xb5\x06\x14\x29\x3c\x4f\x89\xbd\xf0\xaa\xc6\xf3\xad\x4d\x9a\xc0\x8b\x56\x81\x69\x4d\xa5\xab\x5d\xc8\x50\x2c\x78\x3e\x33\x6a\x3d\xff\xfd\x7a\x00\xad\x08\x9c\xc7\xb6\xe4\xc2\x84\xf2\x64\x59\xd7\x71\xac\x84\x76\xe2\xa0\x0b\xe4\x1b\x59\xa0\x01\xcf\x32\xcc\x62\xaf\x53\xd6\x76\x00\x9d\x9f\xa3\x4e\x00\x76\x22\xe8\xd3\xef\xe6\xa4\x8b\x51\x9f\x4e\xcc\x49\xf7\xaf\x3e\xc5\xe6\xd4\xc0\x4a\x1b\x49\x02\xe3\xc9\x41\x17\xb8\x44\x93\x9c\x30\xaf\x63\xe0\x91\x17\x76\xea\x21\x79\x9b\xea\xae\xdb\x90\xaf\x86\xcb\x5c\x48\xf4\x45\xe0\xdc\x23\x42\x1b\x4e\x30\x4d\x49\x0c\x8a\x03\xcf\x09\x83\xef\x14\x42\x42\x53\xd3\xcb\x36\xd0\x98\x24\x44\x80\x1e\xda\x7a\xb2\xc3\x05\x74\x21\x41\x83\x94\x4b\xe2\xf9\xf0\x68\xaa\xc5\x91\x2a\x2e\xfd\x7c\x35\x5f\x2a\x22\x51\xbf\x48\x12\x33\xef\x1b\x40\xa1\x48\xc5\x66\x25\x30\x72\x7f\xf8\x99\x2c\x87\x44\x2a\xc1\x97\x44\x78\x8d\x5d\x1b\x40\xe2\xaf\x0b\xd9\x24\x59\x1b\x6e\x33\x6f\x4d\x2e\x2c\xd4\xee\xc4\x6d\x45\x41\x6a\x59\xb0\x49\x83\x85\x4d\xe2\x2a\xfc\x0d\xc6\xbe\x60\xba\xd1\x56\x92\x29\x74\x22\x28\x53\x29\xd3\x46\xfc\x75\x9a\x8d\xa0\xec\x55\xcf\xf7\x9f\xe8\xdf\x3d\xa6\x0a\x12\x2e\x36\xbb\x68\xbc\x2c\xb5\x30\x9a\xee\x58\xb0\x32\x1d\xf1\x98\x78\x66\xfc\xdb\x45\xee\x97\xbf\xda\x7d\x79\x4f\xd5\xe2\x1a\xcc\xed\x83\xeb\x2c\xb0\x24\xe5\x9e\x3c\x58\x75\xbf\x25\x54\xb7\x09\x4e\x65\xfb\xda\x52\x5c\x5d\x33\x7a\x9d\x36\xaf\x62\x2a\x75\xa1\x75\xb4\xc3\x5b\x7d\x6c\xb7\xe1\xea\x2d\xa0\xab\xf2\xa0\x0b\x1a\xcc\x28\xd7\x68\x26\xde\xa5\xeb\x0c\xa6\x61\x6f\x16\xc2\xb0\x37\xeb\xf5\x7b\x51\x08\x2f\xe5\x7b\xd7\xf9\x38\x71\x1d\xfb\x28\x5b\xd1\xcf\xde\x9e\x4b\xd7\x89\xc2\x19\x4c\xc3\xde\xf0\x62\x30\x19\x8d\x8e\x66\xb3\x70\x78\x11\x8d\x7b\x27\xd1\xa7\xc9\x0c\x26\x63\x23\x7a\xb9\xde\x83\x95\xfb\x19\x12\x05\x1b\x64\xb1\x27\x6f\xd3\x00\x9e\xdf\xe1\xfe\xf6\x98\x9b\x43\x6b\x15\xf1\xfe\x3e\x44\x94\x2d\x08\x8c\x22\x88\x4e\x8f\xe1\x97\x37\x6f\x7f\x03\xaa\x60\x81\x19\xcc\x09\xc4\x9c\x11\xb8\xa7\xea\xda\x70\x0e\xa7\x93\x93\x55\xb8\x67\x70\x74\x08\xe1\x9f\x47\xd1\x2c\x82\x73\x78\x80\x18\x2b\x3c\xc7\x92\x5c\xe8\xc1\x0c\xff\xae\xce\x92\xe1\x5c\x5e\x73\x65\x2f\x1e\xe1\x0c\x02\x84\x10\x83\x73\x38\x7b\x7f\xbe\x0d\xf4\x5a\xb7\x17\x85\xc7\xe1\x60\x66\xc6\x3d\x1c\x4e\x27\x23\x90\x4b\x89\x2a\xe5\x12\x5c\xc7\xf9\xf2\x29\x9c\x86\x96\xa1\x0b\xaf\x5f\xca\xd7\xba\x64\xdb\xce\xbe\x94\x1b\x70\xff\x1f\xb2\xa0\x08\x16\x31\xbf\x67\xcd\x1c\xd0\x44\xef\x14\xfb\x00\x6f\xf4\x79\x45\xab\x86\xe0\x8f\x77\xd3\xc1\xf3\x97\xd3\x53\xbb\xba\x02\x44\x8f\xd6\xa0\x1a\x0d\x65\x5b\x07\x80\xc5\x95\x04\x84\x50\xd5\xee\x75\x68\x8b\x0d\x7b\xab\x14\xb6\x52\x08\x21\xdf\xb0\xd5\x53\xdb\xea\x90\x68\x4c\xee\xa7\x04\xc7\x44\x58\xa3\x7a\xfe\x4b\x15\xf3\x42\x6d\x1c\xff\x3b\x36\x43\xa9\x5c\x4b\x9a\xe9\xce\x0b\x55\x13\x5b\x23\xbf\x01\xa3\xbe\x9e\x16\x6c\x03\x82\xcd\x41\x5b\x0d\x4f\x51\x30\x46\xd9\xd5\x41\xa7\x46\xc6\x06\xe7\xbb\xdf\x0d\x66\x5e\xa8\xd6\x60\xfe\xc1\xdc\x5e\x7f\x0d\x3d\x25\x55\x0b\xce\x74\x79\x79\xe5\x77\x5c\x60\xb3\xe1\xef\xa8\xb4\xba\xec\xed\x55\x60\xf4\x1b\x7b\xed\x8f\x23\x67\xc5\x51\x02\x77\x9b\x96\xcf\x05\xe3\x41\x27\x80\x58\xd0\x3b\x22\x90\x59\xb3\xfd\x82\xa6\xf1\x69\x41\xc4\xb2\x0c\xa9\xea\x95\xea\x35\xb2\xde\x8b\xb6\xaf\xec\x17\x86\xfe\x2d\x5f\x8d\x1a\x89\xad\x0f\x45\x46\xd3\xe0\x3b\x7c\xda\x91\x3c\xba\xff\x05\x00\x00\xff\xff\x68\x86\x33\x94\x69\x0f\x00\x00")

func templates_testSingletonMssql_main_testGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonMssql_main_testGoTpl,
		"templates_test/singleton/mssql_main_test.go.tpl",
	)
}

func templates_testSingletonMssql_main_testGoTpl() (*asset, error) {
	bytes, err := templates_testSingletonMssql_main_testGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/mssql_main_test.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0x48, 0x72, 0x18, 0x21, 0xc4, 0x79, 0x4b, 0x1c, 0xde, 0x6, 0x5c, 0x37, 0xfb, 0x48, 0xf1, 0x61, 0xfd, 0x28, 0x9e, 0x5e, 0x56, 0x88, 0xbf, 0x7b, 0xc0, 0xb4, 0x66, 0x57, 0x69, 0xe0, 0x87}}
	return a, nil
}

var _templates_testSingletonMssql_suites_testGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xc1\x0a\xc2\x30\x10\x44\xef\xfd\x8a\xa5\xe4\xd0\x4a\x9b\x0f\x10\x3c\x78\xd4\x83\x88\xb4\x1f\x10\xed\xb6\x04\xe2\x5a\xba\x5b\x10\x42\xfe\x5d\xd2\x46\xe9\xc1\xdb\x0c\x6f\x32\x99\xed\x67\x7a\x40\x83\x2c\xed\xc8\x38\x49\x21\xb0\x13\x64\xb1\x34\xe8\xa6\x04\x9f\x01\x78\x5f\xc3\x64\x68\x40\x50\x96\x3a\x7c\x57\xa0\xc4\xdc\x1d\xc2\xfe\x00\xba\x89\x8a\x43\x48\x39\xdb\x27\xa8\x4f\x7c\x7e\x59\x5a\x30\xd4\x3f\x8e\x8e\xb7\x56\x19\x67\x0d\xc7\x22\xa5\x8f\x51\x22\xaf\x8d\xdf\x96\x8b\x79\xe2\x92\x16\x7d\x9b\xa9\xc8\xbd\x5f\x9f\xe8\x76\xbc\xba\x79\x32\x2e\x84\xbc\x82\x38\xf8\x0f\x59\x2f\x2a\x97\xbf\x90\xba\xed\x8c\xe4\x42\xf6\x09\x00\x00\xff\xff\x11\x5d\x4c\xce\xff\x00\x00\x00")

func templates_testSingletonMssql_suites_testGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonMssql_suites_testGoTpl,
		"templates_test/singleton/mssql_suites_test.go.tpl",
	)
}

func templates_testSingletonMssql_suites_testGoTpl() (*asset, error) {
	bytes, err := templates_testSingletonMssql_suites_testGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/mssql_suites_test.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x10, 0xc4, 0x71, 0xaf, 0xd9, 0x16, 0x41, 0x8b, 0x4b, 0xfc, 0xe8, 0xba, 0xfd, 0xfa, 0x4d, 0x2c, 0x1, 0xd1, 0x0, 0xe1, 0xb0, 0x78, 0xee, 0x7f, 0xd0, 0x65, 0xf3, 0xa1, 0x43, 0xba, 0x3c, 0xe7}}
	return a, nil
}

var _templates_testUpsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x54\x4d\x6f\xdb\x30\x0c\x3d\x5b\xbf\x82\x0b\xb6\x41\x1e\x5c\x15\xbb\x76\xc8\x21\xfd\x38\x14\xc3\x82\xa0\x71\xce\x83\x6a\xd3\xa9\x10\x45\x32\x24\x7a\x49\x66\xe8\xbf\x0f\x92\xd3\x36\x6d\xda\xa1\x87\xed\xd0\x43\x62\x4b\x78\x7c\x8f\x7c\x24\xdd\xf7\x27\xf0\x51\x6a\x25\x3d\x9c\x8d\x41\x4c\xe2\x1b\x7a\x51\xca\x5b\x8d\x30\x3c\xc4\x54\xae\x31\x04\xd6\x74\xa6\x02\x42\x4f\x7d\x3f\x44\x88\x45\x3b\xd3\x9d\x93\x3a\x84\x45\xeb\xd1\x11\x27\xf8\x12\x01\xca\x2c\x45\x99\x43\xcf\x32\x12\x33\xe9\xa4\xd6\xa8\x79\xce\x58\xa6\x1a\xd0\x68\xf8\x03\xc1\xa5\xdd\x98\xb9\x32\xcb\x4e\x4b\x17\xc2\x44\xeb\x0b\xab\xbb\xb5\xf1\x39\x8c\xc7\x7f\x43\xce\x9c\x5a\x4b\xb7\xfb\x8e\xbb\x87\x80\x9e\x65\x19\x89\xf9\x4a\xb5\x7c\x14\xff\x5b\x65\x96\x40\xa9\x8c\x8d\xa2\x3b\xb0\x46\xef\xa0\x1d\xe2\x60\x85\x3b\xa8\x86\xc8\x51\xce\xb2\xc0\x58\xe6\x11\xeb\x68\x81\x93\xa6\xb6\x6b\xf5\x1b\xc5\x14\x37\x73\xc4\x9a\xe7\x2c\xfb\x25\x1d\xa0\x4b\x3f\xeb\x58\x76\x7a\x0a\x13\x22\x5c\xb7\x04\x74\x87\x70\x3d\x9d\x5f\xdd\x94\xe0\x55\x8d\x60\x1b\x90\x06\x16\xb3\x78\xc3\x32\x1b\x19\x0f\xec\x7a\xac\xa0\x0f\xc9\x8d\x48\x7a\xa8\x39\x27\xd7\x55\xc4\x63\x32\x05\x7c\xb6\x05\xbc\x62\xc0\xe5\x79\xb9\x6b\xd1\x17\x40\xae\xc3\xfc\x5b\xe2\xf9\x30\x06\xa3\xf4\xde\x88\xab\x98\x69\xc3\x47\x0b\x93\x2c\x20\xfb\x28\xf2\x72\x42\xe0\x93\xf4\x19\x7c\xf2\xa3\x22\xf2\xed\x7d\xe9\x7b\xd5\x80\xb1\x04\x62\x6a\x2f\xac\x21\xdc\x52\x08\x15\x6d\x63\x65\xd5\x70\x16\xe7\xb2\x5a\x2d\x9d\xed\x4c\xcd\xf3\xbe\x47\x53\x87\xc0\xb2\x01\xf2\xa3\xf3\x54\x6e\x79\x62\x39\x64\x38\xba\xb8\xb5\x4a\x8b\x73\x5c\x2a\x93\x38\xb4\xc7\xc3\xbb\x72\xcb\x2b\xda\x16\xb1\xc0\x7b\x85\x37\x81\x72\x96\xd5\xd8\xa0\x83\x38\xbc\x3c\x87\x1e\x7e\xc2\x18\x68\x2b\x6e\xac\xd6\xb7\xb2\x5a\xf1\x1c\x42\xec\xf0\x43\x2f\xac\xd8\xcf\xf2\x6b\x85\xc7\x9e\xa0\xa9\xe1\x24\x04\x88\xa7\xa4\x7f\x6d\x1a\x74\x3c\x7f\x7a\x7a\x5b\x5f\xba\x24\xf7\x72\x53\x8e\xba\x51\xd9\xce\x50\xba\x78\x36\x59\xf7\x8b\xc8\x73\x71\x11\x31\x6f\x4c\xff\xb1\xf2\xe3\x2c\xf9\xbd\x6c\x84\x24\xe1\x08\xfa\xfa\x04\x32\xda\x48\x43\x60\x0d\x82\xc3\xca\xba\xba\x80\xa5\xa5\xb3\x51\x31\xe0\xf7\x49\x3f\x5b\x97\xc5\xec\x72\x52\x5e\xbd\xb4\x2e\xff\x62\x21\x1a\xa9\x3d\xbe\x0a\x3b\xfa\x70\x08\x21\xfe\xeb\xfa\xbc\xbf\xb9\x7a\x27\x63\x15\xd8\x9f\x00\x00\x00\xff\xff\xf6\x71\x76\xb4\xbb\x06\x00\x00")

func templates_testUpsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testUpsertGoTpl,
		"templates_test/upsert.go.tpl",
	)
}

func templates_testUpsertGoTpl() (*asset, error) {
	bytes, err := templates_testUpsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xea, 0xe3, 0xe8, 0x1e, 0xc3, 0xef, 0x74, 0x5d, 0xf, 0xf2, 0x30, 0xa1, 0x6, 0x82, 0x8f, 0x70, 0xe4, 0xb, 0xca, 0x51, 0x16, 0xa2, 0x3d, 0x8f, 0x40, 0x59, 0xec, 0xfe, 0x96, 0x39, 0x2, 0x36}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/17_upsert.go.tpl":                        templates17_upsertGoTpl,
	"templates/singleton/mssql_upsert.go.tpl":           templatesSingletonMssql_upsertGoTpl,
	"templates_test/singleton/mssql_main_test.go.tpl":   templates_testSingletonMssql_main_testGoTpl,
	"templates_test/singleton/mssql_suites_test.go.tpl": templates_testSingletonMssql_suites_testGoTpl,
	"templates_test/upsert.go.tpl":                      templates_testUpsertGoTpl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"17_upsert.go.tpl": &bintree{templates17_upsertGoTpl, map[string]*bintree{}},
		"singleton": &bintree{nil, map[string]*bintree{
			"mssql_upsert.go.tpl": &bintree{templatesSingletonMssql_upsertGoTpl, map[string]*bintree{}},
		}},
	}},
	"templates_test": &bintree{nil, map[string]*bintree{
		"singleton": &bintree{nil, map[string]*bintree{
			"mssql_main_test.go.tpl":   &bintree{templates_testSingletonMssql_main_testGoTpl, map[string]*bintree{}},
			"mssql_suites_test.go.tpl": &bintree{templates_testSingletonMssql_suites_testGoTpl, map[string]*bintree{}},
		}},
		"upsert.go.tpl": &bintree{templates_testUpsertGoTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
