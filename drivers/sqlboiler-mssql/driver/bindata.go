// Code generated by go-bindata.
// sources:
// override/templates/17_upsert.tpl
// override/templates_test/singleton/mssql_main_test.tpl
// override/templates_test/singleton/mssql_suites_test.tpl
// override/templates_test/singleton/mssql_upsert.tpl
// override/templates_test/upsert.tpl
// DO NOT EDIT!

package driver

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templates17_upsertTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x5b\x6f\xdb\x3a\x12\x7e\x96\x7e\xc5\xd4\x58\x34\xd2\xae\xa3\xec\xbe\x66\x91\x87\x24\x6d\xb3\x45\x9b\xac\x5b\xb7\x1b\x60\x83\x20\xa0\xa5\x91\x4d\x84\x26\x55\x8a\x72\xea\xe3\xea\xbf\x1f\x0c\x49\x4b\xf2\x25\xb1\xd3\x9e\x1c\x9c\x87\xa2\x11\x2f\x73\xf9\xe6\x9b\xe1\x8c\x17\x8b\x43\xf8\x9b\x61\x23\x81\x57\x6c\x8a\x43\x2e\xc7\x95\x60\x1a\x8e\x4f\x20\xf9\x42\xab\x09\x2d\xc3\x0f\x28\x97\x3b\x3f\xc0\x70\x23\xf0\x9c\x95\x08\x87\x75\x1d\x5a\x01\x33\xa6\xf7\xbe\x9e\xb2\x29\x8a\xd5\xeb\x65\x3a\xc1\x29\xb3\x17\x36\xaf\x26\xc3\x76\xd7\x5e\xe0\x39\x24\xa7\x59\x76\x21\xd4\x88\x09\x2b\xe4\xe8\x08\xbe\x16\x25\x6a\x73\x01\xcc\x18\x9c\x16\xa6\x04\x26\x81\x4b\x5a\xeb\x03\x93\x19\x64\x0a\xed\x5a\x55\x64\xcc\x20\x28\x0d\x7c\x2c\x95\x46\x50\x12\x52\x25\x73\xc1\x53\x93\x84\x79\x25\x53\x88\x14\xfc\x7d\xb1\xd8\x04\xa5\xae\xe3\xa5\x9a\xc8\x5a\x21\x95\x81\xe4\x4a\x9d\x2b\x69\xf0\xbb\xa9\xeb\xd4\x7c\x27\x59\xf4\x91\xf8\xc5\x3e\x2c\x16\x28\x33\xb2\xd2\xab\x3e\x57\xa2\x9a\xca\xb2\xef\xad\xf3\x9f\x30\x52\x5c\x24\xfe\x23\x06\xd4\x5a\x69\x58\x84\x81\x46\x53\x69\x09\x2a\x71\x8a\x9d\xde\xae\x4e\x7b\xef\x02\xcd\x9b\xb3\x28\x5e\x2c\x50\x94\x68\xed\xe8\xc3\x72\xc3\x9f\xf4\xfb\x32\xab\xeb\xfe\x93\x96\xc4\x61\x1d\x86\x8d\xd1\xa1\xc3\x9b\x10\xec\x60\x4e\x7f\x0e\x98\xe4\xe9\x1a\xfa\x83\x5f\x83\x1f\xac\xcc\x92\xd6\x2c\x00\xfb\xc7\x63\xf0\xd2\x01\x59\x84\x01\xcf\xc9\x2a\xe2\xe7\x9f\x19\x8d\x7f\x5b\xa5\xaf\x4e\x40\x72\x41\x56\x04\x05\x61\x14\x59\x79\xd7\x9a\x15\x6f\xb5\x8e\x50\xeb\x38\x0e\x83\x7a\x5b\xe4\x1e\x09\xd5\xb6\x48\x41\x45\x59\x4a\xdf\xf8\x1d\xd3\xca\x28\xfd\x9c\xd4\xe9\x88\x2e\x7e\x32\x8c\x83\x4d\x40\xc9\x12\x07\xde\x5b\x6f\x53\x07\xd6\xcd\xd8\xb6\xc7\xfd\x52\xe7\xd6\x6e\xb0\xf7\x8f\xf9\x16\xa2\x75\x89\x45\x66\xbc\x5c\x5c\x1b\xa4\xff\xf0\x18\xee\x19\xa7\xbf\x56\x98\x9a\x5a\xc9\x73\x50\x70\xd2\x22\xea\x6b\xa7\xdd\x2f\x93\x2b\x7c\x88\x7a\x8b\x45\x32\xb8\x1f\x93\x57\x75\x7d\x0c\x52\xc1\x62\xd1\x79\x6c\xea\x1a\x0a\xad\x66\x3c\xc3\x0c\x72\xa5\xa1\xb2\xde\xf6\x6c\x08\xc2\x80\x5e\x2a\x82\x5b\x10\x80\x3d\xc3\xa7\x58\x1a\x36\x2d\xee\xdc\xa9\xbb\x09\x8a\x02\x75\x0f\x12\xa8\xdd\xe9\x96\x26\xff\x51\xea\xbe\xb4\xb1\x5b\x21\x54\xa6\xce\x30\x57\x1a\x1d\xa8\xf6\xd0\xde\xec\xda\xe4\x4f\xeb\x2d\x99\x6b\xad\xb5\x58\x86\x61\x20\x7f\x7b\x83\x39\xab\x84\x29\x49\xf1\xb7\x0a\x35\xc7\x32\xb9\x52\xf2\xff\xa8\x95\xdf\x1a\x22\x85\x75\xfd\x21\xaf\x6b\x0f\xf3\x35\x37\x13\x7f\xb2\x0f\x2a\x0e\xc3\xe0\xe8\x08\xce\x2a\x2e\x32\x48\x59\x3a\x41\xb8\xc7\x39\x70\x79\x28\xb8\x44\xa8\xc6\x82\x8b\x39\x1c\xc2\x74\x5e\x7e\x13\x30\x2b\xa1\xa0\xff\x0b\xad\x46\x02\xa7\x65\x18\x8c\xaa\x9c\x2c\x29\x8d\x9e\x32\x39\x16\x48\x95\xf1\xac\xca\x73\xd4\x51\x6c\x77\x93\x6b\xcd\x0d\x0e\x8d\xe6\x72\x1c\x95\x46\xa7\x4a\xce\x92\xf7\x46\xb1\x68\x85\x18\xc9\x07\x2e\x33\x4a\x91\xf2\x81\x9b\x74\x02\x9b\x9b\x04\x4d\x4a\xbd\x46\x97\x33\xd7\x13\x6e\x50\xf0\xd2\xf4\x57\x96\xcf\x04\x4b\xef\x37\x97\x2f\x34\xce\x69\xf5\x38\x0c\x02\x62\xc5\x5d\x1f\x52\xb2\x5e\x33\x39\xc6\x35\x95\xe7\x4a\x94\x36\x1a\x1b\x4e\xa4\x71\x18\x50\x5c\xea\x8e\x7f\x67\x73\x83\xd1\x41\x72\xb0\xcb\xe7\x15\xf6\xaf\xfb\xbc\xb9\xf9\xe2\x3e\xaf\xaa\xfc\x69\x9f\x37\x05\x77\x88\x4a\x02\xb7\xc9\xab\xc3\x80\xa8\x76\x7c\x02\xb4\xeb\x37\x08\x8d\x86\x4b\x83\x6a\xc9\xa5\x51\x95\xc7\x36\x15\x37\x69\xed\x72\xee\x9c\xa8\x7b\x59\x99\xe4\xf3\x47\x95\xde\x93\x18\x4b\xe6\xbe\xe3\x74\x46\x5a\x76\x5c\xbe\xb9\xc7\xf9\xed\x7e\x2a\xbe\x4a\xe1\x94\x84\xc1\x8c\x69\x9b\xbe\xb6\x34\x85\xb6\x2a\xbc\xf2\x2a\xc9\xef\x65\xe3\xa4\xd1\xac\xa6\xc9\xfb\x0e\xf0\x94\xb0\x04\xfa\x13\x49\xdb\xdf\xb1\xdf\x4d\xea\x3d\x8e\xaa\xca\x74\x4f\xb7\xc1\xb2\x9f\x0f\x0d\xc1\xc2\x20\x88\x1b\x2f\xa0\x6b\xff\x90\x1a\xa0\x69\x21\x70\x8a\xd2\x44\x4b\x37\x77\xa8\x3d\xad\x8c\x8a\x3d\x0f\x79\x1f\x66\xeb\x3c\x74\xdc\xe3\x79\x47\x0f\x55\x4e\xc6\x65\x79\x2a\xe7\x5b\x8b\xda\x40\xf3\x29\xd3\xf3\x0f\x38\x6f\x5e\x98\x59\x0c\xaf\x5f\x3f\x43\xc4\xb6\xba\x38\x8b\x9d\x2d\xad\xeb\xac\x28\x50\x66\xde\xd3\x9b\x63\x7e\xbb\x7c\xca\x6e\xf8\x3f\xfe\x75\x7c\x9b\x24\x09\x79\x46\xa4\xb6\xff\x78\x0e\x02\xa5\x3f\x1e\xd3\x5b\xf6\x4f\x27\x71\xe7\x53\x56\x49\x3b\x3c\x19\xe5\x1f\xad\xf5\x87\xad\x0f\xa9\xaa\x44\x66\x9f\x96\x91\x2d\xdb\xde\xc6\xd4\xfa\x01\x14\xb8\x9e\x4b\x57\xf7\x96\xac\xc7\xed\x12\xf5\x18\x23\x8d\xfb\xc7\xeb\x97\x84\x78\x4c\x29\x59\x02\xdf\xb3\xac\x64\xc2\xd7\x4e\xd9\xfd\x95\x4c\xd8\x64\x02\x9d\x5c\xed\x3e\x3c\x9f\xbd\x19\x8f\xf3\xd9\x1d\xd8\x13\x9f\x36\xda\xee\xda\x0b\x47\xdb\x1b\xbf\x35\xda\xb6\xf2\x24\xd4\x16\xcc\xa1\x6d\x0f\xec\xe3\xee\x6a\xd8\x27\xda\xba\x1c\x0e\x3f\x7d\x8c\x32\xce\x04\xa6\xa6\x0f\xbd\x35\x95\xbd\xed\x7e\x6f\xc9\xb4\x25\x4c\x9d\x2a\x67\xe1\x68\x0a\x48\x9b\x37\xcf\x92\xe8\x93\x69\x8b\x98\xb6\x34\x79\xa5\xf6\x68\xe3\xf9\x8c\x89\x0a\x2f\x59\x51\x70\x39\xee\xdb\xba\xdc\x41\x81\xcb\xcc\x6f\x6d\xb5\xe6\xcb\xbc\x78\x24\xe2\x8d\xc0\x46\x7b\xec\x62\xbe\xd6\xb7\xad\x34\x6e\xdd\x2a\x40\xb8\xd0\x41\x4f\x0a\x67\xab\x46\xf3\x72\x96\xda\x48\x04\x5b\x8d\x5c\xb5\x72\x59\xb0\x6a\xfb\x96\x89\xca\x26\xa7\xc6\x9c\xa8\x91\xbc\x97\x19\xd7\x98\x9a\x68\xb9\xf0\x3f\x3a\xf1\xdf\x3c\x52\xd4\xb5\xcc\x98\x58\xe9\x42\xed\x66\xf9\x4e\xab\xe9\xd2\x78\x2b\xd0\x3f\xc1\x2b\xb1\x89\xdd\xc3\xe9\x2c\x29\xe1\xe6\x96\x4b\x83\x3a\x67\x29\x2e\x5c\x67\x4d\xa8\xad\xc3\xd4\x81\x70\x79\xb1\x55\x3e\x30\xfa\x71\xd5\x1d\x19\xce\x53\x9e\xbb\x1e\xe9\x0d\x8e\xaa\xf1\xa5\xca\xd0\x4a\xcd\xa7\x26\x79\x57\x68\x2e\x8d\x90\x51\xbb\x6f\xfb\x16\xbd\x94\x65\x93\x2b\xde\x7d\x9a\xd0\x69\xb5\xed\xf0\x67\x6d\x0a\x73\x03\x46\xe0\x58\x41\x33\x42\x62\xf3\xf6\xb3\x7a\x88\x3a\x46\x38\x1d\x94\x00\xc9\x30\x65\x96\x65\x04\x8a\x4f\x1e\x37\xb5\x3d\x2e\xc9\xab\x8a\xec\x44\xf2\x1c\xa9\x7e\x76\x6d\xb8\x75\x72\x02\xe5\x37\x91\xbc\xd5\xfa\x4a\x7d\x56\x0f\xbe\x81\x74\x1a\x89\x74\x47\x47\x30\x50\xa5\x19\x6b\x2c\xed\xec\x2a\x0f\x8c\x0f\x3c\x30\x39\x37\x13\x1a\x72\x1f\x26\x28\xc1\x4c\x50\xe3\x41\x49\xb3\x9c\x2b\x03\x9e\x99\x60\x1d\x79\x1c\xa6\xbb\x65\xfe\x58\xff\x68\xfe\xdc\x8e\xd2\x3a\x28\x9b\xf7\x76\x63\xb2\x0a\x41\x3b\x05\x6e\x9d\xde\xa8\xe4\x5f\x6b\x56\xd0\xf4\xef\xca\xec\x33\x0a\x7f\xaf\x25\x4f\xb7\xa1\xdc\xa3\x3d\x5d\x36\xc0\xbb\xce\xda\x86\x17\x4e\x9c\xa3\xfb\x89\x6e\x1a\xdf\xe0\x89\xc1\xb8\xf9\xa1\x33\x53\xa7\xb9\x41\xbd\xcf\x50\xfc\xd4\x6f\x7b\x76\x48\xf6\x63\x70\x13\x3d\xaf\x44\x72\xd1\x1d\x90\xeb\xf0\xf7\x00\x00\x00\xff\xff\x80\xd0\xef\x70\x05\x17\x00\x00")

func templates17_upsertTplBytes() ([]byte, error) {
	return bindataRead(
		_templates17_upsertTpl,
		"templates/17_upsert.tpl",
	)
}

func templates17_upsertTpl() (*asset, error) {
	bytes, err := templates17_upsertTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/17_upsert.tpl", size: 5893, mode: os.FileMode(420), modTime: time.Unix(1527895255, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_testSingletonMssql_main_testTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\xdf\x53\xdb\xc6\x13\x7f\x96\xfe\x8a\xfd\x7a\x26\x89\xc4\x57\x3d\x92\xa6\xd3\x07\x32\x9e\x8c\xb1\x45\xc2\x04\xdb\xc4\x52\x9b\x76\x08\x85\xb3\xb4\x82\x9b\x48\x27\xfb\xee\x04\x71\x29\xff\x7b\xe7\xee\x24\x59\x26\xd8\x0d\x7d\x29\x2f\xd6\xed\x7e\xf6\xf7\xed\xee\x71\x43\x05\x88\xab\xaf\xe3\x28\xfa\x78\xf2\x05\x57\xd0\x07\x81\x57\xf8\x75\x41\xc6\x95\x54\xc3\xb2\x58\xb0\x1c\xbd\x4b\xef\x6d\xe1\xff\x31\x38\x89\xc3\x19\xc4\x83\xc3\x93\x10\xc8\xde\x60\x34\xfa\x2c\xff\x3f\x9c\x4e\xa2\x78\x36\x38\x9e\xc4\x40\xf6\xe0\x68\x3a\x0b\x8f\xdf\x4d\xe0\x43\xf8\x3b\xd9\x7b\x4b\xf6\x3e\xf3\xb7\xb3\xf0\x28\x9c\x85\x93\x61\x18\x91\xbd\x4b\xdf\x75\xd5\x6a\x81\x50\x48\xb9\xcc\x63\x94\x0a\x05\x48\x25\xaa\x44\xc1\x9d\xeb\xa4\xf3\x61\xc9\x39\xe8\xbf\x3d\xb9\xcc\xc9\xe8\x50\xd3\x26\xb4\x40\x43\x93\x4a\x30\x7e\xe5\x3a\xd7\xa5\x54\x00\x1b\xa4\x4a\xa2\x78\x40\x5a\x50\x29\x1f\x90\xa4\xcc\x8b\x32\xc5\x0d\x54\x29\x1a\x5d\x8c\x2b\xd7\x51\x28\xd5\xe8\xd0\x98\xac\x21\xf7\xae\x9b\x55\x3c\x01\xc6\x99\xf2\x7c\xeb\xe6\x98\x32\x0e\x7d\x78\xde\x09\xe3\xee\xbe\x45\x7a\x05\xec\x75\x38\x3e\x48\x54\xd5\xc2\xf3\x01\x85\x28\x85\xd6\xa0\x73\x8e\x42\x58\x82\xeb\x3a\x37\x6c\x81\x82\x44\xa8\x46\x98\xd1\x2a\x57\x5e\xcf\xc8\x13\x99\x5c\x63\x41\x7b\x01\xf4\xd2\x79\xd9\xf3\x77\x00\x6d\x64\x1a\xa9\x44\x85\xbb\xa0\x3a\xe2\x5e\x00\xaf\x7e\x7a\xfd\xda\x77\x5d\xa7\x20\x75\x86\xfb\x60\x25\xde\xa1\x8a\x4c\xe4\x8d\x40\x3a\xe7\xb4\x30\x2a\x0b\x62\x52\xbf\x15\xa9\xb9\x16\x67\xea\xb1\x15\xa7\xb9\x16\x67\x8a\xb4\x15\xa7\xb9\x35\x4e\x97\xa9\x83\x3b\xe6\x9b\xf1\x18\x50\x53\xde\xad\xfa\x9a\x2c\xe9\xb8\x75\xfa\xfb\x70\x43\x73\x4a\x0e\xf1\x8a\xf1\x5f\x69\xce\x52\xaa\x58\xc9\x3d\x9f\xd4\x07\xf4\x5c\xc7\x31\x10\xab\x67\x52\xaa\xb0\x58\xa8\x95\xb7\x33\xae\x00\x36\x8f\x4f\xd3\x61\x73\xd8\xea\xa8\x8f\x8d\x8e\x49\xa9\x3c\xf3\x11\x2e\x2b\x9a\x4b\x6f\x7b\x42\x02\x78\xd9\x2a\xb1\x94\xa7\x7a\xd2\xd4\xbd\x55\xd3\x12\x9e\xa6\xa7\xcd\x7a\xab\x68\x4d\x71\x1d\x9f\x0c\xaf\x31\xf9\xe2\xe9\x9a\xb0\xcc\x74\xc5\xff\xfa\xc0\x59\xae\xfb\xc4\x11\xa8\x2a\xc1\x35\xd5\x75\xee\x5d\xd7\xd9\xdf\x87\xa1\x40\xaa\x10\x28\x08\xca\xd3\xb2\x60\x7f\x62\x0a\xe9\x1c\xb4\x6b\x44\xdf\x82\x4e\x07\xf7\xd7\x18\x12\x29\x3a\xcf\xd1\x32\xbc\xe6\xd2\x77\x8c\xf6\xa1\x20\xa9\x28\x17\xb1\x11\xf7\xfc\x37\xbb\x5d\xe9\x8a\x25\xc6\xa3\xef\x14\x74\x1d\x0b\x1f\x16\x29\x1c\xf4\x01\xbf\x62\x42\x86\x65\x51\x50\x9e\x7a\x3d\xb9\xcc\x93\x22\xd5\x5d\xfc\x43\xd4\x0b\xc0\xf6\x9b\x3e\xfd\x62\x4e\xfa\x42\xe9\xd3\xa9\x39\xe9\xee\xd0\xa7\xd4\x9c\xd6\x61\xeb\xa0\xb2\xc0\x78\x71\xd0\x87\x52\x92\xe9\x02\xb9\xd7\x33\xf1\xcb\x0b\x3b\x52\x88\x5c\xe6\xba\x69\x76\x65\xbc\x14\x92\x7c\x12\x74\xe1\xa1\xd0\x56\x33\xca\x72\x4c\x41\x95\x50\x2e\x90\xc3\x37\xea\x20\x63\xb9\x99\x12\x3a\xc6\x14\x33\x14\x90\x91\x61\x5e\x4a\x34\xb5\x6d\xa3\x26\x91\x4a\xcd\xf4\xe4\x78\x7b\xf4\x01\x57\x23\x94\x4a\x94\x2b\x14\x5e\x67\x0b\x05\x90\x6d\xd4\xa6\x2b\x4d\x85\xda\x99\xe5\xad\x7e\x4b\x2d\x0a\x36\xc7\x90\xd8\x9c\x37\x0e\x3f\x62\xe9\x13\x65\x8f\x19\xca\x0a\x45\x4e\x05\xe3\x2a\xe7\xda\x82\xff\x7d\xb6\x6f\x29\x53\x90\x95\x62\x8b\xf9\x5a\x03\x67\xf9\x8e\x2d\x22\xf3\x71\x99\xa2\x67\x66\x9c\x5d\x4e\x7e\xfd\xab\x1d\x93\xb7\x4c\x25\xd7\x60\xb8\x77\xae\x93\x50\x89\xf5\x32\x38\x58\xbb\x68\x09\x0d\x37\xa3\xb9\xdc\x64\x5b\x8a\xa9\x9f\xde\x19\x5d\x56\xca\xa4\x2e\x79\x4f\x3b\xbc\xd5\xc7\xcd\x56\x58\x2f\x3c\x7d\x3f\x0e\xfa\xa0\x73\x17\x2d\x74\xf2\x32\xef\xd2\x75\x86\xb3\x70\x10\x87\x30\x1a\xc4\x83\xc3\x41\x14\xc2\x33\xf9\xc6\x75\xde\x4d\x5d\xc7\x3e\x34\xd6\xf4\xb3\x57\xe7\xd2\x75\xa2\x30\x86\x59\x38\x18\x5d\x0c\xa7\xe3\xf1\x71\x1c\x87\xa3\x8b\x68\x32\x38\x8d\xde\x4f\x63\x98\x4e\x8c\xe8\xe5\xc3\x56\x68\xdc\x2f\x88\xa8\xf8\xb0\x48\x3d\xb9\xcc\x03\x78\x7a\xa3\xf9\xdb\x63\xee\x4e\x8d\x75\xc4\xfb\xfb\x10\x31\x9e\x20\x8c\x23\x88\x3e\x9e\xc0\x8f\x2f\x5f\xfd\x0c\x4c\x41\x42\x39\xcc\x11\xd2\x92\x23\xdc\x32\x75\x6d\x90\xa3\xd9\xf4\x74\x1d\xee\x19\x1c\x1f\x41\xf8\xdb\x71\x14\x47\x70\x0e\x77\x90\x52\x45\xe7\x54\xe2\x85\x9e\x71\xf0\xd7\xfa\x2c\x39\x5d\xc8\xeb\x52\x59\xc6\x3d\x9c\x41\x40\x08\xe1\x70\x0e\x67\x6f\xce\xb7\x25\xbd\xd5\xed\x45\xe1\x49\x38\x8c\xcd\xe4\x84\xa3\xd9\x74\x0c\x72\x25\x49\xa3\x5c\x82\xeb\x38\x9f\xde\x87\xb3\xd0\x02\xfa\xf0\xe2\x99\x7c\xa1\x6f\xfb\xa6\xb3\xcf\xe4\x23\x79\xff\x0f\xaa\xa0\x90\x8a\xb4\xbc\xe5\xdd\x1a\xb0\x4c\x0f\x75\xfb\xa8\xec\x74\x70\x43\x6b\xa7\x53\x77\x02\x1c\x3c\x71\x11\x7c\x5f\xef\x36\x61\xeb\xd1\x17\x34\xcd\x5f\x37\x6f\x00\x54\x5c\x49\x20\x84\x34\x4d\xdd\x06\x90\x3c\xb2\x24\x6a\x61\x2b\x45\x08\xf1\x0d\xac\x9d\xaa\x56\x87\x24\x13\xbc\x9d\x21\x4d\x51\x58\xa3\x7a\x9a\x4a\x95\x96\x95\xd2\x0a\x9f\xcf\x57\x0a\x25\x39\xac\xb2\xcc\xbc\x5c\x35\xab\x0e\xfe\x1b\x56\xad\x5c\x4b\x6a\xed\xfa\xa3\x25\xda\x91\x69\x85\xbb\x19\xd4\xec\x59\xc5\xff\x61\x7a\x36\xe3\x51\x54\x9c\x33\x7e\x75\xd0\x6b\x33\x63\x83\xf3\x1f\xe0\xad\xf1\xfa\xd5\xe1\xf9\x8f\xb0\x51\x88\x0d\xf6\xbf\x29\x55\x52\x72\x7d\x89\xbc\xfa\x3f\x90\xc0\x56\xc3\xdf\x71\x9f\xda\xcb\x6d\x59\x81\xd1\x6f\xec\x6d\xbe\xf3\x9d\x35\xa2\x4e\xdc\x32\xaf\x97\xb3\xf1\xa0\x17\x40\x2a\xd8\x0d\x0a\x62\xd6\xe0\x61\xc5\xf2\xf4\x63\x85\x62\x55\x87\xd4\x74\x44\xb3\xfa\x1f\x76\x9c\xed\x1e\xfb\x58\xd6\xbf\xf5\x33\xcb\xdf\xb5\xe7\x39\xcb\x83\x6f\xf2\xb3\x19\xc9\xbd\xfb\x77\x00\x00\x00\xff\xff\x53\x20\x2b\xd4\x23\x0e\x00\x00")

func templates_testSingletonMssql_main_testTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonMssql_main_testTpl,
		"templates_test/singleton/mssql_main_test.tpl",
	)
}

func templates_testSingletonMssql_main_testTpl() (*asset, error) {
	bytes, err := templates_testSingletonMssql_main_testTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/mssql_main_test.tpl", size: 3619, mode: os.FileMode(420), modTime: time.Unix(1527187208, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_testSingletonMssql_suites_testTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\xb1\x8e\x83\x30\x10\x44\x7b\xbe\x62\x84\x28\xe0\x04\xfe\x80\x93\xae\xba\xea\xae\x48\x11\x91\x0f\x70\xc2\x82\x2c\x39\x1b\x84\x17\x29\x92\xf1\xbf\x47\x18\x8b\x90\xce\xe3\x99\xb7\x3b\xdb\xcf\x7c\x43\x4b\x4e\x2e\xa3\xa3\x49\x4a\xc1\x97\x90\x13\xc3\x83\x6a\x2b\xf8\x0c\xf0\xbe\xc1\xa4\x79\x20\x14\x86\x3b\x7a\xd6\x28\x44\x5f\x2d\xe1\xfb\x07\xaa\x5d\x5f\x2e\x84\x94\x33\x7d\x32\xd5\x9f\xfb\x7f\x18\x8e\x36\x9a\xdd\x27\xeb\x8e\x72\xcb\x9e\xf4\x3d\x0e\x4b\x64\x94\x0b\x46\x3b\x4f\xda\x62\x81\x18\xb1\xf4\xab\x77\x50\xd4\x79\xe6\x32\xf7\xfe\x4d\x87\x90\xd7\x58\x6b\x7f\x7e\x6e\x27\x55\x71\x19\x71\x77\xec\x91\x54\xc8\x5e\x01\x00\x00\xff\xff\x2f\xea\xf2\xb5\x00\x01\x00\x00")

func templates_testSingletonMssql_suites_testTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonMssql_suites_testTpl,
		"templates_test/singleton/mssql_suites_test.tpl",
	)
}

func templates_testSingletonMssql_suites_testTpl() (*asset, error) {
	bytes, err := templates_testSingletonMssql_suites_testTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/mssql_suites_test.tpl", size: 256, mode: os.FileMode(420), modTime: time.Unix(1527186990, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_testSingletonMssql_upsertTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x53\x4d\x6f\xda\x40\x10\x3d\x7b\x7f\xc5\xd4\x52\x24\xaf\xb2\x72\x9a\x6b\x23\x2a\xd1\xe0\x26\x54\xc4\x40\x6c\xda\x03\xe1\xb0\xe0\x31\x59\xc9\x2c\x68\x3f\x50\xa3\x2a\xff\xbd\x1a\xdb\x94\xcf\x4a\x55\x2f\xe0\x9d\x8f\xa7\x37\xef\xcd\xdc\xdc\xc0\xdc\xab\xaa\x98\x6c\x2c\x1a\x37\xf6\x68\xde\x9e\xb2\x6c\x3c\x68\xa2\x16\x24\xd0\xc3\x3a\xe9\x70\x85\xda\x81\x75\x46\xe9\x25\x78\x4b\xbf\xee\x15\xc1\xd7\x8d\x3d\xe9\x24\x6c\xcc\x7a\xab\x0a\x2c\x62\x56\x7a\xbd\xb8\x8c\x1b\x15\x4a\x42\x61\xd4\x16\x8d\x8d\x7b\x4a\x56\xb8\x70\x02\x9c\x9c\x57\x98\xca\x15\xb6\xf8\x02\x36\x46\xad\xa4\x79\x13\xe0\x37\x85\x74\x28\x40\x69\x02\x82\xe9\x6c\x57\xb1\xf6\x6e\xe3\xf7\x01\xbe\xa3\xf6\x8b\x05\x6d\x6d\x87\x42\x2b\xa9\x97\x15\xc6\xfd\x02\xb5\x1b\xfb\xb5\xc3\xac\x52\x0b\x24\x1a\xf1\x60\x2c\x80\xfe\x9f\xc7\x3b\x78\xce\x58\x30\xf7\x25\x7c\x3a\x6c\x7d\x40\xf7\xc5\x97\x25\x9a\x88\xb3\xa0\xc0\x12\xcd\x41\x72\xe4\x77\xc9\xb9\x2f\xa9\xdd\x3a\x69\x5c\x5f\x17\xf8\x93\x50\x6e\x19\x0b\xca\x95\x8b\xbf\x6e\x8c\xd2\xae\xa4\x22\x01\xe1\x53\xf2\xfc\x90\x40\x3f\xcd\x87\x70\x65\x41\x5a\x98\xba\xd9\x8b\x0e\x0f\x74\xe0\x97\xda\x26\x59\x3f\x7d\x80\x28\x4b\x06\xc9\x7d\x0e\x57\x96\xd7\xad\x76\x06\xd1\xf4\xca\xce\x38\x21\xb0\x20\x38\xe0\x56\xc9\x05\xbe\xae\xab\x02\x8d\xad\x07\x9e\x58\xac\x99\x1d\x26\x04\x54\xa8\xa3\x56\x6e\x2e\x60\xcf\x5f\xc0\x2d\x6f\x01\x95\x5e\xda\xf8\xdb\x5a\xfd\x29\x14\xad\xda\x51\xa3\x1f\xbf\x0e\x45\x78\x7d\x10\x1a\x8c\x39\x3f\x9a\xa1\x1d\x61\x98\x42\x14\x52\x62\x6d\x40\x09\xd8\x92\x46\x46\xea\x25\xee\x0c\x27\xfb\x02\x55\x82\x82\x0f\x1d\xf8\x58\xbf\xce\x51\xa0\x9b\xf6\x80\x60\x82\x77\x16\x5c\x10\x6a\x6a\x67\x31\x49\x02\x1d\x52\xb6\xfe\x0c\x05\x6c\x05\x6c\x39\xa3\x96\x33\x40\xd2\xee\xc4\xbc\xeb\xce\x91\x30\xec\x42\xd7\x8f\xc7\x24\x85\xa7\x6e\x7e\xff\x98\xf4\x20\xa7\x47\x78\xd9\xb7\x51\xaf\x9b\x27\x90\x25\x64\x5a\xed\xf3\xde\xa3\x0c\xdd\x48\x1a\xb9\x22\xd3\x6d\x74\xac\xe0\xa9\xc8\xc7\xe6\x34\x87\xc1\x2f\xd3\x6e\x93\x7f\x65\x9d\x0e\xf3\x7f\x61\xde\x4f\xb3\xe4\x39\x87\x88\x76\xed\x7b\x77\x30\x49\xb2\xfa\x3b\x3c\x5b\x8b\xe6\x7c\x04\x84\x24\xe6\x7f\x6f\x61\x7b\x84\xa7\x4b\x48\x63\xa8\xb2\xae\x68\x8e\x9e\xc3\xe7\x76\x37\xce\x29\xbf\xe8\xe1\x24\x1f\x4d\x72\x68\xb8\x27\xbd\xda\xfe\xbb\x70\x27\x66\x4b\xb8\x01\x12\x10\xce\xc4\xbe\x30\xa4\x9d\x7d\x07\xac\x2c\x9e\xa0\xb7\xe0\x77\x61\xbd\x40\x2c\x30\xe8\xbc\xd1\x30\xf7\x65\x9c\x35\x1e\x71\xf6\xce\x7e\x07\x00\x00\xff\xff\xa0\xc3\x9b\xd6\x4d\x05\x00\x00")

func templates_testSingletonMssql_upsertTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonMssql_upsertTpl,
		"templates_test/singleton/mssql_upsert.tpl",
	)
}

func templates_testSingletonMssql_upsertTpl() (*asset, error) {
	bytes, err := templates_testSingletonMssql_upsertTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/mssql_upsert.tpl", size: 1357, mode: os.FileMode(420), modTime: time.Unix(1527189479, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_testUpsertTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x54\xcd\x6e\xdb\x3c\x10\x3c\x8b\x4f\xb1\x9f\xf1\xb5\x90\x0a\x85\x41\xaf\x29\x7c\x48\x9c\x1c\x82\xa2\x86\x11\xcb\x0f\xc0\x48\x2b\x87\x30\x4d\x0a\xe4\x2a\xb1\xcb\xf0\xdd\x0b\xca\x76\xfc\x0f\x18\x28\x7a\xc8\xc1\x06\xb8\x9e\x9d\x99\x1d\x2e\xed\xfd\x15\xfc\x4f\xe2\x59\xe1\x50\xcc\x71\x2c\xf5\xb4\x55\xc2\xc2\x4d\x1f\x78\x11\xab\x3c\x96\xe1\x1d\xdc\xe6\x97\x77\x20\x49\x0a\x07\xc2\x21\x5c\x85\xc0\xf6\x09\x46\xaa\xb5\x42\x1d\xb7\x37\xab\xfa\xc9\xe6\x57\x61\x2f\x6a\x2d\xc5\x1c\xd5\xc9\xd6\x8b\x6c\xef\xb7\xd7\xad\x2e\x81\xd0\x91\xf7\x87\xee\x43\x98\x34\x0e\x2d\xa5\x04\xdf\x22\x42\xea\x29\x2f\x32\xf0\x2c\x21\x3e\x12\x56\x28\x85\x2a\xcd\x18\x4b\x64\x0d\x0a\x75\xea\xfd\xa1\x8f\x10\x06\x46\xb5\x73\xed\x32\xe8\xf7\xcf\x62\x46\x56\xce\x85\x5d\xfe\xc4\xe5\x07\xda\xb3\x24\x21\x3e\x9e\xc9\x26\xed\xc5\xef\x46\xea\x29\x74\xf6\xe0\x4d\xd2\x0b\x18\xad\x96\xd0\xac\xfa\x60\x86\x4b\x28\x57\x9d\xbd\x8c\x25\x81\xb1\xc4\x21\x56\x31\x04\x2b\x74\x65\xe6\xf2\x37\xf2\x21\xbe\x8d\x11\xab\x34\x63\xc9\xab\xb0\x80\xb6\xfb\x18\xcb\x92\xeb\x6b\xb8\x25\xc2\x79\x43\x40\x2f\x08\x8f\xc3\xf1\xc3\x53\x01\x4e\x56\x08\xa6\x06\xa1\x61\x32\x8a\x15\x96\x98\xc8\xb8\x1b\xd3\x76\x04\x1f\xba\x14\x22\xeb\xae\xe8\x98\x6c\x5b\x52\x1a\xdd\xe4\xf0\xd5\xe4\x70\x6a\xfc\xfb\xbb\x62\xd9\xa0\xcb\x81\x6c\x8b\xd9\x8f\x8e\xe4\xbf\x3e\x68\xa9\xd6\x31\x3c\x44\x9f\x75\xda\x9b\xe8\x2e\x00\x32\x5b\x85\x33\x76\xc0\x75\xc2\x37\xf0\xc5\xf5\xf2\x48\xb8\x8e\xc5\x7b\x59\x83\x36\x04\x7c\x68\x06\x46\x13\x2e\x28\x84\x92\x16\x71\xb0\x72\x75\xe6\x77\xa2\x9c\x4d\xad\x69\x75\x95\x66\xde\xa3\xae\x42\x60\xc9\x0a\xf2\xab\x75\x54\x2c\xd2\x8e\x65\x97\xe1\xa8\xf0\x6c\xa4\xe2\x77\x38\x95\xba\xe3\x50\x0e\x77\x6b\xc5\x22\x2d\x69\x91\xc7\x09\x37\x0a\x17\x81\x32\x96\x54\x58\xa3\x05\x5a\xf0\x27\xa3\xd4\xb3\x28\x67\xf1\x3e\x3f\x82\x37\x7c\xbd\xb0\xe7\xe6\x8c\x17\x80\xba\x8a\x8b\x0f\xf1\xd4\xc9\x3d\xea\x1a\x6d\x9a\xed\x9f\x2e\xbb\x87\xb6\x93\x3b\x73\x09\x47\xe9\x97\xa6\xd5\xd4\x15\x0e\x17\x69\xf3\xde\xd2\x8c\x0f\x22\xe8\xc2\x01\xb6\xb3\x1f\xfb\x4c\x37\xba\x11\xd2\x29\x47\xd0\xf7\x3d\x48\xef\x4d\x68\x02\xa3\x11\x2c\x96\xc6\x56\x39\x4c\x0d\xdd\xf4\xf2\x15\x7e\xed\xfa\xe0\x79\x4c\x46\xf7\xb7\xc5\xc3\xa9\xe7\xf1\xd7\xfb\x5f\x0b\xe5\xf0\x34\xe6\xe8\x2f\x82\x73\xfe\x6f\x9f\xca\x27\x5c\xaa\xcf\xb2\x53\x81\xfd\x09\x00\x00\xff\xff\xf3\x21\xaa\x9c\x6d\x07\x00\x00")

func templates_testUpsertTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testUpsertTpl,
		"templates_test/upsert.tpl",
	)
}

func templates_testUpsertTpl() (*asset, error) {
	bytes, err := templates_testUpsertTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/upsert.tpl", size: 1901, mode: os.FileMode(420), modTime: time.Unix(1527895296, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/17_upsert.tpl": templates17_upsertTpl,
	"templates_test/singleton/mssql_main_test.tpl": templates_testSingletonMssql_main_testTpl,
	"templates_test/singleton/mssql_suites_test.tpl": templates_testSingletonMssql_suites_testTpl,
	"templates_test/singleton/mssql_upsert.tpl": templates_testSingletonMssql_upsertTpl,
	"templates_test/upsert.tpl": templates_testUpsertTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"17_upsert.tpl": &bintree{templates17_upsertTpl, map[string]*bintree{}},
	}},
	"templates_test": &bintree{nil, map[string]*bintree{
		"singleton": &bintree{nil, map[string]*bintree{
			"mssql_main_test.tpl": &bintree{templates_testSingletonMssql_main_testTpl, map[string]*bintree{}},
			"mssql_suites_test.tpl": &bintree{templates_testSingletonMssql_suites_testTpl, map[string]*bintree{}},
			"mssql_upsert.tpl": &bintree{templates_testSingletonMssql_upsertTpl, map[string]*bintree{}},
		}},
		"upsert.tpl": &bintree{templates_testUpsertTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

