// Code generated by go-bindata. DO NOT EDIT.
// sources:
// override/templates/17_upsert.go.tpl (5.879kB)
// override/templates/singleton/mssql_upsert.go.tpl (1.357kB)
// override/templates_test/singleton/mssql_main_test.go.tpl (3.945kB)
// override/templates_test/singleton/mssql_suites_test.go.tpl (255B)
// override/templates_test/upsert.go.tpl (1.723kB)

package driver

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templates17_upsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xef\x6f\xdb\xbc\x11\xfe\x2c\xfd\x15\xf7\x06\xc3\x1b\x69\x73\x94\xed\x6b\x5e\xf8\x43\xd2\xb4\x5d\xd0\x26\x73\xeb\x66\x01\x16\x04\x01\x2d\x9d\x6c\x22\x34\xa9\x52\x94\x1d\xcf\xf3\xff\x3e\x1c\x49\xfd\xb0\x63\x27\x4e\xdb\x0c\xfb\x50\xc4\x12\x4f\x77\x0f\x9f\xe7\x78\xc7\xeb\x72\x79\x04\x7f\x62\x82\xb3\x12\x4e\xfa\x90\x9c\xd2\x2f\x2c\x93\x6f\x6c\x24\x10\xdc\x9f\xe4\x8a\x4d\x71\xb5\x0a\xad\x69\x99\x4e\x70\xca\xdc\x32\x7d\xd0\x5a\xc0\x7f\x20\x19\xb6\xab\xf6\x03\x9e\x43\x72\x9a\x65\x1f\x85\x1a\x31\x01\x47\xab\x55\x78\x7c\x0c\xd7\x45\x89\xda\x7c\x04\x66\x0c\x4e\x0b\x53\x02\x93\xc0\x25\xbd\xeb\x01\x93\x19\x64\x0a\xed\xbb\xaa\xc8\x98\x41\x50\x1a\xf8\x58\x2a\x8d\xa0\x24\xa4\x4a\xe6\x82\xa7\x26\x09\xf3\x4a\xa6\x10\x29\xf8\xf3\x72\xe9\xf0\x27\xd7\xc5\x90\xcb\x71\x25\x98\x5e\xad\xe2\x3a\x4a\x64\x41\x48\x65\x20\xb9\x52\xef\x94\x34\xf8\x68\x56\xab\xd4\x3c\x92\x2b\x7a\x48\xfc\xcb\x1e\x2c\x97\x28\x33\x02\xe9\x23\xbf\x53\xa2\x9a\xca\xb2\xe7\xc1\xf9\x47\x18\x29\x2e\x12\xff\x10\x03\x6a\xad\x34\x2c\xc3\x40\xa3\xa9\xb4\x04\x95\xb8\xc0\x2e\x6e\x37\xa6\xfd\xee\x23\x9a\xf3\xb3\x28\x5e\x2e\x51\x94\x68\x71\xf4\xa0\x5e\xf0\x96\x7e\x5d\x66\xab\x55\xef\x59\x24\x71\xb8\x0a\xc3\x06\x74\xe8\xe8\x26\x02\x3b\x94\xd3\xcf\x01\x93\x3c\xdd\x20\x7f\xf0\x73\xec\x83\xf5\x59\xd2\x3b\x4b\xc0\xde\x72\x0c\xde\x5a\x8f\x65\x18\xf0\x9c\x40\x51\x76\xfe\x2f\xc5\xf8\xc3\x06\xfd\xad\x0f\x92\x0b\x42\x11\x14\x44\x51\x64\xfd\xdd\x68\x56\xbc\xd7\x3a\x42\xad\xe3\x38\x0c\x56\xdb\x84\xdb\xa1\xd4\x36\xa1\xa0\x2a\xb9\x1c\xd3\x33\x3e\x62\x5a\x19\xa5\x5f\x73\x70\x3a\xae\x8b\x1f\x53\x71\xf0\x94\x4f\x02\xe2\xb8\x7b\xef\x21\x75\x58\x7d\x2a\x6d\x6b\xee\x5f\x75\xbe\x7a\x99\xeb\xfd\x25\xdf\x92\x67\xdd\xbc\x22\x18\x6f\x27\x6b\x43\xf4\x2f\x97\x70\x3f\x99\xfe\xbf\x54\x6a\x0a\x25\xcf\x41\x41\xbf\x25\xd4\x17\x4e\xbb\x5e\x26\x57\x38\x8f\x0e\x96\xcb\x64\xf0\x30\x76\x6d\xe7\x04\xa4\x82\xe5\x72\xad\x15\x41\xa1\xd5\x8c\x67\x98\x41\xae\x34\x54\x76\xb7\x07\x56\x81\x30\xa0\x2e\x45\x6c\x0b\xe2\xef\xc0\xf0\x29\x96\x86\x4d\x8b\x7b\x67\x75\x3f\x41\x51\xa0\x3e\x80\x04\x56\xce\xba\xcd\x92\xbf\x2b\xf5\x50\x5a\xe9\xd6\xf2\x29\x53\x67\x98\x2b\x8d\x8e\x54\x6b\xb4\x77\x72\x3d\x4d\x9f\x76\xb7\x04\xd7\xa2\xb5\x5c\x86\x61\x20\xff\x7d\x8e\x39\xab\x84\xb1\xad\xf8\x7b\x85\x9a\x63\x99\x5c\x29\xf9\x2f\xd4\xca\x2f\x0d\x91\x64\xf5\xa2\x9f\xab\xb9\x6c\x65\xf7\x4c\xdf\x70\x33\xf1\xc6\x3d\x50\x71\x18\x06\xc7\xc7\x70\x56\x71\x91\x41\xca\xd2\x09\xc2\x03\x2e\x80\xcb\x23\xc1\x25\x42\x35\x16\x5c\x2c\xe0\x08\xa6\x8b\xf2\xbb\x80\x59\x09\x05\xfd\x2d\xb4\x1a\x09\x9c\x96\x61\x30\xaa\x72\x02\x53\x1a\x3d\x65\x72\x2c\x90\x4a\xe3\x59\x95\xe7\xa8\xa3\xd8\xae\x26\x37\x9a\x1b\x1c\x1a\xcd\xe5\x38\x2a\x8d\x4e\x95\x9c\x25\x17\x46\xb1\x68\x2d\x37\x92\x4f\x5c\x66\x74\x48\x48\xb0\xfb\x1e\xa4\xe4\x55\x33\x39\xc6\xf5\x1c\xa2\x7c\x29\x2d\x51\x9b\xbe\x53\xab\x6f\xfb\xfa\x6c\x61\x30\x3a\x4c\x0e\x5f\x82\xb1\x96\x93\xcf\xc0\x58\xb7\xfb\x11\x18\x4f\x7d\x76\x14\x7d\xc6\x17\x09\x72\xd2\x07\x5a\xf5\x0b\x71\x18\xb4\x8c\x0f\xaa\x9a\xf1\x51\x95\xc7\x36\x67\xb7\xea\xef\xf2\xf3\x1d\x69\x7c\x59\x99\xe4\xeb\x67\x95\x3e\x90\x27\xab\x7a\xcf\x89\x9f\x51\xa0\x97\xbf\xbf\x7d\xc0\xc5\xdd\xde\x81\xae\xa5\x70\xa1\xc2\x60\xc6\xb4\x4d\x78\x7b\x98\x43\x7b\x8e\x7e\xf3\x81\x89\x80\xfa\x9e\xa1\xd1\x10\x90\x75\xca\x2f\x3a\x4f\x94\xe6\x61\x10\xec\x42\x70\x2a\x44\x5d\x73\x9e\xb1\xda\x72\x20\xf6\xb3\x56\x95\xe9\x7e\xd0\xaa\x48\x8f\x71\xb3\x0f\xe8\x9e\x8b\x21\x5d\x19\xa6\x85\xc0\x29\x4a\x13\xd5\x1b\x7d\x39\xd6\x69\x65\x14\xb9\xa4\xe4\xe1\x3d\x98\x6d\x26\xa4\xe5\x8d\x78\x6c\x43\x51\xc1\x61\x5c\x96\xa7\x72\xb1\xab\x16\x0c\x34\x9f\x32\xbd\xf8\x84\x8b\xa6\x36\xcf\x62\xf8\xfd\xf7\xd7\x79\xd9\x56\x51\x66\xb1\x43\xd4\x72\xc0\x8a\x02\x65\xe6\xb7\x7c\x7b\xc2\xef\xea\x3e\x70\xcb\xff\xf2\xb7\x93\xbb\x24\x49\x68\x7f\x94\xe8\xf6\x1f\xcf\x41\xa0\xf4\xe6\x31\x35\x82\xbf\x3a\x8f\x2f\xf6\x81\x4a\xda\xa9\xc3\x28\x5f\xf1\x37\xbb\x42\x0f\x52\x55\x89\xcc\xd6\xe5\x91\x2d\x78\x1e\x63\x6a\xf7\x01\x82\x97\xb6\x4b\xd8\x36\x41\xe1\x36\x05\xbc\x44\x3d\xc6\x48\xe3\xab\x84\xfb\x59\x3f\x9e\x59\x3a\x3d\x81\xef\xfa\x27\xfd\x8d\xa2\x78\xdd\x79\xfa\x25\x47\xe3\x69\x7e\xf8\xcc\xf6\x08\x76\x67\xb6\x33\xd8\x9f\xa0\x56\x71\xf7\xe5\x1b\x2b\xee\xf1\x6f\x55\xdc\x16\xa2\x84\xfa\xea\x02\xfa\xce\xde\x95\xb2\x2f\xf4\xea\x72\x38\xfc\xf2\x39\xca\x38\x13\x98\x9a\x1e\x1c\x6c\x84\x3a\xd8\xb9\xe5\x2d\x67\xad\x26\xa9\x53\xef\x2c\x13\xf3\x09\x37\x48\xa0\x48\xe2\x29\x7b\xc0\xe8\xf6\xae\xb4\x25\xbf\x67\x29\xda\x37\x02\x75\xb0\x20\x55\xc5\x22\x6a\x3c\xee\x0f\x2f\x5e\x03\xd2\x9c\xdf\x8e\x27\x07\xdf\x1f\xdc\xe7\x4d\xdd\x0e\xad\x69\xc3\xf0\x8c\x89\x0a\x2f\x59\x51\xd8\x7d\x51\x3b\x68\x6f\x33\x67\x5c\x66\x7e\x69\xd7\x6e\xbf\x2d\x8a\xdd\xf9\xd5\xb8\x6d\x30\xc4\x2e\xc3\x36\xae\x59\x6b\xf7\xac\x6e\xdd\x21\x29\xc8\xd0\xa7\xa0\x43\xac\xd1\xbc\x35\x5e\x9b\x02\xc1\x56\xa8\xeb\x58\xeb\x42\xb9\xb2\xed\x54\x54\xb6\x1c\x68\xcc\x29\x2d\x93\x0b\x99\x71\x8d\xa9\x89\xea\x17\xff\x24\x8b\x7f\xe4\x91\xa2\x94\x98\x31\xb1\x76\x75\xb4\x8b\xe5\x07\xad\xa6\xf5\x16\xac\x43\x7f\x17\x58\xd3\x29\x76\xbd\xdb\x21\x29\xe1\xf6\x8e\x4b\x83\x3a\x67\x29\x2e\xdd\x75\x98\xb8\xdb\x24\xab\x43\x64\xfd\x61\x1b\x7c\x60\xf4\xee\xd0\x1d\x1f\xf5\xad\x7d\x6d\x54\x69\x6e\xe1\x76\x86\x38\xc7\x51\x35\xbe\x54\x19\xda\x50\xf9\xd4\x24\x1f\x0a\xcd\xa5\x11\x32\x6a\xd7\xed\xc5\x4a\xd7\x01\xec\x29\x8f\x5f\xb6\x26\xca\x62\x7f\x13\xa7\x49\xa8\x09\x9c\x91\x55\x0f\xe6\xd6\xce\x5e\xcf\xe8\xdb\x8b\xd2\x7e\x1d\xa5\xe6\x31\xfe\xc3\xd9\x3c\xc5\x34\xdf\x03\xc9\x7c\x5b\xfc\x7a\x70\xdc\x83\xef\xad\x7c\x05\x2e\x77\x69\xf0\x48\x6c\x4d\xfb\xaa\xe6\x51\x07\x85\x0b\x47\x87\x35\x19\xa6\xcc\x9e\x05\x12\xcd\x1f\xf4\x2e\x01\xdb\x3c\xf9\x50\x91\x1d\x73\x5e\xe3\xd5\x6f\xab\xc9\xfd\x7e\x1f\xca\xef\x22\x79\xaf\xf5\x95\xfa\xaa\xe6\xee\x6e\xec\x23\xd2\xa1\x38\x3e\x06\x5b\x8c\xed\x30\x2c\x0f\x8d\xcf\x4a\x60\x72\x61\x26\x34\x35\xcf\x27\x28\xc1\x4c\x50\xe3\x61\x49\xd3\xa1\xab\x57\xfe\xd8\x80\xdd\xc5\x6e\x8e\xee\xeb\x23\x6e\x37\x47\x13\xed\x76\x8a\x36\x19\x79\xfa\xdd\xcb\x84\xac\xef\xbf\x9d\x2b\xb7\xce\x83\xd4\x03\x6f\x34\x2b\x22\xd4\xda\xf5\x9f\x57\x74\xc2\x7a\xfa\xdd\xb8\x70\xef\x77\x83\xaf\x27\x85\x3d\xcc\xed\x64\x00\x7d\xb7\xdd\xbd\x03\x34\x13\x42\xf0\xcc\xcc\xdd\xfc\x07\x6a\xa6\x4e\x73\x83\xfa\x87\xe6\x6d\x3f\x51\x37\xb2\x79\xa7\x92\x8b\xee\xac\xbd\x0a\xff\x1b\x00\x00\xff\xff\x4b\xbc\xa0\x72\xf7\x16\x00\x00")

func templates17_upsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates17_upsertGoTpl,
		"templates/17_upsert.go.tpl",
	)
}

func templates17_upsertGoTpl() (*asset, error) {
	bytes, err := templates17_upsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/17_upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x98, 0xf3, 0xf7, 0xff, 0x60, 0x42, 0x6e, 0xf0, 0x84, 0xd2, 0x83, 0x18, 0x64, 0x49, 0x51, 0xee, 0x5d, 0xda, 0x60, 0x43, 0xed, 0x0, 0xbc, 0x4, 0xe4, 0x41, 0x62, 0xa8, 0xc5, 0x68, 0xcb, 0xdf}}
	return a, nil
}

var _templatesSingletonMssql_upsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x53\x4d\x6f\xda\x40\x10\x3d\x7b\x7f\xc5\xd4\x52\x24\xaf\xb2\x72\x9a\x6b\x23\x2a\xd1\xe0\x26\x54\xc4\x40\x6c\xda\x03\xe1\xb0\xe0\x31\x59\xc9\x2c\x68\x3f\x50\xa3\x2a\xff\xbd\x1a\xdb\x94\xcf\x4a\x55\x2f\xe0\x9d\x8f\xa7\x37\xef\xcd\xdc\xdc\xc0\xdc\xab\xaa\x98\x6c\x2c\x1a\x37\xf6\x68\xde\x9e\xb2\x6c\x3c\x68\xa2\x16\x24\xd0\xc3\x3a\xe9\x70\x85\xda\x81\x75\x46\xe9\x25\x78\x4b\xbf\xee\x15\xc1\xd7\x8d\x3d\xe9\x24\x6c\xcc\x7a\xab\x0a\x2c\x62\x56\x7a\xbd\xb8\x8c\x1b\x15\x4a\x42\x61\xd4\x16\x8d\x8d\x7b\x4a\x56\xb8\x70\x02\x9c\x9c\x57\x98\xca\x15\xb6\xf8\x02\x36\x46\xad\xa4\x79\x13\xe0\x37\x85\x74\x28\x40\x69\x02\x82\xe9\x6c\x57\xb1\xf6\x6e\xe3\xf7\x01\xbe\xa3\xf6\x8b\x05\x6d\x6d\x87\x42\x2b\xa9\x97\x15\xc6\xfd\x02\xb5\x1b\xfb\xb5\xc3\xac\x52\x0b\x24\x1a\xf1\x60\x2c\x80\xfe\x9f\xc7\x3b\x78\xce\x58\x30\xf7\x25\x7c\x3a\x6c\x7d\x40\xf7\xc5\x97\x25\x9a\x88\xb3\xa0\xc0\x12\xcd\x41\x72\xe4\x77\xc9\xb9\x2f\xa9\xdd\x3a\x69\x5c\x5f\x17\xf8\x93\x50\x6e\x19\x0b\xca\x95\x8b\xbf\x6e\x8c\xd2\xae\xa4\x22\x01\xe1\x53\xf2\xfc\x90\x40\x3f\xcd\x87\x70\x65\x41\x5a\x98\xba\xd9\x8b\x0e\x0f\x74\xe0\x97\xda\x26\x59\x3f\x7d\x80\x28\x4b\x06\xc9\x7d\x0e\x57\x96\xd7\xad\x76\x06\xd1\xf4\xca\xce\x38\x21\xb0\x20\x38\xe0\x56\xc9\x05\xbe\xae\xab\x02\x8d\xad\x07\x9e\x58\xac\x99\x1d\x26\x04\x54\xa8\xa3\x56\x6e\x2e\x60\xcf\x5f\xc0\x2d\x6f\x01\x95\x5e\xda\xf8\xdb\x5a\xfd\x29\x14\xad\xda\x51\xa3\x1f\xbf\x0e\x45\x78\x7d\x10\x1a\x8c\x39\x3f\x9a\xa1\x1d\x61\x98\x42\x14\x52\x62\x6d\x40\x09\xd8\x92\x46\x46\xea\x25\xee\x0c\x27\xfb\x02\x55\x82\x82\x0f\x1d\xf8\x58\xbf\xce\x51\xa0\x9b\xf6\x80\x60\x82\x77\x16\x5c\x10\x6a\x6a\x67\x31\x49\x02\x1d\x52\xb6\xfe\x0c\x05\x6c\x05\x6c\x39\xa3\x96\x33\x40\xd2\xee\xc4\xbc\xeb\xce\x91\x30\xec\x42\xd7\x8f\xc7\x24\x85\xa7\x6e\x7e\xff\x98\xf4\x20\xa7\x47\x78\xd9\xb7\x51\xaf\x9b\x27\x90\x25\x64\x5a\xed\xf3\xde\xa3\x0c\xdd\x48\x1a\xb9\x22\xd3\x6d\x74\xac\xe0\xa9\xc8\xc7\xe6\x34\x87\xc1\x2f\xd3\x6e\x93\x7f\x65\x9d\x0e\xf3\x7f\x61\xde\x4f\xb3\xe4\x39\x87\x88\x76\xed\x7b\x77\x30\x49\xb2\xfa\x3b\x3c\x5b\x8b\xe6\x7c\x04\x84\x24\xe6\x7f\x6f\x61\x7b\x84\xa7\x4b\x48\x63\xa8\xb2\xae\x68\x8e\x9e\xc3\xe7\x76\x37\xce\x29\xbf\xe8\xe1\x24\x1f\x4d\x72\x68\xb8\x27\xbd\xda\xfe\xbb\x70\x27\x66\x4b\xb8\x01\x12\x10\xce\xc4\xbe\x30\xa4\x9d\x7d\x07\xac\x2c\x9e\xa0\xb7\xe0\x77\x61\xbd\x40\x2c\x30\xe8\xbc\xd1\x30\xf7\x65\x9c\x35\x1e\x71\xf6\xce\x7e\x07\x00\x00\xff\xff\xa0\xc3\x9b\xd6\x4d\x05\x00\x00")

func templatesSingletonMssql_upsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSingletonMssql_upsertGoTpl,
		"templates/singleton/mssql_upsert.go.tpl",
	)
}

func templatesSingletonMssql_upsertGoTpl() (*asset, error) {
	bytes, err := templatesSingletonMssql_upsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/singleton/mssql_upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa6, 0x69, 0x72, 0x38, 0xff, 0x12, 0xac, 0xfa, 0x17, 0xbb, 0xc6, 0xa8, 0xc0, 0x42, 0x97, 0xf5, 0x69, 0xf1, 0x9d, 0x12, 0xd9, 0x70, 0x6f, 0x7a, 0xe3, 0x4, 0xf9, 0x1a, 0xc7, 0xd0, 0xf4, 0x4}}
	return a, nil
}

var _templates_testSingletonMssql_main_testGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\xed\x53\xdb\x36\x18\xff\x6c\xff\x15\x4f\x73\xd7\xd6\x66\x9e\x68\xd7\xdd\x3e\xd0\xcb\xf5\xf2\x62\x5a\xae\x24\x81\x38\x5b\xb7\xa3\x0c\x94\x58\x06\x1d\xb6\x64\x24\x19\x9a\x31\xfe\xf7\x9d\x24\xdb\xb1\xd3\x24\x85\x4f\xe3\x4b\xd0\xa3\xe7\xf5\xf7\xbc\xc9\x77\x58\x80\xb8\xfa\x36\x8a\xa2\xd3\xe3\x1b\xb2\x84\x2e\x08\x72\x45\xbe\xe5\x68\x54\x48\x35\xe0\x59\x4e\x53\xe2\x5d\x7a\x1f\x32\xff\xef\xde\xf1\x2c\x9c\xc2\xac\xd7\x3f\x0e\x01\xed\xf5\x86\xc3\xaf\xf2\xa7\xc1\x64\x1c\xcd\xa6\xbd\xa3\xf1\x0c\xd0\x1e\x1c\x4e\xa6\xe1\xd1\xc7\x31\x7c\x0e\xff\x42\x7b\x1f\xd0\xde\x57\xf6\x61\x1a\x1e\x86\xd3\x70\x3c\x08\x23\xb4\x77\xe9\xbb\xae\x5a\xe6\x04\x32\x29\x6f\xd3\x19\x91\x8a\x08\x90\x4a\x14\x0b\x05\x0f\xae\x13\xcf\x07\x9c\x31\xd0\x7f\x7b\xf2\x36\x45\xc3\xbe\xa6\x8d\x71\x46\x0c\x4d\x2a\x41\xd9\x95\xeb\x5c\x73\xa9\x00\x5a\xa4\x42\x12\xb1\x46\xca\xb1\x94\x6b\x24\x29\xd3\x8c\xc7\xa4\xc5\xc5\x45\xa5\x8b\x32\xe5\x3a\x8a\x48\x35\xec\x1b\x93\xb5\xd4\x0d\xcd\xa3\xd3\xe3\x41\x16\xc3\x9c\xf3\xd4\x7d\x74\xdd\xa4\x60\x0b\xa0\x8c\x2a\xcf\xb7\x7e\x8f\x30\x65\xd0\x85\x57\x8d\xb8\x1e\x1e\x6b\x4e\x2f\x83\xbd\xc6\x8d\x0f\x92\xa8\x22\xf7\x7c\x20\x42\x70\xa1\x35\xe8\x24\x10\x21\x2c\xc1\x75\x9d\x3b\x9a\x13\x81\x22\xa2\x86\x24\xc1\x45\xaa\xbc\x8e\x91\x47\x72\x71\x4d\x32\xdc\x09\xa0\x13\xcf\x79\xc7\xdf\xc1\x68\x43\xd5\x9c\x4a\x14\x64\x17\xab\x86\xa0\x13\xc0\xdb\x5f\xdf\xbd\xf3\x5d\xd7\xc9\x50\x09\x79\x17\xac\xc4\x47\xa2\x22\x03\x45\x25\x10\xcf\x19\xce\x8c\xca\x0c\x99\x5c\x6c\xe5\xd4\xb7\x96\xcf\x24\x68\x2b\x9f\xbe\xb5\x7c\x26\x6b\x5b\xf9\xf4\x6d\xc9\xa7\xf3\xd6\xe0\x3b\x62\xed\x78\x0c\x53\x95\xef\xad\xfa\x2a\x94\x0c\x77\x23\xf5\x5b\x05\x34\x4f\x33\xfc\x46\x6d\x34\x64\xfa\x9c\xa7\xb5\x89\x1b\x9a\xcb\xdb\x74\x91\xc5\x1d\x8d\xae\x4e\x72\x17\xee\x70\x8a\x51\x9f\x5c\x51\xf6\x07\x4e\x69\x8c\x15\xe5\xcc\xf3\x51\x79\x20\x9e\xeb\x38\x86\xc5\x1a\x1f\x73\x15\x66\xb9\x5a\x7a\x3b\xd1\x0b\xa0\x7d\x7c\x9e\x0e\x9b\xa9\x5a\x47\x79\xac\x74\x8c\xb9\xf2\xcc\x3f\xe1\x6d\x81\x53\xe9\x6d\x87\x3d\x80\x37\xb5\x12\x4b\x79\xae\x27\x15\xbc\xb5\x9a\x9a\xf0\x3c\x3d\x75\x6e\x6b\x45\x2b\x8a\xeb\xf8\x68\x70\x4d\x16\x37\x9e\xce\x09\x4d\x4c\xef\xbd\xe8\x02\xa3\xa9\xee\x46\x47\x10\x55\x08\xa6\xa9\xae\xf3\xe8\xba\xce\xfe\x3e\x0c\x04\xc1\x8a\x00\x06\x81\x59\xcc\x33\xfa\x0f\x89\x21\x9e\x83\x76\x0d\x19\x15\x29\x61\x5e\xb3\x88\x7c\xe8\x76\xe1\x8d\x51\xb7\x56\x5b\xb5\x06\x14\x29\x3c\x4f\x89\xbd\xf0\xaa\xc6\xf3\xad\x4d\x9a\xc0\x8b\x56\x81\x69\x4d\xa5\xab\x5d\xc8\x50\x2c\x78\x3e\x33\x6a\x3d\xff\xfd\x7a\x00\xad\x08\x9c\xc7\xb6\xe4\xc2\x84\xf2\x64\x59\xd7\x71\xac\x84\x76\xe2\xa0\x0b\xe4\x1b\x59\xa0\x01\xcf\x32\xcc\x62\xaf\x53\xd6\x76\x00\x9d\x9f\xa3\x4e\x00\x76\x22\xe8\xd3\xef\xe6\xa4\x8b\x51\x9f\x4e\xcc\x49\xf7\xaf\x3e\xc5\xe6\xd4\xc0\x4a\x1b\x49\x02\xe3\xc9\x41\x17\xb8\x44\x93\x9c\x30\xaf\x63\xe0\x91\x17\x76\xea\x21\x79\x9b\xea\xae\xdb\x90\xaf\x86\xcb\x5c\x48\xf4\x45\xe0\xdc\x23\x42\x1b\x4e\x30\x4d\x49\x0c\x8a\x03\xcf\x09\x83\xef\x14\x42\x42\x53\xd3\xcb\x36\xd0\x98\x24\x44\x80\x1e\xda\x7a\xb2\xc3\x05\x74\x21\x41\x83\x94\x4b\xe2\xf9\xf0\x68\xaa\xc5\x91\x2a\x2e\xfd\x7c\x35\x5f\x2a\x22\x51\xbf\x48\x12\x33\xef\x1b\x40\xa1\x48\xc5\x66\x25\x30\x72\x7f\xf8\x99\x2c\x87\x44\x2a\xc1\x97\x44\x78\x8d\x5d\x1b\x40\xe2\xaf\x0b\xd9\x24\x59\x1b\x6e\x33\x6f\x4d\x2e\x2c\xd4\xee\xc4\x6d\x45\x41\x6a\x59\xb0\x49\x83\x85\x4d\xe2\x2a\xfc\x0d\xc6\xbe\x60\xba\xd1\x56\x92\x29\x74\x22\x28\x53\x29\xd3\x46\xfc\x75\x9a\x8d\xa0\xec\x55\xcf\xf7\x9f\xe8\xdf\x3d\xa6\x0a\x12\x2e\x36\xbb\x68\xbc\x2c\xb5\x30\x9a\xee\x58\xb0\x32\x1d\xf1\x98\x78\x66\xfc\xdb\x45\xee\x97\xbf\xda\x7d\x79\x4f\xd5\xe2\x1a\xcc\xed\x83\xeb\x2c\xb0\x24\xe5\x9e\x3c\x58\x75\xbf\x25\x54\xb7\x09\x4e\x65\xfb\xda\x52\x5c\x5d\x33\x7a\x9d\x36\xaf\x62\x2a\x75\xa1\x75\xb4\xc3\x5b\x7d\x6c\xb7\xe1\xea\x2d\xa0\xab\xf2\xa0\x0b\x1a\xcc\x28\xd7\x68\x26\xde\xa5\xeb\x0c\xa6\x61\x6f\x16\xc2\xb0\x37\xeb\xf5\x7b\x51\x08\x2f\xe5\x7b\xd7\xf9\x38\x71\x1d\xfb\x28\x5b\xd1\xcf\xde\x9e\x4b\xd7\x89\xc2\x19\x4c\xc3\xde\xf0\x62\x30\x19\x8d\x8e\x66\xb3\x70\x78\x11\x8d\x7b\x27\xd1\xa7\xc9\x0c\x26\x63\x23\x7a\xb9\xde\x83\x95\xfb\x19\x12\x05\x1b\x64\xb1\x27\x6f\xd3\x00\x9e\xdf\xe1\xfe\xf6\x98\x9b\x43\x6b\x15\xf1\xfe\x3e\x44\x94\x2d\x08\x8c\x22\x88\x4e\x8f\xe1\x97\x37\x6f\x7f\x03\xaa\x60\x81\x19\xcc\x09\xc4\x9c\x11\xb8\xa7\xea\xda\x70\x0e\xa7\x93\x93\x55\xb8\x67\x70\x74\x08\xe1\x9f\x47\xd1\x2c\x82\x73\x78\x80\x18\x2b\x3c\xc7\x92\x5c\xe8\xc1\x0c\xff\xae\xce\x92\xe1\x5c\x5e\x73\x65\x2f\x1e\xe1\x0c\x02\x84\x10\x83\x73\x38\x7b\x7f\xbe\x0d\xf4\x5a\xb7\x17\x85\xc7\xe1\x60\x66\xc6\x3d\x1c\x4e\x27\x23\x90\x4b\x89\x2a\xe5\x12\x5c\xc7\xf9\xf2\x29\x9c\x86\x96\xa1\x0b\xaf\x5f\xca\xd7\xba\x64\xdb\xce\xbe\x94\x1b\x70\xff\x1f\xb2\xa0\x08\x16\x31\xbf\x67\xcd\x1c\xd0\x44\xef\x14\xfb\x00\x6f\xf4\x79\x45\xab\x86\xe0\x8f\x77\xd3\xc1\xf3\x97\xd3\x53\xbb\xba\x02\x44\x8f\xd6\xa0\x1a\x0d\x65\x5b\x07\x80\xc5\x95\x04\x84\x50\xd5\xee\x75\x68\x8b\x0d\x7b\xab\x14\xb6\x52\x08\x21\xdf\xb0\xd5\x53\xdb\xea\x90\x68\x4c\xee\xa7\x04\xc7\x44\x58\xa3\x7a\xfe\x4b\x15\xf3\x42\x6d\x1c\xff\x3b\x36\x43\xa9\x5c\x4b\x9a\xe9\xce\x0b\x55\x13\x5b\x23\xbf\x01\xa3\xbe\x9e\x16\x6c\x03\x82\xcd\x41\x5b\x0d\x4f\x51\x30\x46\xd9\xd5\x41\xa7\x46\xc6\x06\xe7\xbb\xdf\x0d\x66\x5e\xa8\xd6\x60\xfe\xc1\xdc\x5e\x7f\x0d\x3d\x25\x55\x0b\xce\x74\x79\x79\xe5\x77\x5c\x60\xb3\xe1\xef\xa8\xb4\xba\xec\xed\x55\x60\xf4\x1b\x7b\xed\x8f\x23\x67\xc5\x51\x02\x77\x9b\x96\xcf\x05\xe3\x41\x27\x80\x58\xd0\x3b\x22\x90\x59\xb3\xfd\x82\xa6\xf1\x69\x41\xc4\xb2\x0c\xa9\xea\x95\xea\x35\xb2\xde\x8b\xb6\xaf\xec\x17\x86\xfe\x2d\x5f\x8d\x1a\x89\xad\x0f\x45\x46\xd3\xe0\x3b\x7c\xda\x91\x3c\xba\xff\x05\x00\x00\xff\xff\x68\x86\x33\x94\x69\x0f\x00\x00")

func templates_testSingletonMssql_main_testGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonMssql_main_testGoTpl,
		"templates_test/singleton/mssql_main_test.go.tpl",
	)
}

func templates_testSingletonMssql_main_testGoTpl() (*asset, error) {
	bytes, err := templates_testSingletonMssql_main_testGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/mssql_main_test.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0x48, 0x72, 0x18, 0x21, 0xc4, 0x79, 0x4b, 0x1c, 0xde, 0x6, 0x5c, 0x37, 0xfb, 0x48, 0xf1, 0x61, 0xfd, 0x28, 0x9e, 0x5e, 0x56, 0x88, 0xbf, 0x7b, 0xc0, 0xb4, 0x66, 0x57, 0x69, 0xe0, 0x87}}
	return a, nil
}

var _templates_testSingletonMssql_suites_testGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xc1\x0a\xc2\x30\x10\x44\xef\xfd\x8a\xa5\xe4\xd0\x4a\x9b\x0f\x10\x3c\x78\xd4\x83\x88\xb4\x1f\x10\xed\xb6\x04\xe2\x5a\xba\x5b\x10\x42\xfe\x5d\xd2\x46\xe9\xc1\xdb\x0c\x6f\x32\x99\xed\x67\x7a\x40\x83\x2c\xed\xc8\x38\x49\x21\xb0\x13\x64\xb1\x34\xe8\xa6\x04\x9f\x01\x78\x5f\xc3\x64\x68\x40\x50\x96\x3a\x7c\x57\xa0\xc4\xdc\x1d\xc2\xfe\x00\xba\x89\x8a\x43\x48\x39\xdb\x27\xa8\x4f\x7c\x7e\x59\x5a\x30\xd4\x3f\x8e\x8e\xb7\x56\x19\x67\x0d\xc7\x22\xa5\x8f\x51\x22\xaf\x8d\xdf\x96\x8b\x79\xe2\x92\x16\x7d\x9b\xa9\xc8\xbd\x5f\x9f\xe8\x76\xbc\xba\x79\x32\x2e\x84\xbc\x82\x38\xf8\x0f\x59\x2f\x2a\x97\xbf\x90\xba\xed\x8c\xe4\x42\xf6\x09\x00\x00\xff\xff\x11\x5d\x4c\xce\xff\x00\x00\x00")

func templates_testSingletonMssql_suites_testGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonMssql_suites_testGoTpl,
		"templates_test/singleton/mssql_suites_test.go.tpl",
	)
}

func templates_testSingletonMssql_suites_testGoTpl() (*asset, error) {
	bytes, err := templates_testSingletonMssql_suites_testGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/mssql_suites_test.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x10, 0xc4, 0x71, 0xaf, 0xd9, 0x16, 0x41, 0x8b, 0x4b, 0xfc, 0xe8, 0xba, 0xfd, 0xfa, 0x4d, 0x2c, 0x1, 0xd1, 0x0, 0xe1, 0xb0, 0x78, 0xee, 0x7f, 0xd0, 0x65, 0xf3, 0xa1, 0x43, 0xba, 0x3c, 0xe7}}
	return a, nil
}

var _templates_testUpsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x54\x4d\x6f\xdb\x30\x0c\x3d\x5b\xbf\x82\x0b\xb6\x41\x1e\x5c\x15\xbb\x76\xc8\x21\xfd\x38\x14\xc3\x82\xa0\x71\xce\x83\x6a\xd3\xa9\x10\x45\x32\x24\x7a\x49\x66\xe8\xbf\x0f\x92\xd3\x36\x6d\xda\xa1\x87\xed\xd0\x43\x62\x4b\x78\x7c\x8f\x7c\x24\xdd\xf7\x27\xf0\x51\x6a\x25\x3d\x9c\x8d\x41\x4c\xe2\x1b\x7a\x51\xca\x5b\x8d\x30\x3c\xc4\x54\xae\x31\x04\xd6\x74\xa6\x02\x42\x4f\x7d\x3f\x44\x88\x45\x3b\xd3\x9d\x93\x3a\x84\x45\xeb\xd1\x11\x27\xf8\x12\x01\xca\x2c\x45\x99\x43\xcf\x32\x12\x33\xe9\xa4\xd6\xa8\x79\xce\x58\xa6\x1a\xd0\x68\xf8\x03\xc1\xa5\xdd\x98\xb9\x32\xcb\x4e\x4b\x17\xc2\x44\xeb\x0b\xab\xbb\xb5\xf1\x39\x8c\xc7\x7f\x43\xce\x9c\x5a\x4b\xb7\xfb\x8e\xbb\x87\x80\x9e\x65\x19\x89\xf9\x4a\xb5\x7c\x14\xff\x5b\x65\x96\x40\xa9\x8c\x8d\xa2\x3b\xb0\x46\xef\xa0\x1d\xe2\x60\x85\x3b\xa8\x86\xc8\x51\xce\xb2\xc0\x58\xe6\x11\xeb\x68\x81\x93\xa6\xb6\x6b\xf5\x1b\xc5\x14\x37\x73\xc4\x9a\xe7\x2c\xfb\x25\x1d\xa0\x4b\x3f\xeb\x58\x76\x7a\x0a\x13\x22\x5c\xb7\x04\x74\x87\x70\x3d\x9d\x5f\xdd\x94\xe0\x55\x8d\x60\x1b\x90\x06\x16\xb3\x78\xc3\x32\x1b\x19\x0f\xec\x7a\xac\xa0\x0f\xc9\x8d\x48\x7a\xa8\x39\x27\xd7\x55\xc4\x63\x32\x05\x7c\xb6\x05\xbc\x62\xc0\xe5\x79\xb9\x6b\xd1\x17\x40\xae\xc3\xfc\x5b\xe2\xf9\x30\x06\xa3\xf4\xde\x88\xab\x98\x69\xc3\x47\x0b\x93\x2c\x20\xfb\x28\xf2\x72\x42\xe0\x93\xf4\x19\x7c\xf2\xa3\x22\xf2\xed\x7d\xe9\x7b\xd5\x80\xb1\x04\x62\x6a\x2f\xac\x21\xdc\x52\x08\x15\x6d\x63\x65\xd5\x70\x16\xe7\xb2\x5a\x2d\x9d\xed\x4c\xcd\xf3\xbe\x47\x53\x87\xc0\xb2\x01\xf2\xa3\xf3\x54\x6e\x79\x62\x39\x64\x38\xba\xb8\xb5\x4a\x8b\x73\x5c\x2a\x93\x38\xb4\xc7\xc3\xbb\x72\xcb\x2b\xda\x16\xb1\xc0\x7b\x85\x37\x81\x72\x96\xd5\xd8\xa0\x83\x38\xbc\x3c\x87\x1e\x7e\xc2\x18\x68\x2b\x6e\xac\xd6\xb7\xb2\x5a\xf1\x1c\x42\xec\xf0\x43\x2f\xac\xd8\xcf\xf2\x6b\x85\xc7\x9e\xa0\xa9\xe1\x24\x04\x88\xa7\xa4\x7f\x6d\x1a\x74\x3c\x7f\x7a\x7a\x5b\x5f\xba\x24\xf7\x72\x53\x8e\xba\x51\xd9\xce\x50\xba\x78\x36\x59\xf7\x8b\xc8\x73\x71\x11\x31\x6f\x4c\xff\xb1\xf2\xe3\x2c\xf9\xbd\x6c\x84\x24\xe1\x08\xfa\xfa\x04\x32\xda\x48\x43\x60\x0d\x82\xc3\xca\xba\xba\x80\xa5\xa5\xb3\x51\x31\xe0\xf7\x49\x3f\x5b\x97\xc5\xec\x72\x52\x5e\xbd\xb4\x2e\xff\x62\x21\x1a\xa9\x3d\xbe\x0a\x3b\xfa\x70\x08\x21\xfe\xeb\xfa\xbc\xbf\xb9\x7a\x27\x63\x15\xd8\x9f\x00\x00\x00\xff\xff\xf6\x71\x76\xb4\xbb\x06\x00\x00")

func templates_testUpsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testUpsertGoTpl,
		"templates_test/upsert.go.tpl",
	)
}

func templates_testUpsertGoTpl() (*asset, error) {
	bytes, err := templates_testUpsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xea, 0xe3, 0xe8, 0x1e, 0xc3, 0xef, 0x74, 0x5d, 0xf, 0xf2, 0x30, 0xa1, 0x6, 0x82, 0x8f, 0x70, 0xe4, 0xb, 0xca, 0x51, 0x16, 0xa2, 0x3d, 0x8f, 0x40, 0x59, 0xec, 0xfe, 0x96, 0x39, 0x2, 0x36}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/17_upsert.go.tpl": templates17_upsertGoTpl,

	"templates/singleton/mssql_upsert.go.tpl": templatesSingletonMssql_upsertGoTpl,

	"templates_test/singleton/mssql_main_test.go.tpl": templates_testSingletonMssql_main_testGoTpl,

	"templates_test/singleton/mssql_suites_test.go.tpl": templates_testSingletonMssql_suites_testGoTpl,

	"templates_test/upsert.go.tpl": templates_testUpsertGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"17_upsert.go.tpl": &bintree{templates17_upsertGoTpl, map[string]*bintree{}},
		"singleton": &bintree{nil, map[string]*bintree{
			"mssql_upsert.go.tpl": &bintree{templatesSingletonMssql_upsertGoTpl, map[string]*bintree{}},
		}},
	}},
	"templates_test": &bintree{nil, map[string]*bintree{
		"singleton": &bintree{nil, map[string]*bintree{
			"mssql_main_test.go.tpl":   &bintree{templates_testSingletonMssql_main_testGoTpl, map[string]*bintree{}},
			"mssql_suites_test.go.tpl": &bintree{templates_testSingletonMssql_suites_testGoTpl, map[string]*bintree{}},
		}},
		"upsert.go.tpl": &bintree{templates_testUpsertGoTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
