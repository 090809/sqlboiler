// Code generated by go-bindata.
// sources:
// override/templates/17_upsert.go.tpl
// override/templates/singleton/mssql_upsert.go.tpl
// override/templates_test/singleton/mssql_main_test.go.tpl
// override/templates_test/singleton/mssql_suites_test.go.tpl
// override/templates_test/upsert.go.tpl
// DO NOT EDIT!

package driver

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templates17_upsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xdd\x6e\xdb\xc6\x12\xbe\x26\x9f\x62\x62\x1c\xc4\xe4\x39\x32\x7d\x7a\xeb\x42\x17\x76\x9c\xa4\x41\x62\x57\x89\xe2\x06\xa8\x61\x18\x2b\x72\x28\x2d\xbc\xda\x65\x96\x4b\x39\xaa\xca\x77\x2f\x66\x77\x29\x52\xb2\x64\xc9\x49\x5d\xf4\xc2\xb0\xc9\x1d\xce\xcc\x7e\xdf\xfc\x7a\xb1\x38\x82\xff\x30\xc1\x59\x09\x27\x7d\x48\x4e\xe9\x2f\x2c\x93\xcf\x6c\x24\x10\xdc\xaf\xe4\x92\x4d\xb1\xae\x43\x2b\x5a\xa6\x13\x9c\x32\x77\x4c\x1f\xb4\x12\xf0\x27\x24\xc3\xf6\xd4\x7e\xc0\x73\x48\x4e\xb3\xec\xad\x50\x23\x26\xe0\xa8\xae\xc3\xe3\x63\xb8\x2a\x4a\xd4\xe6\x2d\x30\x63\x70\x5a\x98\x12\x98\x04\x2e\xe9\x5d\x0f\x98\xcc\x20\x53\x68\xdf\x55\x45\xc6\x0c\x82\xd2\xc0\xc7\x52\x69\x04\x25\x21\x55\x32\x17\x3c\x35\x49\x98\x57\x32\x85\x48\xc1\x7f\x17\x0b\xe7\x7f\x72\x55\x0c\xb9\x1c\x57\x82\xe9\xba\x8e\x1b\x2b\x91\x75\x42\x2a\x03\xc9\xa5\x7a\xa5\xa4\xc1\x6f\xa6\xae\x53\xf3\x8d\x54\xd1\x43\xe2\x5f\xf6\x60\xb1\x40\x99\x91\x93\xde\xf2\x2b\x25\xaa\xa9\x2c\x7b\xde\x39\xff\x08\x23\xc5\x45\xe2\x1f\x62\x40\xad\x95\x86\x45\x18\x68\x34\x95\x96\xa0\x12\x67\xd8\xd9\xed\xda\xb4\xdf\xbd\x45\x73\x7e\x16\xc5\x8b\x05\x8a\x12\xad\x1f\x3d\x68\x0e\xbc\xa4\x3f\x97\x59\x5d\xf7\x1e\xf5\x24\x0e\xeb\x30\x5c\x3a\x1d\x3a\xb8\x09\xc0\x0e\xe4\xf4\xe7\x80\x49\x9e\xae\x81\x3f\xf8\x31\xf4\xc1\xea\x2c\xe9\x9d\x05\x60\x6f\x3a\x06\xcf\xcd\xc7\x22\x0c\x78\x4e\x4e\x51\x74\xfe\x93\x64\xfc\x6c\x8d\xbe\xe8\x83\xe4\x82\xbc\x08\x0a\x82\x28\xb2\xfa\xbe\x68\x56\xbc\xd6\x3a\x42\xad\xe3\x38\x0c\xea\x4d\xc4\x6d\x61\x6a\x13\x51\x50\x95\x5c\x8e\xe9\x19\xbf\x61\x5a\x19\xa5\x9f\x92\x38\x1d\xd5\xc5\xf7\xb1\x38\x78\x88\x27\x39\xe2\xb0\x7b\xed\x5d\xea\xa0\xfa\x90\xda\x56\xdc\xbf\xea\x7c\xb5\x1b\xeb\xfd\x29\xdf\x10\x67\xdd\xb8\x22\x37\x9e\x8f\xd6\x25\xd0\x7f\x3b\x85\xfb\xd1\xf4\xef\x62\x69\x59\x28\x79\x0e\x0a\xfa\x2d\xa0\xbe\x70\xda\xf3\x32\xb9\xc4\xfb\xe8\x60\xb1\x48\x06\x77\x63\xd7\x76\x4e\x40\x2a\x58\x2c\x56\x5a\x11\x14\x5a\xcd\x78\x86\x19\xe4\x4a\x43\x65\x6f\x7b\x60\x19\x08\x03\xea\x52\x84\xb6\x20\xfc\x0e\x0c\x9f\x62\x69\xd8\xb4\xb8\x75\x52\xb7\x13\x14\x05\xea\x03\x48\xa0\x76\xd2\x6d\x94\xfc\xa2\xd4\x5d\x69\xa9\x5b\x89\xa7\x4c\x9d\x61\xae\x34\x3a\x50\xad\xd0\xde\xc1\xf5\x30\x7c\xda\xdb\x92\xbb\xd6\x5b\x8b\x65\x18\x06\xf2\x8f\x73\xcc\x59\x25\x8c\x6d\xc5\x5f\x2b\xd4\x1c\xcb\xe4\x52\xc9\xdf\x51\x2b\x7f\x34\x44\xa2\xd5\x93\x7e\xae\xee\x65\x4b\xbb\x47\xfa\x0b\x37\x13\x2f\xdc\x03\x15\x87\x61\x70\x7c\x0c\x67\x15\x17\x19\xa4\x2c\x9d\x20\xdc\xe1\x1c\xb8\x3c\x12\x5c\x22\x54\x63\xc1\xc5\x1c\x8e\x60\x3a\x2f\xbf\x0a\x98\x95\x50\xd0\xef\x42\xab\x91\xc0\x69\x19\x06\xa3\x2a\x27\x67\x4a\xa3\xa7\x4c\x8e\x05\x52\x69\x3c\xab\xf2\x1c\x75\x14\xdb\xd3\xe4\x8b\xe6\x06\x87\x46\x73\x39\x8e\x4a\xa3\x53\x25\x67\xc9\x3b\xa3\x58\xb4\x12\x1b\xc9\x7b\x2e\x33\x4a\x12\x22\xec\xb6\x07\x29\x69\xd5\x4c\x8e\x71\x35\x86\x28\x5e\x4a\x0b\xd4\xba\xee\xd4\xf2\xdb\xbe\x3e\x9b\x1b\x8c\x0e\x93\xc3\x5d\x6e\xac\xc4\xe4\x23\x6e\xac\xca\x7d\x8f\x1b\x0f\x75\x76\x18\x7d\x44\x17\x11\x72\xd2\x07\x3a\xf5\x07\x71\x18\xb4\x88\x0f\xaa\x06\xf1\x51\x95\xc7\x36\x66\x37\xf2\xef\xe2\xf3\x15\x71\x7c\x51\x99\xe4\xd3\x07\x95\xde\x91\x26\xcb\x7a\xcf\x91\x9f\x91\xa1\xdd\xdf\x5f\xdf\xe1\xfc\x66\x6f\x43\x57\x52\x38\x53\x61\x30\x63\xda\x06\xbc\x4d\xe6\xd0\xe6\xd1\x0b\x6f\x98\x00\x68\xe6\x0c\x8d\x86\x1c\x59\x85\xfc\x5d\xe7\x89\xc2\x3c\x0c\x82\x6d\x1e\x34\x05\x67\xb7\x48\x37\x1b\xf6\x93\x56\x95\xe9\x7e\xd0\x52\x48\x8f\xf1\xf2\x12\xd0\x4d\x8a\x21\xcd\x0b\xd3\x42\xe0\x14\xa5\x89\x9a\x5b\xee\xb6\x75\x5a\x19\x45\x2a\x29\x72\x78\x0f\x66\xeb\xd1\x68\x41\x23\x10\x5b\x53\x54\x6d\x18\x97\xe5\xa9\x9c\x6f\x2b\x04\x03\xcd\xa7\x4c\xcf\xdf\xe3\x7c\x59\x98\x67\x31\xbc\x7c\xf9\x34\x2d\x9b\xca\xc9\x2c\x76\x1e\xb5\x18\xb0\xa2\x40\x99\xf9\x2b\x5f\x9f\xf0\x9b\xa6\x09\x5c\xf3\xff\xfd\x74\x72\x93\x24\x09\xdd\x8f\xa2\xdc\xfe\xf0\x1c\x04\x4a\x2f\x1e\x53\x17\xf8\xbf\xd3\xb8\xb3\x09\x54\xd2\xae\x1c\x46\xf9\x72\xbf\xde\x12\x7a\x90\xaa\x4a\x64\xb6\x28\x8f\x6c\xb5\xf3\x3e\xa6\xf6\x1e\x20\x78\x69\x5b\x84\xed\x11\x64\x6e\x9d\xc0\x0b\xd4\x63\x8c\x34\x3e\x89\xb8\x1f\xd5\xe3\x91\xa5\xd4\x09\x7c\xcb\x3f\xe9\xaf\x55\xc4\xab\xce\xd3\x8f\xe7\xc5\xc3\xe0\xf0\x61\xed\xcd\x6f\x0f\x6b\x27\xb0\x3f\x3a\x2d\xdd\xee\xcb\x67\xa6\xdb\xfb\xbf\x91\x6e\x5b\x82\x12\xea\xa8\x73\x68\x3b\xab\x6d\x8a\xae\x98\x7d\xa4\xa3\x8b\xe1\xf0\xe3\x87\x28\xe3\x4c\x60\x6a\x7a\x70\xb0\x66\xf2\x60\xeb\xd5\x37\x24\x5c\x03\x56\xa7\xe2\x59\x44\xee\x27\xdc\x20\x39\xd7\xe6\xce\x53\x95\xfa\x9c\xda\xa0\x69\xf9\xaa\xb1\x6b\x45\x97\xf7\x9f\x31\x51\xe1\x05\x2b\x0a\x2e\xc7\x3d\x5b\xa6\x3b\x58\x70\x99\xf9\xa3\x6d\x0e\x7d\x9e\x17\xdb\xd9\x5f\xaa\x5d\xfa\x10\x3b\xfe\xd7\xc6\x9f\x95\xf9\xa7\x5b\x12\x08\x20\x12\xf4\x01\xe2\x3c\xd6\x68\x9e\xdb\x5f\x4b\x4c\xb0\xd1\xd5\x55\x5f\x9b\x1a\x56\xdb\x36\x27\x2a\x9b\xa9\x1a\x73\x0a\x96\xe4\x9d\xcc\xb8\xc6\xd4\x44\xcd\x8b\xdf\x48\xe2\xd7\x3c\x52\x34\x6c\xcc\x98\x58\x19\xe9\xec\x61\xf9\x46\xab\x69\x73\x05\xab\xd0\xf7\xe8\x15\x9e\x62\xd7\x53\x9d\x27\x25\x5c\xdf\x70\x69\x50\xe7\x2c\xc5\x85\x1b\x53\x09\xbb\x75\xb0\x3a\x40\x36\x1f\xb6\xc6\x07\x46\x6f\x37\xdd\xd1\xe1\x6e\xca\x73\x37\xc6\x9f\xe3\xa8\x1a\x5f\xa8\x0c\xad\xd6\x7c\x6a\x92\x37\x85\xe6\xd2\x08\x19\xb5\xe7\x76\xb6\xd1\x8d\x2e\x9b\x6e\xf1\x6e\x69\x42\xa7\xb5\xb6\xe3\x3e\x6b\x2b\x8d\x9b\xd6\x03\x17\x1b\x34\x70\x27\x36\x93\x3f\xa9\xfb\xa8\xe3\x84\xb3\x41\xc9\x90\x0c\x53\x66\x63\x8d\x40\xf1\x89\xe4\x56\xa0\xed\x9a\xbc\xa9\xc8\x8e\xf7\x4f\xd1\xea\xf7\xc0\x65\x6c\xf5\xfb\x50\x7e\x15\xc9\x6b\xad\x2f\xd5\x27\x75\xef\x66\x42\x6f\x91\x82\xee\xf8\x18\x06\xaa\x34\x63\x8d\xa5\xdd\x03\xe5\xa1\xf1\xc4\x03\x93\x73\x33\xa1\x85\xf1\x7e\x82\x12\xcc\x04\x35\x1e\x96\xb4\x18\xb9\x92\xe0\x23\x13\xec\x45\xb6\xc3\x74\xdb\x64\x91\xbd\x1f\x2d\x73\x9b\x51\x5a\x07\xe5\xe1\x77\xbb\x31\x59\x85\xa0\x5d\xa9\x36\xae\x42\xd4\x04\x68\x99\xa6\x4d\xda\x15\xde\x27\xb4\x82\x83\x36\x78\xba\xb3\xe6\x7e\xc3\x6b\x33\x24\xef\x21\x6e\x87\x62\xe8\xbb\xeb\xee\x6d\x60\x39\x1c\x07\x8f\xac\x9b\xcb\xff\x1d\x66\xea\x34\x37\xa8\xf7\x59\x35\x1f\xfb\x7f\x99\x5d\x3d\xfd\x72\xb9\xa4\xd1\x1b\x91\x5c\x74\xd7\xce\x3a\xfc\x2b\x00\x00\xff\xff\x9c\xc2\xea\x1c\x02\x16\x00\x00")

func templates17_upsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates17_upsertGoTpl,
		"templates/17_upsert.go.tpl",
	)
}

func templates17_upsertGoTpl() (*asset, error) {
	bytes, err := templates17_upsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/17_upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSingletonMssql_upsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x53\x4d\x6f\xda\x40\x10\x3d\x7b\x7f\xc5\xd4\x52\x24\xaf\xb2\x72\x9a\x6b\x23\x2a\xd1\xe0\x26\x54\xc4\x40\x6c\xda\x03\xe1\xb0\xe0\x31\x59\xc9\x2c\x68\x3f\x50\xa3\x2a\xff\xbd\x1a\xdb\x94\xcf\x4a\x55\x2f\xe0\x9d\x8f\xa7\x37\xef\xcd\xdc\xdc\xc0\xdc\xab\xaa\x98\x6c\x2c\x1a\x37\xf6\x68\xde\x9e\xb2\x6c\x3c\x68\xa2\x16\x24\xd0\xc3\x3a\xe9\x70\x85\xda\x81\x75\x46\xe9\x25\x78\x4b\xbf\xee\x15\xc1\xd7\x8d\x3d\xe9\x24\x6c\xcc\x7a\xab\x0a\x2c\x62\x56\x7a\xbd\xb8\x8c\x1b\x15\x4a\x42\x61\xd4\x16\x8d\x8d\x7b\x4a\x56\xb8\x70\x02\x9c\x9c\x57\x98\xca\x15\xb6\xf8\x02\x36\x46\xad\xa4\x79\x13\xe0\x37\x85\x74\x28\x40\x69\x02\x82\xe9\x6c\x57\xb1\xf6\x6e\xe3\xf7\x01\xbe\xa3\xf6\x8b\x05\x6d\x6d\x87\x42\x2b\xa9\x97\x15\xc6\xfd\x02\xb5\x1b\xfb\xb5\xc3\xac\x52\x0b\x24\x1a\xf1\x60\x2c\x80\xfe\x9f\xc7\x3b\x78\xce\x58\x30\xf7\x25\x7c\x3a\x6c\x7d\x40\xf7\xc5\x97\x25\x9a\x88\xb3\xa0\xc0\x12\xcd\x41\x72\xe4\x77\xc9\xb9\x2f\xa9\xdd\x3a\x69\x5c\x5f\x17\xf8\x93\x50\x6e\x19\x0b\xca\x95\x8b\xbf\x6e\x8c\xd2\xae\xa4\x22\x01\xe1\x53\xf2\xfc\x90\x40\x3f\xcd\x87\x70\x65\x41\x5a\x98\xba\xd9\x8b\x0e\x0f\x74\xe0\x97\xda\x26\x59\x3f\x7d\x80\x28\x4b\x06\xc9\x7d\x0e\x57\x96\xd7\xad\x76\x06\xd1\xf4\xca\xce\x38\x21\xb0\x20\x38\xe0\x56\xc9\x05\xbe\xae\xab\x02\x8d\xad\x07\x9e\x58\xac\x99\x1d\x26\x04\x54\xa8\xa3\x56\x6e\x2e\x60\xcf\x5f\xc0\x2d\x6f\x01\x95\x5e\xda\xf8\xdb\x5a\xfd\x29\x14\xad\xda\x51\xa3\x1f\xbf\x0e\x45\x78\x7d\x10\x1a\x8c\x39\x3f\x9a\xa1\x1d\x61\x98\x42\x14\x52\x62\x6d\x40\x09\xd8\x92\x46\x46\xea\x25\xee\x0c\x27\xfb\x02\x55\x82\x82\x0f\x1d\xf8\x58\xbf\xce\x51\xa0\x9b\xf6\x80\x60\x82\x77\x16\x5c\x10\x6a\x6a\x67\x31\x49\x02\x1d\x52\xb6\xfe\x0c\x05\x6c\x05\x6c\x39\xa3\x96\x33\x40\xd2\xee\xc4\xbc\xeb\xce\x91\x30\xec\x42\xd7\x8f\xc7\x24\x85\xa7\x6e\x7e\xff\x98\xf4\x20\xa7\x47\x78\xd9\xb7\x51\xaf\x9b\x27\x90\x25\x64\x5a\xed\xf3\xde\xa3\x0c\xdd\x48\x1a\xb9\x22\xd3\x6d\x74\xac\xe0\xa9\xc8\xc7\xe6\x34\x87\xc1\x2f\xd3\x6e\x93\x7f\x65\x9d\x0e\xf3\x7f\x61\xde\x4f\xb3\xe4\x39\x87\x88\x76\xed\x7b\x77\x30\x49\xb2\xfa\x3b\x3c\x5b\x8b\xe6\x7c\x04\x84\x24\xe6\x7f\x6f\x61\x7b\x84\xa7\x4b\x48\x63\xa8\xb2\xae\x68\x8e\x9e\xc3\xe7\x76\x37\xce\x29\xbf\xe8\xe1\x24\x1f\x4d\x72\x68\xb8\x27\xbd\xda\xfe\xbb\x70\x27\x66\x4b\xb8\x01\x12\x10\xce\xc4\xbe\x30\xa4\x9d\x7d\x07\xac\x2c\x9e\xa0\xb7\xe0\x77\x61\xbd\x40\x2c\x30\xe8\xbc\xd1\x30\xf7\x65\x9c\x35\x1e\x71\xf6\xce\x7e\x07\x00\x00\xff\xff\xa0\xc3\x9b\xd6\x4d\x05\x00\x00")

func templatesSingletonMssql_upsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSingletonMssql_upsertGoTpl,
		"templates/singleton/mssql_upsert.go.tpl",
	)
}

func templatesSingletonMssql_upsertGoTpl() (*asset, error) {
	bytes, err := templatesSingletonMssql_upsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/singleton/mssql_upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_testSingletonMssql_main_testGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\xdf\x73\xdb\xb6\x0f\x7f\x96\xfe\x0a\x7c\x7d\xd7\x56\xf2\x57\x63\xda\x75\xb7\x87\xf4\x7c\x3d\xff\x50\xda\x5c\x63\x3b\xb5\xb4\x75\xbb\x34\x4b\x68\x09\x4a\x78\x95\x28\x9b\xa4\x92\x7a\x59\xfe\xf7\x1d\x49\x49\xb6\xd3\xd8\x6b\xf6\xb2\xbc\x58\x04\x3e\x00\xf1\x01\x08\x90\xb9\xa1\x02\xc4\xd5\xd7\x71\x14\x7d\x3c\xf9\x82\x2b\xe8\x81\xc0\x2b\xfc\xba\x20\xe3\x4a\xaa\x61\x59\x2c\x58\x8e\xde\xa5\xf7\xb6\xf0\xff\xe8\x9f\xc4\xe1\x0c\xe2\xfe\xe0\x24\x04\xd2\xed\x8f\x46\x9f\xe5\xff\x87\xd3\x49\x14\xcf\xfa\xc7\x93\x18\x48\x17\x8e\xa6\xb3\xf0\xf8\xdd\x04\x3e\x84\xbf\x93\xee\x5b\xd2\xfd\xcc\xdf\xce\xc2\xa3\x70\x16\x4e\x86\x61\x44\xba\x97\xbe\xeb\xaa\xd5\x02\xa1\x90\x72\x99\xc7\x28\x15\x0a\x90\x4a\x54\x89\x82\x3b\xd7\x49\xe7\xc3\x92\x73\xd0\x7f\x5d\xb9\xcc\xc9\x68\xa0\x65\x13\x5a\xa0\x91\x49\x25\x18\xbf\x72\x9d\xeb\x52\x2a\x80\x2d\x51\x25\x51\x3c\x10\x2d\xa8\x94\x0f\x44\x52\xe6\x45\x99\xe2\x16\xaa\x14\x8d\x2f\xc6\x95\xeb\x28\x94\x6a\x34\x30\x5b\xd6\x90\x7b\xd7\xcd\x2a\x9e\x00\xe3\x4c\x79\xbe\x0d\x73\x4c\x19\x87\x1e\x3c\xdf\xa0\x71\x77\xdf\x22\xbd\x02\xba\x1b\x1a\x1f\x24\xaa\x6a\xe1\xf9\x80\x42\x94\x42\x7b\xd0\x39\x47\x21\xac\xc0\x75\x9d\x1b\xb6\x40\x41\x22\x54\x23\xcc\x68\x95\x2b\xaf\x63\xec\x89\x4c\xae\xb1\xa0\x9d\x00\x3a\xe9\xbc\xec\xf8\x7b\x80\x96\x99\x46\x2a\x51\xe1\x3e\xa8\x66\xdc\x09\xe0\xd5\x4f\xaf\x5f\xfb\xae\xeb\x14\xa4\xce\x70\x0f\xac\xc5\x3b\x54\x91\x61\xde\x18\xa4\x73\x4e\x0b\xe3\xb2\x20\x26\xf5\x3b\x91\x5a\x6b\x71\xa6\x1e\x3b\x71\x5a\x6b\x71\xa6\x48\x3b\x71\x5a\x5b\xe3\x74\x99\x36\x70\xc7\x7c\x9b\x8f\x01\x35\xe5\xdd\xe9\xaf\xc9\x92\xe6\xad\xd3\xdf\x83\x1b\x9a\x53\x32\xc0\x2b\xc6\x7f\xa5\x39\x4b\xa9\x62\x25\xf7\x7c\x52\x2f\xd0\x73\x1d\xc7\x40\xac\x9f\x49\xa9\xc2\x62\xa1\x56\xde\x5e\x5e\x01\x6c\x2f\x9f\xe6\xc3\xe6\xb0\xf5\x51\x2f\x1b\x1f\x93\x52\x79\xe6\x23\x5c\x56\x34\x97\xde\xee\x84\x04\xf0\xb2\x75\x62\x25\x4f\x8d\xa4\xa9\x7b\xeb\xa6\x15\x3c\xcd\x4f\x9b\xf5\xd6\xd1\x5a\xe2\x3a\x3e\x19\x5e\x63\xf2\xc5\xd3\x35\x61\x99\xe9\x8a\xff\xf5\x80\xb3\x5c\xf7\x89\x23\x50\x55\x82\x6b\xa9\xeb\xdc\xbb\xae\x73\x70\x00\x43\x81\x54\x21\x50\x10\x94\xa7\x65\xc1\xfe\xc4\x14\xd2\x39\xe8\xd0\x88\x3e\x05\x1b\x1d\xdc\x5b\x63\x48\xa4\xe8\x3c\x47\xab\xf0\x9a\x43\xbf\xb1\x69\x0f\x0a\x92\x8a\x72\x11\x1b\x73\xcf\x7f\xb3\x3f\x94\x4d\xb3\xc4\x44\xf4\x9d\x86\xae\x63\xe1\xc3\x22\x85\xc3\x1e\xe0\x57\x4c\xc8\xb0\x2c\x0a\xca\x53\xaf\x23\x97\x79\x52\xa4\xba\x8b\x7f\x88\x3a\x01\xd8\x7e\xd3\xab\x5f\xcc\x4a\x1f\x28\xbd\x3a\x35\x2b\xdd\x1d\x7a\x95\x9a\xd5\x9a\xb6\x26\x95\x05\x26\x8a\xc3\x1e\x94\x92\x4c\x17\xc8\xbd\x8e\xe1\x2f\x2f\xec\x48\x21\x72\x99\xeb\xa6\xd9\x97\xf1\x52\x48\xf2\x49\xd0\x85\x87\x42\xef\x9a\x51\x96\x63\x0a\xaa\x84\x72\x81\x1c\xbe\x71\x07\x19\xcb\xcd\x94\xd0\x1c\x53\xcc\x50\x80\x9e\x86\x7a\x64\xc2\x05\xf4\x20\x23\xc3\xbc\x94\xe8\xf9\x70\x6f\x8a\xdd\xa6\x81\x44\x2a\x35\xe3\x94\xe3\xed\xd1\x07\x5c\x8d\x50\x2a\x51\xae\x50\x78\x1b\xd7\x52\x00\xd9\x56\xb1\x36\xad\xa9\x50\x7b\xd3\xbe\x93\x88\xd4\xa6\x60\x93\x0e\x89\x2d\x42\xc3\xe0\x91\x9d\x3e\x51\xf6\xd8\x46\x59\xa1\xc8\xa9\x60\x5c\xe5\x5c\xef\xe0\x7f\xdf\xde\xb7\x94\x29\xc8\x4a\xb1\x63\xfb\xda\x03\x67\xf9\x9e\x6b\x45\xe6\xe3\x32\x45\xcf\x0c\x3d\x7b\x5b\xf9\xf5\xaf\x0e\x4c\xde\x32\x95\x5c\x83\xd1\xde\xb9\x4e\x42\x25\xd6\xb7\xc3\xe1\x3a\x44\x2b\x68\xb4\x19\xcd\xe5\xb6\xda\x4a\x4c\x41\xf5\x25\xb2\xa9\x4a\x99\xd4\x67\xa0\xa3\x03\xde\x19\xe3\x76\x6f\xac\x6f\x40\x7d\x60\x0e\x7b\xa0\x73\x17\x2d\x74\xf2\x32\xef\xd2\x75\x86\xb3\xb0\x1f\x87\x30\xea\xc7\xfd\x41\x3f\x0a\xe1\x99\x7c\xe3\x3a\xef\xa6\xae\x63\x5f\x1e\x6b\xf9\xd9\xab\x73\xe9\x3a\x51\x18\xc3\x2c\xec\x8f\x2e\x86\xd3\xf1\xf8\x38\x8e\xc3\xd1\x45\x34\xe9\x9f\x46\xef\xa7\x31\x4c\x27\xc6\xf4\xf2\x61\x6f\x34\xe1\x17\x44\x54\x7c\x58\xa4\x9e\x5c\xe6\x01\x3c\xbd\xf3\xfc\xdd\x9c\x37\xc7\xc8\x9a\xf1\xc1\x01\x44\x8c\x27\x08\xe3\x08\xa2\x8f\x27\xf0\xe3\xcb\x57\x3f\x03\x53\x90\x50\x0e\x73\x84\xb4\xe4\x08\xb7\x4c\x5d\x1b\xe4\x68\x36\x3d\x5d\xd3\x3d\x83\xe3\x23\x08\x7f\x3b\x8e\xe2\x08\xce\xe1\x0e\x52\xaa\xe8\x9c\x4a\xbc\xd0\x43\x0f\xfe\x5a\xaf\x25\xa7\x0b\x79\x5d\x2a\xab\xb8\x87\x33\x08\x08\x21\x1c\xce\xe1\xec\xcd\xf9\xae\xa4\xb7\xbe\xbd\x28\x3c\x09\x87\xb1\x19\xa5\x70\x34\x9b\x8e\x41\xae\x24\x69\x9c\x4b\x70\x1d\xe7\xd3\xfb\x70\x16\x5a\x40\x0f\x5e\x3c\x93\x2f\xf4\x69\xdf\x0e\xf6\x99\x7c\x24\xef\xff\x41\x15\x14\x52\x91\x96\xb7\x7c\xb3\x06\x2c\xd3\x53\xde\xbe\x32\x37\x3a\xb8\x91\x35\x13\x6a\x6b\x02\x1c\x3e\xf1\x66\xf8\xbe\xde\x6d\x68\xeb\xd1\x17\x34\xcd\x5f\x37\x6f\x00\x54\x5c\x49\x20\x84\x34\x4d\xdd\x12\x48\x1e\xb9\x35\x6a\x63\x6b\x45\x08\xf1\x0d\xac\x9d\xaa\xd6\x87\x24\x13\xbc\x9d\x21\x4d\x51\xd8\x4d\xf5\x34\x95\x2a\x2d\x2b\xa5\x1d\x3e\x9f\xaf\x14\x4a\x32\xa8\xb2\xcc\x3c\x65\xb5\xaa\x26\xff\x8d\xaa\x76\xae\x2d\xb5\x77\xfd\xd1\x0a\xed\xc8\xb4\xc6\x9b\x19\xd4\xea\x59\xc5\xff\x61\x7a\x36\xe3\x51\x54\x9c\x33\x7e\x75\xd8\x69\x33\x63\xc9\xf9\x0f\xf0\x76\xf3\xfa\x19\xe2\xf9\x8f\xa8\x51\x88\x2d\xf5\xbf\x29\x55\x52\x72\x7d\x88\xbc\xfa\x5f\x92\xc0\x56\xc3\xdf\x73\x9e\xda\xc3\x6d\x55\x81\xf1\x6f\xf6\xdb\x7e\xf8\x3b\x6b\x44\x9d\xb8\x65\x5e\xdf\xd6\x26\x82\x4e\x00\xa9\x60\x37\x28\x88\xb9\x06\x07\x15\xcb\xd3\x8f\x15\x8a\x55\x4d\xa9\xe9\x88\xe6\x2d\xf0\xb0\xe3\x6c\xf7\xd8\xd7\xb3\xfe\xad\xdf\x5d\xfe\xbe\x8b\x9f\xb3\x3c\xf8\x26\x3f\xdb\x4c\xee\xdd\xbf\x03\x00\x00\xff\xff\xed\xf1\x62\xcf\x34\x0e\x00\x00")

func templates_testSingletonMssql_main_testGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonMssql_main_testGoTpl,
		"templates_test/singleton/mssql_main_test.go.tpl",
	)
}

func templates_testSingletonMssql_main_testGoTpl() (*asset, error) {
	bytes, err := templates_testSingletonMssql_main_testGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/mssql_main_test.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_testSingletonMssql_suites_testGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xc1\x0a\xc2\x30\x10\x44\xef\xfd\x8a\xa5\xe4\xd0\x4a\x9b\x0f\x10\x3c\x78\xd4\x83\x88\xb4\x1f\x10\xed\xb6\x04\xe2\x5a\xba\x5b\x10\x42\xfe\x5d\xd2\x46\xe9\xc1\xdb\x0c\x6f\x32\x99\xed\x67\x7a\x40\x83\x2c\xed\xc8\x38\x49\x21\xb0\x13\x64\xb1\x34\xe8\xa6\x04\x9f\x01\x78\x5f\xc3\x64\x68\x40\x50\x96\x3a\x7c\x57\xa0\xc4\xdc\x1d\xc2\xfe\x00\xba\x89\x8a\x43\x48\x39\xdb\x27\xa8\x4f\x7c\x7e\x59\x5a\x30\xd4\x3f\x8e\x8e\xb7\x56\x19\x67\x0d\xc7\x22\xa5\x8f\x51\x22\xaf\x8d\xdf\x96\x8b\x79\xe2\x92\x16\x7d\x9b\xa9\xc8\xbd\x5f\x9f\xe8\x76\xbc\xba\x79\x32\x2e\x84\xbc\x82\x38\xf8\x0f\x59\x2f\x2a\x97\xbf\x90\xba\xed\x8c\xe4\x42\xf6\x09\x00\x00\xff\xff\x11\x5d\x4c\xce\xff\x00\x00\x00")

func templates_testSingletonMssql_suites_testGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonMssql_suites_testGoTpl,
		"templates_test/singleton/mssql_suites_test.go.tpl",
	)
}

func templates_testSingletonMssql_suites_testGoTpl() (*asset, error) {
	bytes, err := templates_testSingletonMssql_suites_testGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/mssql_suites_test.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_testUpsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x54\x3d\x6f\xdb\x30\x10\x9d\xc5\x5f\x71\x35\xda\x82\x2a\x14\x06\x5d\x53\x78\xc8\xd7\x10\x14\x35\x8c\x58\x9e\x0b\x46\x3a\x39\x84\x69\x52\x20\x4f\xb5\x5d\x81\xff\xbd\x20\xe5\x24\x4e\x9c\x14\x1e\xda\x21\x83\x2d\x91\x78\xf7\xde\xbd\xfb\x50\xdf\x9f\xc0\x47\xa9\x95\xf4\x70\x36\x06\x71\x1e\xdf\xd0\x8b\x52\xde\x69\x84\xe1\x21\x26\x72\x85\x21\xb0\xa6\x33\x15\x10\x7a\xea\xfb\x21\x42\xcc\xdb\xa9\xee\x9c\xd4\x21\xcc\x5b\x8f\x8e\x38\xc1\x97\x08\x50\x66\x21\xca\x1c\x7a\x96\x91\x98\x4a\x27\xb5\x46\xcd\x73\xc6\x32\xd5\x80\x46\xc3\x1f\x09\xae\xec\xda\xcc\x94\x59\x74\x5a\xba\x10\x2e\xad\xee\x56\xc6\xe7\x30\x1e\xff\x0d\x36\x75\x6a\x25\xdd\xf6\x3b\x6e\x1f\x03\x7a\x96\x65\x24\x66\x4b\xd5\xf2\x51\xfc\x6f\x95\x59\x00\x25\x0f\x6b\x45\xf7\x60\x8d\xde\x42\x3b\xc4\xc1\x12\xb7\x50\x0d\x91\xa3\x9c\x65\x81\xb1\xcc\x23\xd6\xd1\xbf\x93\xa6\xb6\x2b\xf5\x1b\xc5\x04\xd7\x33\xc4\x9a\xe7\x2c\xfb\x25\x1d\xa0\x4b\x3f\xeb\x58\x76\x7a\x0a\xe7\x44\xb8\x6a\x09\xe8\x1e\xe1\x66\x32\xbb\xbe\x2d\xc1\xab\x1a\xc1\x36\x20\x0d\xcc\xa7\xf1\x86\x65\x36\x32\xee\xd5\xea\xc9\x41\x1f\x52\x29\x22\xe9\xbe\xe6\x8c\x5c\x57\x11\x8f\xc9\x14\xf0\xd9\x16\xf0\x46\x01\xae\x2e\xca\x6d\x8b\xbe\x00\x72\x1d\xe6\xdf\x12\xcf\x87\x31\x18\xa5\x77\x85\xb8\x8e\x99\x36\x7c\x34\x37\xa9\x04\x64\x9f\x44\x5e\x4f\x08\x7c\x92\x3e\x83\x4f\x7e\x54\x44\xbe\x5d\x5d\xfa\x5e\x35\x60\x2c\x81\x98\xd8\x4b\x6b\x08\x37\x14\x42\x45\x9b\xe8\xac\x1a\xce\xe2\x42\x56\xcb\x85\xb3\x9d\xa9\x79\xde\xf7\x68\xea\x10\x58\x36\x40\x7e\x74\x9e\xca\x0d\x4f\x2c\xfb\x0c\x07\x17\x77\x56\x69\x71\x81\x0b\x65\x12\x87\xf6\xb8\x7f\x57\x6e\x78\x45\x9b\x22\x1a\x7c\x50\x38\x0a\x94\xb3\xac\xc6\x06\x1d\xc4\xc9\xe5\x39\xf4\xf0\x13\xc6\x40\x1b\x71\x6b\xb5\xbe\x93\xd5\x92\xe7\x10\x62\x87\x1f\x7b\x61\xc5\x6e\x90\xdf\x32\x1e\x7b\x82\xa6\x86\x93\x10\x20\x9e\x92\xfe\x8d\x69\xd0\xf1\xfc\xf9\xe9\xb8\xbe\x74\x49\xee\xf5\xa6\x1c\x74\xa3\xb2\x9d\xa1\x74\xf1\x62\xb2\x1e\xb6\x90\xe7\xe2\x32\x62\x8e\x4c\xff\xc9\xf9\x61\x96\xfc\x41\x36\x42\x92\x70\x04\x7d\x7d\x06\x19\xad\xa5\x21\xb0\x06\xc1\x61\x65\x5d\x5d\xc0\xc2\xd2\xd9\xa8\x18\xf0\xbb\xa4\x5f\xac\xcb\x7c\x7a\x75\x5e\x5e\xbf\xb6\x2e\xff\x62\x21\x1a\xa9\x3d\xbe\x09\x3b\xf8\x70\x08\x21\xfe\xeb\xfa\xbc\xbf\xb9\x7a\x27\x63\x15\xd8\x9f\x00\x00\x00\xff\xff\x36\x8a\x47\x09\xb8\x06\x00\x00")

func templates_testUpsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testUpsertGoTpl,
		"templates_test/upsert.go.tpl",
	)
}

func templates_testUpsertGoTpl() (*asset, error) {
	bytes, err := templates_testUpsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/17_upsert.go.tpl": templates17_upsertGoTpl,
	"templates/singleton/mssql_upsert.go.tpl": templatesSingletonMssql_upsertGoTpl,
	"templates_test/singleton/mssql_main_test.go.tpl": templates_testSingletonMssql_main_testGoTpl,
	"templates_test/singleton/mssql_suites_test.go.tpl": templates_testSingletonMssql_suites_testGoTpl,
	"templates_test/upsert.go.tpl": templates_testUpsertGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"17_upsert.go.tpl": &bintree{templates17_upsertGoTpl, map[string]*bintree{}},
		"singleton": &bintree{nil, map[string]*bintree{
			"mssql_upsert.go.tpl": &bintree{templatesSingletonMssql_upsertGoTpl, map[string]*bintree{}},
		}},
	}},
	"templates_test": &bintree{nil, map[string]*bintree{
		"singleton": &bintree{nil, map[string]*bintree{
			"mssql_main_test.go.tpl": &bintree{templates_testSingletonMssql_main_testGoTpl, map[string]*bintree{}},
			"mssql_suites_test.go.tpl": &bintree{templates_testSingletonMssql_suites_testGoTpl, map[string]*bintree{}},
		}},
		"upsert.go.tpl": &bintree{templates_testUpsertGoTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

