// Code generated by go-bindata.
// sources:
// override/templates_test/singleton/mssql_main.tpl
// DO NOT EDIT!

package driver

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templates_testSingletonMssql_mainTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\xdf\x53\xdb\xc6\x13\x7f\x96\xfe\x8a\xfd\x7a\x26\x89\xc4\x57\x3d\x92\xa6\xd3\x07\x32\x9e\x8c\xb1\x45\xc2\x04\xdb\xc4\x52\x9b\x76\x08\x85\xb3\xb4\x82\x9b\x48\x27\xfb\xee\x04\x71\x29\xff\x7b\xe7\xee\x24\x59\x26\xd8\x0d\x7d\x29\x2f\xd6\xed\x7e\xf6\xf7\xed\xee\x71\x43\x05\x88\xab\xaf\xe3\x28\xfa\x78\xf2\x05\x57\xd0\x07\x81\x57\xf8\x75\x41\xc6\x95\x54\xc3\xb2\x58\xb0\x1c\xbd\x4b\xef\x6d\xe1\xff\x31\x38\x89\xc3\x19\xc4\x83\xc3\x93\x10\xc8\xde\x60\x34\xfa\x2c\xff\x3f\x9c\x4e\xa2\x78\x36\x38\x9e\xc4\x40\xf6\xe0\x68\x3a\x0b\x8f\xdf\x4d\xe0\x43\xf8\x3b\xd9\x7b\x4b\xf6\x3e\xf3\xb7\xb3\xf0\x28\x9c\x85\x93\x61\x18\x91\xbd\x4b\xdf\x75\xd5\x6a\x81\x50\x48\xb9\xcc\x63\x94\x0a\x05\x48\x25\xaa\x44\xc1\x9d\xeb\xa4\xf3\x61\xc9\x39\xe8\xbf\x3d\xb9\xcc\xc9\xe8\x50\xd3\x26\xb4\x40\x43\x93\x4a\x30\x7e\xe5\x3a\xd7\xa5\x54\x00\x1b\xa4\x4a\xa2\x78\x40\x5a\x50\x29\x1f\x90\xa4\xcc\x8b\x32\xc5\x0d\x54\x29\x1a\x5d\x8c\x2b\xd7\x51\x28\xd5\xe8\xd0\x98\xac\x21\xf7\xae\x9b\x55\x3c\x01\xc6\x99\xf2\x7c\xeb\xe6\x98\x32\x0e\x7d\x78\xde\x09\xe3\xee\xbe\x45\x7a\x05\xec\x75\x38\x3e\x48\x54\xd5\xc2\xf3\x01\x85\x28\x85\xd6\xa0\x73\x8e\x42\x58\x82\xeb\x3a\x37\x6c\x81\x82\x44\xa8\x46\x98\xd1\x2a\x57\x5e\xcf\xc8\x13\x99\x5c\x63\x41\x7b\x01\xf4\xd2\x79\xd9\xf3\x77\x00\x6d\x64\x1a\xa9\x44\x85\xbb\xa0\x3a\xe2\x5e\x00\xaf\x7e\x7a\xfd\xda\x77\x5d\xa7\x20\x75\x86\xfb\x60\x25\xde\xa1\x8a\x4c\xe4\x8d\x40\x3a\xe7\xb4\x30\x2a\x0b\x62\x52\xbf\x15\xa9\xb9\x16\x67\xea\xb1\x15\xa7\xb9\x16\x67\x8a\xb4\x15\xa7\xb9\x35\x4e\x97\xa9\x83\x3b\xe6\x9b\xf1\x18\x50\x53\xde\xad\xfa\x9a\x2c\xe9\xb8\x75\xfa\xfb\x70\x43\x73\x4a\x0e\xf1\x8a\xf1\x5f\x69\xce\x52\xaa\x58\xc9\x3d\x9f\xd4\x07\xf4\x5c\xc7\x31\x10\xab\x67\x52\xaa\xb0\x58\xa8\x95\xb7\x33\xae\x00\x36\x8f\x4f\xd3\x61\x73\xd8\xea\xa8\x8f\x8d\x8e\x49\xa9\x3c\xf3\x11\x2e\x2b\x9a\x4b\x6f\x7b\x42\x02\x78\xd9\x2a\xb1\x94\xa7\x7a\xd2\xd4\xbd\x55\xd3\x12\x9e\xa6\xa7\xcd\x7a\xab\x68\x4d\x71\x1d\x9f\x0c\xaf\x31\xf9\xe2\xe9\x9a\xb0\xcc\x74\xc5\xff\xfa\xc0\x59\xae\xfb\xc4\x11\xa8\x2a\xc1\x35\xd5\x75\xee\x5d\xd7\xd9\xdf\x87\xa1\x40\xaa\x10\x28\x08\xca\xd3\xb2\x60\x7f\x62\x0a\xe9\x1c\xb4\x6b\x44\xdf\x82\x4e\x07\xf7\xd7\x18\x12\x29\x3a\xcf\xd1\x32\xbc\xe6\xd2\x77\x8c\xf6\xa1\x20\xa9\x28\x17\xb1\x11\xf7\xfc\x37\xbb\x5d\xe9\x8a\x25\xc6\xa3\xef\x14\x74\x1d\x0b\x1f\x16\x29\x1c\xf4\x01\xbf\x62\x42\x86\x65\x51\x50\x9e\x7a\x3d\xb9\xcc\x93\x22\xd5\x5d\xfc\x43\xd4\x0b\xc0\xf6\x9b\x3e\xfd\x62\x4e\xfa\x42\xe9\xd3\xa9\x39\xe9\xee\xd0\xa7\xd4\x9c\xd6\x61\xeb\xa0\xb2\xc0\x78\x71\xd0\x87\x52\x92\xe9\x02\xb9\xd7\x33\xf1\xcb\x0b\x3b\x52\x88\x5c\xe6\xba\x69\x76\x65\xbc\x14\x92\x7c\x12\x74\xe1\xa1\xd0\x56\x33\xca\x72\x4c\x41\x95\x50\x2e\x90\xc3\x37\xea\x20\x63\xb9\x99\x12\x3a\xc6\x14\x33\x14\x90\x91\x61\x5e\x4a\x34\xb5\x6d\xa3\x26\x91\x4a\xcd\xf4\xe4\x78\x7b\xf4\x01\x57\x23\x94\x4a\x94\x2b\x14\x5e\x67\x0b\x05\x90\x6d\xd4\xa6\x2b\x4d\x85\xda\x99\xe5\xad\x7e\x4b\x2d\x0a\x36\xc7\x90\xd8\x9c\x37\x0e\x3f\x62\xe9\x13\x65\x8f\x19\xca\x0a\x45\x4e\x05\xe3\x2a\xe7\xda\x82\xff\x7d\xb6\x6f\x29\x53\x90\x95\x62\x8b\xf9\x5a\x03\x67\xf9\x8e\x2d\x22\xf3\x71\x99\xa2\x67\x66\x9c\x5d\x4e\x7e\xfd\xab\x1d\x93\xb7\x4c\x25\xd7\x60\xb8\x77\xae\x93\x50\x89\xf5\x32\x38\x58\xbb\x68\x09\x0d\x37\xa3\xb9\xdc\x64\x5b\x8a\xa9\x9f\xde\x19\x5d\x56\xca\xa4\x2e\x79\x4f\x3b\xbc\xd5\xc7\xcd\x56\x58\x2f\x3c\x7d\x3f\x0e\xfa\xa0\x73\x17\x2d\x74\xf2\x32\xef\xd2\x75\x86\xb3\x70\x10\x87\x30\x1a\xc4\x83\xc3\x41\x14\xc2\x33\xf9\xc6\x75\xde\x4d\x5d\xc7\x3e\x34\xd6\xf4\xb3\x57\xe7\xd2\x75\xa2\x30\x86\x59\x38\x18\x5d\x0c\xa7\xe3\xf1\x71\x1c\x87\xa3\x8b\x68\x32\x38\x8d\xde\x4f\x63\x98\x4e\x8c\xe8\xe5\xc3\x56\x68\xdc\x2f\x88\xa8\xf8\xb0\x48\x3d\xb9\xcc\x03\x78\x7a\xa3\xf9\xdb\x63\xee\x4e\x8d\x75\xc4\xfb\xfb\x10\x31\x9e\x20\x8c\x23\x88\x3e\x9e\xc0\x8f\x2f\x5f\xfd\x0c\x4c\x41\x42\x39\xcc\x11\xd2\x92\x23\xdc\x32\x75\x6d\x90\xa3\xd9\xf4\x74\x1d\xee\x19\x1c\x1f\x41\xf8\xdb\x71\x14\x47\x70\x0e\x77\x90\x52\x45\xe7\x54\xe2\x85\x9e\x71\xf0\xd7\xfa\x2c\x39\x5d\xc8\xeb\x52\x59\xc6\x3d\x9c\x41\x40\x08\xe1\x70\x0e\x67\x6f\xce\xb7\x25\xbd\xd5\xed\x45\xe1\x49\x38\x8c\xcd\xe4\x84\xa3\xd9\x74\x0c\x72\x25\x49\xa3\x5c\x82\xeb\x38\x9f\xde\x87\xb3\xd0\x02\xfa\xf0\xe2\x99\x7c\xa1\x6f\xfb\xa6\xb3\xcf\xe4\x23\x79\xff\x0f\xaa\xa0\x90\x8a\xb4\xbc\xe5\xdd\x1a\xb0\x4c\x0f\x75\xfb\xa8\xec\x74\x70\x43\x6b\xa7\x53\x77\x02\x1c\x3c\x71\x11\x7c\x5f\xef\x36\x61\xeb\xd1\x17\x34\xcd\x5f\x37\x6f\x00\x54\x5c\x49\x20\x84\x34\x4d\xdd\x06\x90\x3c\xb2\x24\x6a\x61\x2b\x45\x08\xf1\x0d\xac\x9d\xaa\x56\x87\x24\x13\xbc\x9d\x21\x4d\x51\x58\xa3\x7a\x9a\x4a\x95\x96\x95\xd2\x0a\x9f\xcf\x57\x0a\x25\x39\xac\xb2\xcc\xbc\x5c\x35\xab\x0e\xfe\x1b\x56\xad\x5c\x4b\x6a\xed\xfa\xa3\x25\xda\x91\x69\x85\xbb\x19\xd4\xec\x59\xc5\xff\x61\x7a\x36\xe3\x51\x54\x9c\x33\x7e\x75\xd0\x6b\x33\x63\x83\xf3\x1f\xe0\xad\xf1\xfa\xd5\xe1\xf9\x8f\xb0\x51\x88\x0d\xf6\xbf\x29\x55\x52\x72\x7d\x89\xbc\xfa\x3f\x90\xc0\x56\xc3\xdf\x71\x9f\xda\xcb\x6d\x59\x81\xd1\x6f\xec\x6d\xbe\xf3\x9d\x35\xa2\x4e\xdc\x32\xaf\x97\xb3\xf1\xa0\x17\x40\x2a\xd8\x0d\x0a\x62\xd6\xe0\x61\xc5\xf2\xf4\x63\x85\x62\x55\x87\xd4\x74\x44\xb3\xfa\x1f\x76\x9c\xed\x1e\xfb\x58\xd6\xbf\xf5\x33\xcb\xdf\xb5\xe7\x39\xcb\x83\x6f\xf2\xb3\x19\xc9\xbd\xfb\x77\x00\x00\x00\xff\xff\x53\x20\x2b\xd4\x23\x0e\x00\x00")

func templates_testSingletonMssql_mainTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonMssql_mainTpl,
		"templates_test/singleton/mssql_main.tpl",
	)
}

func templates_testSingletonMssql_mainTpl() (*asset, error) {
	bytes, err := templates_testSingletonMssql_mainTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/mssql_main.tpl", size: 3619, mode: os.FileMode(420), modTime: time.Unix(1527173524, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates_test/singleton/mssql_main.tpl": templates_testSingletonMssql_mainTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates_test": &bintree{nil, map[string]*bintree{
		"singleton": &bintree{nil, map[string]*bintree{
			"mssql_main.tpl": &bintree{templates_testSingletonMssql_mainTpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

