// Code generated by go-bindata.
// sources:
// override/templates/17_upsert.tpl
// override/templates_test/singleton/mssql_main_test.tpl
// override/templates_test/singleton/mssql_suites_test.tpl
// override/templates_test/singleton/mssql_upsert.tpl
// override/templates_test/upsert.tpl
// DO NOT EDIT!

package driver

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templates17_upsertTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\xdd\x6f\xdb\x36\x10\x7f\x96\xfe\x8a\x6b\x30\x34\xd2\xe6\x28\xdb\x6b\x06\x3f\x34\xe9\xc7\x8a\x35\x99\x5b\xb7\x2b\xb0\x20\x08\x68\xe9\x64\x13\xa1\x48\x95\xa2\x9c\x79\xae\xfe\xf7\xe1\x48\xca\x92\x3f\x5a\x3b\x4d\xfb\x10\x04\x22\x8f\xbf\xbb\xfb\xdd\x07\x8f\x5e\x2e\x4f\xe0\x27\xc3\x26\x02\xaf\x58\x81\x63\x2e\xa7\xb5\x60\x1a\xce\x86\x90\xbc\xa7\xd5\x84\x96\xe1\x33\x54\xed\xce\x67\x30\xdc\x08\xbc\x60\x15\xc2\x49\xd3\x84\x16\x60\xce\xf4\xc1\xc7\x53\x56\xa0\x58\x3f\x5e\xa5\x33\x2c\x98\x3d\xb0\x7d\x34\x19\x77\xbb\x4d\x13\x9e\x9e\xc2\x87\xb2\x42\x6d\x5e\x01\x33\x06\x8b\xd2\x54\xc0\x24\x70\x49\x6b\x03\x60\x32\x83\x4c\xa1\x5d\xab\xcb\x8c\x19\x04\xa5\x81\x4f\xa5\xd2\x08\x4a\x42\xaa\x64\x2e\x78\x6a\x92\x30\xaf\x65\x0a\x91\x82\x9f\x97\xcb\x6d\x02\x9a\x26\x6e\xd5\x44\x0e\xe6\x42\x89\xba\x90\x15\x5c\xdf\x54\x46\x73\x39\x1d\xc0\xfd\x8c\x1b\x14\xbc\x32\x90\x24\x89\x5b\x8c\x01\xb5\x56\x1a\x96\x61\xa0\xd1\xd4\x5a\x82\x4a\x1c\x4c\x34\x51\x5c\x24\xaf\xd0\x3c\x3f\x8f\xe2\x01\xac\x61\xf6\xa0\x92\x24\x89\xc3\x26\xec\x79\x39\x7a\x9c\x9b\x30\x62\x92\xa7\x15\xad\x59\xd3\x0e\xf7\x7b\xf4\x30\xc7\x97\x61\xc0\x73\xd2\x41\x11\xfc\x06\xaf\x7f\xb7\x67\x9f\x0c\x41\x72\x41\x60\x41\x49\x86\x3b\x80\x8f\x9a\x95\x2f\xb4\x8e\x50\xeb\x38\x0e\x83\x66\x8d\xa1\x5d\x04\x41\x4d\x09\x47\xdf\xf8\x2f\xa6\xb5\x51\xfa\x21\x99\xd1\x83\x2e\xbf\x91\xbd\x51\x44\x8a\xc1\x5a\xff\x62\x65\xc2\x77\x20\x94\x60\x7f\x10\x91\xdf\x9d\xc7\x03\xb9\x7a\x3c\x55\xab\xa2\xe3\x39\x28\x18\x76\xae\xfb\x22\xb4\xfb\x55\x72\x85\xf7\xd1\xd1\x72\x99\x8c\xee\xa6\x64\x49\xd3\x9c\x81\x54\xb0\x5c\xf6\xfa\x4d\xd3\x40\xa9\xd5\x9c\x67\x98\x41\xae\x34\xd4\xd6\xc2\x23\xcb\x55\x18\x50\xb3\x22\x8a\x04\x39\x7d\x64\x78\x81\x95\x61\x45\x79\xeb\xa4\x6e\x67\x28\x4a\xd4\x47\x90\x40\xe3\xa4\x79\x0e\x52\x19\x48\xae\xd4\x1f\x4a\xdd\x55\xb6\xe1\xad\x05\x35\x53\xe7\x98\x2b\x8d\x8e\x08\x2b\x64\xd9\xd8\x0e\x62\xe7\x09\x99\x62\x2d\x41\x99\x59\x3d\xf2\xbf\xe7\x98\xb3\x5a\x98\x8a\x40\x3f\xd5\xa8\x39\x56\xc9\x95\x92\xff\xa0\x56\x7e\x6b\x8c\x26\x5a\x2e\x37\xfb\x74\xd3\x78\x82\x3f\x72\x33\xf3\x92\x03\x50\x71\x18\x06\xa7\xa7\x70\x5e\x73\x91\x41\xca\xd2\x19\xc2\x1d\x2e\x80\xcb\x13\xc1\x25\x42\x3d\x15\x5c\x2c\xe0\x04\x8a\x45\xf5\x49\xc0\xbc\x82\x92\xfe\x97\x5a\x4d\x04\x16\x55\x18\x4c\xea\x9c\x2c\xa9\x8c\x2e\x98\x9c\x0a\xa4\x06\x70\x5e\xe7\x39\xea\x28\x0e\x03\xa2\xf5\x76\x00\x29\x89\x68\x26\xa7\xb8\x11\x6b\xf2\x76\x52\xe7\xc9\x47\xcd\x0d\x8e\x6d\x84\xa3\xd4\x06\xa0\x5b\x3e\x5f\x18\x8c\x8e\x93\xe3\x9d\x70\x5d\x8a\x3c\x1a\xaa\x47\xed\x57\xb0\x88\x9c\xb3\x21\xd0\xae\xdf\x88\xc3\xa0\xf3\x7e\x54\xb7\xde\x4f\xea\x3c\xb6\x89\xb1\x1d\x08\x97\x01\x17\x44\xf6\x65\x6d\x92\x77\x6f\x54\x7a\x47\x30\x96\xfe\x81\x8b\x42\x46\x5a\xf6\x1c\xbe\xbe\xc3\xc5\xcd\x61\x2a\x3e\x48\xe1\x94\x84\xc1\x9c\x69\x9b\x70\xb6\x50\x42\x9b\xa3\x4f\xbc\x4a\xf2\xbb\xbd\x75\x34\x9a\xf5\xc0\xbe\xb6\x1b\x2e\x72\x94\x62\x61\x10\xec\x54\xdd\x76\xaa\x3d\xfb\xfd\x34\x3c\x40\x54\xd5\xa6\x2f\xdd\x05\xcb\x7e\xae\xd2\x80\xbe\xe2\x95\x17\xd0\xb7\x7f\x8c\xe6\x42\x15\xa5\xc0\x02\xa5\x89\x5a\x37\xf7\xa8\x7d\x56\x1b\x45\x78\x94\x2e\x7c\x00\xf3\x2e\x5d\xbc\x06\xa2\x8c\x28\xec\xf4\x5c\x28\x69\x18\x97\xd5\x33\xb9\xd8\x59\x86\x23\xcd\x0b\xa6\x17\x7f\xe2\x62\xd5\xd3\xe7\x31\x3c\x7d\xfa\x00\x88\x5d\x95\x3c\x8f\x9d\x2d\x9d\xeb\xac\x2c\x51\x66\xde\xd3\xeb\x33\x7e\x33\xf0\x46\x5f\xf3\x5f\x7e\x3b\xbb\xb1\xe3\x47\x10\x50\x52\xdb\x3f\x9e\x83\x40\xe9\xc5\x63\xea\xac\xbf\x3a\xc4\xbd\x8d\xb5\x96\x76\x9a\x33\xca\xb7\xd0\xcd\x36\x3b\x80\x54\xd5\x22\xb3\xfd\x71\x62\x1b\x8d\xb7\x31\xb5\x7e\x00\x05\x8e\xda\xae\xed\xbb\xa4\x6e\x33\x6e\x97\xa8\xa7\x18\x69\x3c\x3c\x5e\x8f\x02\xf1\x9c\x52\xb1\x04\xfe\xd6\x5b\xab\x84\x0f\xbd\x1e\xf6\x98\x4a\xd8\xce\x04\x92\x5c\xbf\xef\x7d\x3e\x7b\x33\xbe\x9c\xcf\x4e\xe0\x40\x7e\xba\x68\xbb\x63\x3f\x38\xda\xde\xf8\x9d\xd1\xb6\x9d\x27\xa1\x8b\x6c\x01\xdd\x85\x66\xaf\x23\xd7\xc3\xde\xd2\xd6\xe5\x78\xfc\xf6\x4d\x94\x71\x26\x30\x35\x03\x38\xda\x50\x79\xb4\xdb\xef\x1d\x95\xd6\xd2\xd4\xeb\x72\x96\x8e\xee\x1e\x59\xd5\xcd\x83\x10\x7d\x31\xed\x80\xe9\x5a\x93\x57\x6a\x45\x57\x9e\xcf\x99\xa8\xf1\x92\x95\xa5\x9d\x78\xa8\x2f\xf7\x58\xe0\x32\xf3\x5b\x3b\xad\x79\xbf\x28\xbf\x10\xf1\x15\xe0\x4a\x7b\xec\x62\xbe\x31\x69\xac\x8d\x1a\xfd\x2e\x40\xbc\x90\xa0\x4f\x0a\x67\xab\x46\xf3\xe3\x2c\xb5\x91\x08\x76\x1a\xb9\x6e\x65\xdb\xb0\x1a\x7b\x97\x89\xda\x16\xa7\xc6\x9c\x52\x23\x79\x2d\x33\xae\x31\x35\x51\xbb\xf0\x37\x49\xfc\x95\x47\x8a\x66\xe0\x39\x13\x6b\x73\x93\xdd\xac\x5e\x6a\x55\xb4\xc6\x5b\x40\x7f\x05\xaf\xc5\x26\x76\x17\xa7\xb3\x84\x86\x54\x2e\x0d\xea\x9c\xa5\xb8\x74\x73\x1e\xb1\xb6\x49\x53\x8f\xc2\xf6\x60\xa7\x7c\x64\xf4\x97\x55\xf7\x30\x9c\xa7\x3c\x77\x53\xf3\x73\x9c\xd4\xd3\x4b\x95\xa1\x45\xcd\x0b\x93\xbc\x2c\x35\x97\x46\xc8\xa8\xdb\xb7\x73\x8b\x6e\xb1\x6c\x71\xc5\xfb\xa5\x89\x9d\x4e\xdb\x1e\x7f\x5c\xfc\x69\x7e\x4d\x6c\x85\xbe\x53\xf7\x51\x4f\x9d\x43\xa3\x54\x4f\xc6\x29\xb3\xf9\x44\xee\xfb\x32\xf1\x31\x1e\x0e\xa1\xfa\x24\x92\x17\x5a\x5f\xa9\x77\xea\xde\xcd\x5d\x1e\x99\x82\x7f\x7a\x0a\x23\x55\x99\xa9\xc6\xca\xbe\x42\xe4\xb1\xf1\x01\x00\x26\x17\x66\x46\xcf\x95\xfb\x19\x4a\x30\x33\xd4\x78\x5c\xd1\x84\xef\xca\xd1\x67\x08\xa0\xa8\x1c\x51\xb7\x6d\xc6\x5a\x8b\xe9\xe9\xb1\xdb\x5a\x3b\xe3\x6d\xa7\xe0\x7a\x53\xa4\x97\x15\x3d\xab\x5c\x23\x7a\x40\x6b\x3c\xea\xe8\xed\x8f\x5c\x07\x0c\x70\xed\x88\xb8\x4f\xd6\x8e\x84\x30\x74\x91\x3f\x0c\x7a\x35\x1a\x06\x5f\x79\xc8\xac\x7e\xe1\xc8\xd4\xb3\xdc\xa0\xde\x7a\xc4\xf8\x67\x8a\xf0\x3f\xf5\xb4\x07\x24\x17\xfd\x07\x4c\x13\xfe\x1f\x00\x00\xff\xff\x86\x25\xdd\x6a\x84\x12\x00\x00")

func templates17_upsertTplBytes() ([]byte, error) {
	return bindataRead(
		_templates17_upsertTpl,
		"templates/17_upsert.tpl",
	)
}

func templates17_upsertTpl() (*asset, error) {
	bytes, err := templates17_upsertTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/17_upsert.tpl", size: 4740, mode: os.FileMode(420), modTime: time.Unix(1527188826, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_testSingletonMssql_main_testTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\xdf\x53\xdb\xc6\x13\x7f\x96\xfe\x8a\xfd\x7a\x26\x89\xc4\x57\x3d\x92\xa6\xd3\x07\x32\x9e\x8c\xb1\x45\xc2\x04\xdb\xc4\x52\x9b\x76\x08\x85\xb3\xb4\x82\x9b\x48\x27\xfb\xee\x04\x71\x29\xff\x7b\xe7\xee\x24\x59\x26\xd8\x0d\x7d\x29\x2f\xd6\xed\x7e\xf6\xf7\xed\xee\x71\x43\x05\x88\xab\xaf\xe3\x28\xfa\x78\xf2\x05\x57\xd0\x07\x81\x57\xf8\x75\x41\xc6\x95\x54\xc3\xb2\x58\xb0\x1c\xbd\x4b\xef\x6d\xe1\xff\x31\x38\x89\xc3\x19\xc4\x83\xc3\x93\x10\xc8\xde\x60\x34\xfa\x2c\xff\x3f\x9c\x4e\xa2\x78\x36\x38\x9e\xc4\x40\xf6\xe0\x68\x3a\x0b\x8f\xdf\x4d\xe0\x43\xf8\x3b\xd9\x7b\x4b\xf6\x3e\xf3\xb7\xb3\xf0\x28\x9c\x85\x93\x61\x18\x91\xbd\x4b\xdf\x75\xd5\x6a\x81\x50\x48\xb9\xcc\x63\x94\x0a\x05\x48\x25\xaa\x44\xc1\x9d\xeb\xa4\xf3\x61\xc9\x39\xe8\xbf\x3d\xb9\xcc\xc9\xe8\x50\xd3\x26\xb4\x40\x43\x93\x4a\x30\x7e\xe5\x3a\xd7\xa5\x54\x00\x1b\xa4\x4a\xa2\x78\x40\x5a\x50\x29\x1f\x90\xa4\xcc\x8b\x32\xc5\x0d\x54\x29\x1a\x5d\x8c\x2b\xd7\x51\x28\xd5\xe8\xd0\x98\xac\x21\xf7\xae\x9b\x55\x3c\x01\xc6\x99\xf2\x7c\xeb\xe6\x98\x32\x0e\x7d\x78\xde\x09\xe3\xee\xbe\x45\x7a\x05\xec\x75\x38\x3e\x48\x54\xd5\xc2\xf3\x01\x85\x28\x85\xd6\xa0\x73\x8e\x42\x58\x82\xeb\x3a\x37\x6c\x81\x82\x44\xa8\x46\x98\xd1\x2a\x57\x5e\xcf\xc8\x13\x99\x5c\x63\x41\x7b\x01\xf4\xd2\x79\xd9\xf3\x77\x00\x6d\x64\x1a\xa9\x44\x85\xbb\xa0\x3a\xe2\x5e\x00\xaf\x7e\x7a\xfd\xda\x77\x5d\xa7\x20\x75\x86\xfb\x60\x25\xde\xa1\x8a\x4c\xe4\x8d\x40\x3a\xe7\xb4\x30\x2a\x0b\x62\x52\xbf\x15\xa9\xb9\x16\x67\xea\xb1\x15\xa7\xb9\x16\x67\x8a\xb4\x15\xa7\xb9\x35\x4e\x97\xa9\x83\x3b\xe6\x9b\xf1\x18\x50\x53\xde\xad\xfa\x9a\x2c\xe9\xb8\x75\xfa\xfb\x70\x43\x73\x4a\x0e\xf1\x8a\xf1\x5f\x69\xce\x52\xaa\x58\xc9\x3d\x9f\xd4\x07\xf4\x5c\xc7\x31\x10\xab\x67\x52\xaa\xb0\x58\xa8\x95\xb7\x33\xae\x00\x36\x8f\x4f\xd3\x61\x73\xd8\xea\xa8\x8f\x8d\x8e\x49\xa9\x3c\xf3\x11\x2e\x2b\x9a\x4b\x6f\x7b\x42\x02\x78\xd9\x2a\xb1\x94\xa7\x7a\xd2\xd4\xbd\x55\xd3\x12\x9e\xa6\xa7\xcd\x7a\xab\x68\x4d\x71\x1d\x9f\x0c\xaf\x31\xf9\xe2\xe9\x9a\xb0\xcc\x74\xc5\xff\xfa\xc0\x59\xae\xfb\xc4\x11\xa8\x2a\xc1\x35\xd5\x75\xee\x5d\xd7\xd9\xdf\x87\xa1\x40\xaa\x10\x28\x08\xca\xd3\xb2\x60\x7f\x62\x0a\xe9\x1c\xb4\x6b\x44\xdf\x82\x4e\x07\xf7\xd7\x18\x12\x29\x3a\xcf\xd1\x32\xbc\xe6\xd2\x77\x8c\xf6\xa1\x20\xa9\x28\x17\xb1\x11\xf7\xfc\x37\xbb\x5d\xe9\x8a\x25\xc6\xa3\xef\x14\x74\x1d\x0b\x1f\x16\x29\x1c\xf4\x01\xbf\x62\x42\x86\x65\x51\x50\x9e\x7a\x3d\xb9\xcc\x93\x22\xd5\x5d\xfc\x43\xd4\x0b\xc0\xf6\x9b\x3e\xfd\x62\x4e\xfa\x42\xe9\xd3\xa9\x39\xe9\xee\xd0\xa7\xd4\x9c\xd6\x61\xeb\xa0\xb2\xc0\x78\x71\xd0\x87\x52\x92\xe9\x02\xb9\xd7\x33\xf1\xcb\x0b\x3b\x52\x88\x5c\xe6\xba\x69\x76\x65\xbc\x14\x92\x7c\x12\x74\xe1\xa1\xd0\x56\x33\xca\x72\x4c\x41\x95\x50\x2e\x90\xc3\x37\xea\x20\x63\xb9\x99\x12\x3a\xc6\x14\x33\x14\x90\x91\x61\x5e\x4a\x34\xb5\x6d\xa3\x26\x91\x4a\xcd\xf4\xe4\x78\x7b\xf4\x01\x57\x23\x94\x4a\x94\x2b\x14\x5e\x67\x0b\x05\x90\x6d\xd4\xa6\x2b\x4d\x85\xda\x99\xe5\xad\x7e\x4b\x2d\x0a\x36\xc7\x90\xd8\x9c\x37\x0e\x3f\x62\xe9\x13\x65\x8f\x19\xca\x0a\x45\x4e\x05\xe3\x2a\xe7\xda\x82\xff\x7d\xb6\x6f\x29\x53\x90\x95\x62\x8b\xf9\x5a\x03\x67\xf9\x8e\x2d\x22\xf3\x71\x99\xa2\x67\x66\x9c\x5d\x4e\x7e\xfd\xab\x1d\x93\xb7\x4c\x25\xd7\x60\xb8\x77\xae\x93\x50\x89\xf5\x32\x38\x58\xbb\x68\x09\x0d\x37\xa3\xb9\xdc\x64\x5b\x8a\xa9\x9f\xde\x19\x5d\x56\xca\xa4\x2e\x79\x4f\x3b\xbc\xd5\xc7\xcd\x56\x58\x2f\x3c\x7d\x3f\x0e\xfa\xa0\x73\x17\x2d\x74\xf2\x32\xef\xd2\x75\x86\xb3\x70\x10\x87\x30\x1a\xc4\x83\xc3\x41\x14\xc2\x33\xf9\xc6\x75\xde\x4d\x5d\xc7\x3e\x34\xd6\xf4\xb3\x57\xe7\xd2\x75\xa2\x30\x86\x59\x38\x18\x5d\x0c\xa7\xe3\xf1\x71\x1c\x87\xa3\x8b\x68\x32\x38\x8d\xde\x4f\x63\x98\x4e\x8c\xe8\xe5\xc3\x56\x68\xdc\x2f\x88\xa8\xf8\xb0\x48\x3d\xb9\xcc\x03\x78\x7a\xa3\xf9\xdb\x63\xee\x4e\x8d\x75\xc4\xfb\xfb\x10\x31\x9e\x20\x8c\x23\x88\x3e\x9e\xc0\x8f\x2f\x5f\xfd\x0c\x4c\x41\x42\x39\xcc\x11\xd2\x92\x23\xdc\x32\x75\x6d\x90\xa3\xd9\xf4\x74\x1d\xee\x19\x1c\x1f\x41\xf8\xdb\x71\x14\x47\x70\x0e\x77\x90\x52\x45\xe7\x54\xe2\x85\x9e\x71\xf0\xd7\xfa\x2c\x39\x5d\xc8\xeb\x52\x59\xc6\x3d\x9c\x41\x40\x08\xe1\x70\x0e\x67\x6f\xce\xb7\x25\xbd\xd5\xed\x45\xe1\x49\x38\x8c\xcd\xe4\x84\xa3\xd9\x74\x0c\x72\x25\x49\xa3\x5c\x82\xeb\x38\x9f\xde\x87\xb3\xd0\x02\xfa\xf0\xe2\x99\x7c\xa1\x6f\xfb\xa6\xb3\xcf\xe4\x23\x79\xff\x0f\xaa\xa0\x90\x8a\xb4\xbc\xe5\xdd\x1a\xb0\x4c\x0f\x75\xfb\xa8\xec\x74\x70\x43\x6b\xa7\x53\x77\x02\x1c\x3c\x71\x11\x7c\x5f\xef\x36\x61\xeb\xd1\x17\x34\xcd\x5f\x37\x6f\x00\x54\x5c\x49\x20\x84\x34\x4d\xdd\x06\x90\x3c\xb2\x24\x6a\x61\x2b\x45\x08\xf1\x0d\xac\x9d\xaa\x56\x87\x24\x13\xbc\x9d\x21\x4d\x51\x58\xa3\x7a\x9a\x4a\x95\x96\x95\xd2\x0a\x9f\xcf\x57\x0a\x25\x39\xac\xb2\xcc\xbc\x5c\x35\xab\x0e\xfe\x1b\x56\xad\x5c\x4b\x6a\xed\xfa\xa3\x25\xda\x91\x69\x85\xbb\x19\xd4\xec\x59\xc5\xff\x61\x7a\x36\xe3\x51\x54\x9c\x33\x7e\x75\xd0\x6b\x33\x63\x83\xf3\x1f\xe0\xad\xf1\xfa\xd5\xe1\xf9\x8f\xb0\x51\x88\x0d\xf6\xbf\x29\x55\x52\x72\x7d\x89\xbc\xfa\x3f\x90\xc0\x56\xc3\xdf\x71\x9f\xda\xcb\x6d\x59\x81\xd1\x6f\xec\x6d\xbe\xf3\x9d\x35\xa2\x4e\xdc\x32\xaf\x97\xb3\xf1\xa0\x17\x40\x2a\xd8\x0d\x0a\x62\xd6\xe0\x61\xc5\xf2\xf4\x63\x85\x62\x55\x87\xd4\x74\x44\xb3\xfa\x1f\x76\x9c\xed\x1e\xfb\x58\xd6\xbf\xf5\x33\xcb\xdf\xb5\xe7\x39\xcb\x83\x6f\xf2\xb3\x19\xc9\xbd\xfb\x77\x00\x00\x00\xff\xff\x53\x20\x2b\xd4\x23\x0e\x00\x00")

func templates_testSingletonMssql_main_testTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonMssql_main_testTpl,
		"templates_test/singleton/mssql_main_test.tpl",
	)
}

func templates_testSingletonMssql_main_testTpl() (*asset, error) {
	bytes, err := templates_testSingletonMssql_main_testTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/mssql_main_test.tpl", size: 3619, mode: os.FileMode(420), modTime: time.Unix(1527187208, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_testSingletonMssql_suites_testTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\xb1\x8e\x83\x30\x10\x44\x7b\xbe\x62\x84\x28\xe0\x04\xfe\x80\x93\xae\xba\xea\xae\x48\x11\x91\x0f\x70\xc2\x82\x2c\x39\x1b\x84\x17\x29\x92\xf1\xbf\x47\x18\x8b\x90\xce\xe3\x99\xb7\x3b\xdb\xcf\x7c\x43\x4b\x4e\x2e\xa3\xa3\x49\x4a\xc1\x97\x90\x13\xc3\x83\x6a\x2b\xf8\x0c\xf0\xbe\xc1\xa4\x79\x20\x14\x86\x3b\x7a\xd6\x28\x44\x5f\x2d\xe1\xfb\x07\xaa\x5d\x5f\x2e\x84\x94\x33\x7d\x32\xd5\x9f\xfb\x7f\x18\x8e\x36\x9a\xdd\x27\xeb\x8e\x72\xcb\x9e\xf4\x3d\x0e\x4b\x64\x94\x0b\x46\x3b\x4f\xda\x62\x81\x18\xb1\xf4\xab\x77\x50\xd4\x79\xe6\x32\xf7\xfe\x4d\x87\x90\xd7\x58\x6b\x7f\x7e\x6e\x27\x55\x71\x19\x71\x77\xec\x91\x54\xc8\x5e\x01\x00\x00\xff\xff\x2f\xea\xf2\xb5\x00\x01\x00\x00")

func templates_testSingletonMssql_suites_testTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonMssql_suites_testTpl,
		"templates_test/singleton/mssql_suites_test.tpl",
	)
}

func templates_testSingletonMssql_suites_testTpl() (*asset, error) {
	bytes, err := templates_testSingletonMssql_suites_testTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/mssql_suites_test.tpl", size: 256, mode: os.FileMode(420), modTime: time.Unix(1527186990, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_testSingletonMssql_upsertTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x53\x4d\x6f\xda\x40\x10\x3d\x7b\x7f\xc5\xd4\x52\x24\xaf\xb2\x72\x9a\x6b\x23\x2a\xd1\xe0\x26\x54\xc4\x40\x6c\xda\x03\xe1\xb0\xe0\x31\x59\xc9\x2c\x68\x3f\x50\xa3\x2a\xff\xbd\x1a\xdb\x94\xcf\x4a\x55\x2f\xe0\x9d\x8f\xa7\x37\xef\xcd\xdc\xdc\xc0\xdc\xab\xaa\x98\x6c\x2c\x1a\x37\xf6\x68\xde\x9e\xb2\x6c\x3c\x68\xa2\x16\x24\xd0\xc3\x3a\xe9\x70\x85\xda\x81\x75\x46\xe9\x25\x78\x4b\xbf\xee\x15\xc1\xd7\x8d\x3d\xe9\x24\x6c\xcc\x7a\xab\x0a\x2c\x62\x56\x7a\xbd\xb8\x8c\x1b\x15\x4a\x42\x61\xd4\x16\x8d\x8d\x7b\x4a\x56\xb8\x70\x02\x9c\x9c\x57\x98\xca\x15\xb6\xf8\x02\x36\x46\xad\xa4\x79\x13\xe0\x37\x85\x74\x28\x40\x69\x02\x82\xe9\x6c\x57\xb1\xf6\x6e\xe3\xf7\x01\xbe\xa3\xf6\x8b\x05\x6d\x6d\x87\x42\x2b\xa9\x97\x15\xc6\xfd\x02\xb5\x1b\xfb\xb5\xc3\xac\x52\x0b\x24\x1a\xf1\x60\x2c\x80\xfe\x9f\xc7\x3b\x78\xce\x58\x30\xf7\x25\x7c\x3a\x6c\x7d\x40\xf7\xc5\x97\x25\x9a\x88\xb3\xa0\xc0\x12\xcd\x41\x72\xe4\x77\xc9\xb9\x2f\xa9\xdd\x3a\x69\x5c\x5f\x17\xf8\x93\x50\x6e\x19\x0b\xca\x95\x8b\xbf\x6e\x8c\xd2\xae\xa4\x22\x01\xe1\x53\xf2\xfc\x90\x40\x3f\xcd\x87\x70\x65\x41\x5a\x98\xba\xd9\x8b\x0e\x0f\x74\xe0\x97\xda\x26\x59\x3f\x7d\x80\x28\x4b\x06\xc9\x7d\x0e\x57\x96\xd7\xad\x76\x06\xd1\xf4\xca\xce\x38\x21\xb0\x20\x38\xe0\x56\xc9\x05\xbe\xae\xab\x02\x8d\xad\x07\x9e\x58\xac\x99\x1d\x26\x04\x54\xa8\xa3\x56\x6e\x2e\x60\xcf\x5f\xc0\x2d\x6f\x01\x95\x5e\xda\xf8\xdb\x5a\xfd\x29\x14\xad\xda\x51\xa3\x1f\xbf\x0e\x45\x78\x7d\x10\x1a\x8c\x39\x3f\x9a\xa1\x1d\x61\x98\x42\x14\x52\x62\x6d\x40\x09\xd8\x92\x46\x46\xea\x25\xee\x0c\x27\xfb\x02\x55\x82\x82\x0f\x1d\xf8\x58\xbf\xce\x51\xa0\x9b\xf6\x80\x60\x82\x77\x16\x5c\x10\x6a\x6a\x67\x31\x49\x02\x1d\x52\xb6\xfe\x0c\x05\x6c\x05\x6c\x39\xa3\x96\x33\x40\xd2\xee\xc4\xbc\xeb\xce\x91\x30\xec\x42\xd7\x8f\xc7\x24\x85\xa7\x6e\x7e\xff\x98\xf4\x20\xa7\x47\x78\xd9\xb7\x51\xaf\x9b\x27\x90\x25\x64\x5a\xed\xf3\xde\xa3\x0c\xdd\x48\x1a\xb9\x22\xd3\x6d\x74\xac\xe0\xa9\xc8\xc7\xe6\x34\x87\xc1\x2f\xd3\x6e\x93\x7f\x65\x9d\x0e\xf3\x7f\x61\xde\x4f\xb3\xe4\x39\x87\x88\x76\xed\x7b\x77\x30\x49\xb2\xfa\x3b\x3c\x5b\x8b\xe6\x7c\x04\x84\x24\xe6\x7f\x6f\x61\x7b\x84\xa7\x4b\x48\x63\xa8\xb2\xae\x68\x8e\x9e\xc3\xe7\x76\x37\xce\x29\xbf\xe8\xe1\x24\x1f\x4d\x72\x68\xb8\x27\xbd\xda\xfe\xbb\x70\x27\x66\x4b\xb8\x01\x12\x10\xce\xc4\xbe\x30\xa4\x9d\x7d\x07\xac\x2c\x9e\xa0\xb7\xe0\x77\x61\xbd\x40\x2c\x30\xe8\xbc\xd1\x30\xf7\x65\x9c\x35\x1e\x71\xf6\xce\x7e\x07\x00\x00\xff\xff\xa0\xc3\x9b\xd6\x4d\x05\x00\x00")

func templates_testSingletonMssql_upsertTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonMssql_upsertTpl,
		"templates_test/singleton/mssql_upsert.tpl",
	)
}

func templates_testSingletonMssql_upsertTpl() (*asset, error) {
	bytes, err := templates_testSingletonMssql_upsertTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/mssql_upsert.tpl", size: 1357, mode: os.FileMode(420), modTime: time.Unix(1527189479, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_testUpsertTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x93\x5f\x6f\xda\x30\x14\xc5\x9f\xe3\x4f\x71\x17\x6d\x53\x32\xa5\xae\xf6\xda\x89\x87\x96\xf2\x30\x4d\x43\xa8\x84\x0f\x60\x92\x1b\x6a\xe1\xd8\x91\x7d\x53\x60\x69\xbe\xfb\xe4\x00\x2d\x7f\x82\xc4\x4b\xa5\x3e\xc0\xc3\xf5\x39\xd7\x3f\x1f\x0e\x4d\x73\x03\x5f\x49\xcc\x15\x8e\x45\x89\x53\xa9\x17\xb5\x12\x16\xee\x06\xc0\x53\x3f\xe5\x7e\x0c\xaf\xe0\xf6\x27\xaf\x40\x92\x14\x0e\x85\x43\xb8\x69\x5b\x76\xbc\x60\xa2\x6a\x2b\xd4\xb9\xbd\xda\xce\x7b\xcd\x2f\xc2\x5e\x65\xcd\x44\x89\xaa\xd7\x7a\x15\xf6\xb1\xbd\xa8\x75\x06\x84\x8e\x9a\xe6\x94\xbe\x6d\x67\x95\x43\x4b\x11\xc1\x0f\xaf\x90\x7a\xc1\xd3\x18\x1a\x16\x10\x9f\x08\x2b\x94\x42\x15\xc5\x8c\x05\xb2\x00\x85\x3a\x6a\x9a\x53\x8e\xb6\x1d\x1a\x55\x97\xda\xc5\x30\x18\x5c\xd4\x4c\xac\x2c\x85\xdd\xfc\xc1\xcd\x9b\xba\x61\x41\x40\x7c\xba\x94\x55\x14\xfa\xef\x4a\xea\x05\x74\x78\xb0\x92\xf4\x0c\x46\xab\x0d\x54\x5b\x1f\x2c\x71\x03\xd9\xd6\x19\xc6\x2c\x68\x19\x0b\x1c\x62\xee\x43\xb0\x42\xe7\xa6\x94\xff\x90\x8f\x71\x35\x45\xcc\xa3\x98\x05\x2f\xc2\x02\xda\xee\x63\x2c\x0b\x6e\x6f\xe1\x9e\x08\xcb\x8a\x80\x9e\x11\x7e\x8f\xa7\xa3\xa7\x14\x9c\xcc\x11\x4c\x01\x42\xc3\x6c\xe2\x27\x2c\xe8\x63\xf7\x97\x1c\x26\xf7\x7e\xd2\xb4\x5d\x30\xfe\xa2\x43\x8e\x29\xd9\x3a\xa3\xc8\x03\x26\xf0\xbd\x6f\x65\x02\x7d\xd3\xc7\x87\x74\x53\xa1\x4b\x80\x6c\x8d\xf1\xaf\x6e\xef\x97\x01\x68\xa9\x76\x61\x8d\xfc\x6b\x8a\x28\x9c\xe9\x2e\x26\x32\xef\x97\x5e\x20\x04\xd7\xb1\xdc\xc1\x37\x17\x26\x7e\xe1\x2e\x3c\x5a\xfb\x57\xfd\xad\x1d\xa5\xeb\x68\x6e\xa4\xe2\x0f\xb8\x90\x3a\x8a\x63\x16\xe4\x58\xa0\x05\x5a\xf3\x27\xa3\xd4\x5c\x64\x4b\x1f\xe8\xdb\x33\xfb\xc0\xf9\xbe\x44\xeb\xc4\xd3\x5e\x87\x5e\x77\x9e\x0b\xdc\x67\xc0\x99\xa9\x35\x75\x83\xd3\x9f\x63\x5f\xe4\x88\xd6\x31\x1f\x7a\xd9\x01\xef\x39\x43\xb4\xdf\xe9\x25\xdd\x56\x2f\xfa\x79\x24\x09\x57\x42\x13\x18\x8d\x60\x31\x33\x36\x4f\x60\x61\xe8\x2e\x4c\xb6\xfa\x1d\xd1\x49\xa7\x66\x93\xc7\xfb\x74\xd4\xd7\xa9\x8f\x68\x48\x21\x94\xc3\x7e\xcd\xd9\x5f\x8d\x73\xfe\xb1\x65\xfa\x44\xdd\xf8\x0c\xd5\x68\xd9\xff\x00\x00\x00\xff\xff\x6a\x24\xbf\xe5\x69\x06\x00\x00")

func templates_testUpsertTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testUpsertTpl,
		"templates_test/upsert.tpl",
	)
}

func templates_testUpsertTpl() (*asset, error) {
	bytes, err := templates_testUpsertTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/upsert.tpl", size: 1641, mode: os.FileMode(420), modTime: time.Unix(1527186233, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/17_upsert.tpl": templates17_upsertTpl,
	"templates_test/singleton/mssql_main_test.tpl": templates_testSingletonMssql_main_testTpl,
	"templates_test/singleton/mssql_suites_test.tpl": templates_testSingletonMssql_suites_testTpl,
	"templates_test/singleton/mssql_upsert.tpl": templates_testSingletonMssql_upsertTpl,
	"templates_test/upsert.tpl": templates_testUpsertTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"17_upsert.tpl": &bintree{templates17_upsertTpl, map[string]*bintree{}},
	}},
	"templates_test": &bintree{nil, map[string]*bintree{
		"singleton": &bintree{nil, map[string]*bintree{
			"mssql_main_test.tpl": &bintree{templates_testSingletonMssql_main_testTpl, map[string]*bintree{}},
			"mssql_suites_test.tpl": &bintree{templates_testSingletonMssql_suites_testTpl, map[string]*bintree{}},
			"mssql_upsert.tpl": &bintree{templates_testSingletonMssql_upsertTpl, map[string]*bintree{}},
		}},
		"upsert.tpl": &bintree{templates_testUpsertTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

