// Code generated by go-bindata. DO NOT EDIT.
// sources:
// override/templates/17_upsert.go.tpl (6.065kB)
// override/templates/singleton/mssql_upsert.go.tpl (1.399kB)
// override/templates_test/singleton/mssql_main_test.go.tpl (4.108kB)
// override/templates_test/singleton/mssql_suites_test.go.tpl (264B)
// override/templates_test/upsert.go.tpl (1.771kB)

package driver

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templates17_upsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xdf\x53\xdb\xb8\x13\x7f\x4e\x66\xf2\x3f\x6c\x99\xef\x14\xfb\x7b\xc1\xdc\xbd\x72\x93\x07\x28\x6d\x8f\x69\xe1\xd2\xa6\x1c\x33\xc7\x30\x8c\x62\xaf\x13\x0d\x8a\xe4\xca\x72\x42\x2e\x97\xff\xfd\x66\x25\x39\xb6\x43\x02\xa1\x2d\x37\xf7\x02\x58\x5a\xed\x8f\xcf\x67\xb5\xab\x65\xb1\x38\x80\xff\x31\xc1\x59\x0e\x47\x3d\x88\x8e\xe9\x2f\xcc\xa3\x2f\x6c\x28\x10\xdc\xaf\xe8\x82\x4d\x70\xb9\xec\xb4\xad\x6c\x1e\x8f\x71\xc2\xdc\x3e\x9d\xa8\x44\xe0\x6f\x88\x06\xd5\xae\x3b\xc1\x53\x88\x8e\x93\xe4\xbd\x50\x43\x26\xe0\x80\x16\x0f\x0f\xe1\x32\xcb\x51\x9b\xf7\xc0\x8c\xc1\x49\x66\x72\x60\x12\xb8\xa4\xb5\x2e\x30\x99\x40\xa2\xd0\xae\x15\x59\xc2\x0c\x82\xd2\xc0\x47\x52\x69\x04\x25\x21\x56\x32\x15\x3c\x36\x51\xa7\x9d\x16\x32\x86\x40\xc1\xff\x17\x0b\x17\x43\x74\x99\x0d\xb8\x1c\x15\x82\xe9\xe5\x32\x2c\xcd\x04\xd6\x0d\xa9\x0c\x44\x17\xea\x8d\x92\x06\xef\xcd\x72\x19\x9b\x7b\xd2\x45\x1f\x91\x5f\xec\xc2\x62\x81\x32\x21\x37\xbd\xe9\x37\x4a\x14\x13\x99\x77\xbd\x77\xfe\x13\x86\x8a\x8b\xc8\x7f\x84\x80\x5a\x2b\x0d\x8b\x4e\xbb\xa5\xd1\x14\x5a\x82\x8a\x9c\x65\x67\xb8\x6e\xd4\x1e\x7c\x8f\xe6\xf4\x24\x08\x17\x0b\x14\x39\x5a\x47\xba\x50\x6e\x78\x49\xbf\x2f\x93\xe5\xb2\xfb\xa8\x2b\x61\xa7\xbd\xec\xb4\x09\x69\xef\xb8\xfb\xe0\xa9\xc5\xb1\x06\x3d\xfd\xd9\x67\x92\xc7\xeb\x24\xf4\xbf\x8f\x05\xb0\x4a\x73\x5a\xb3\x38\xec\x4e\x4b\xff\xa5\x79\x21\x46\x78\x4a\x6e\x51\xa6\xfe\x9b\xa4\xfc\x6a\x8d\xbe\xea\x81\xe4\xc2\xba\xd1\xca\x08\xa5\xc0\x2a\xbc\xd2\x2c\x7b\xab\x75\x80\x5a\x87\x61\xa7\xdd\x5a\x6e\xa5\x70\x1b\x67\x9b\x28\x83\x22\xe7\x72\x44\xdf\x78\x8f\x71\x61\x94\x7e\xd6\x55\xaa\xe9\xce\xbe\x91\xd0\xfe\x43\x64\xc9\x15\x87\xe2\x5b\xef\x54\x0d\xdf\x87\x2c\x57\xe2\x7e\xa9\x76\xea\x69\xd4\x9f\xc1\xfe\x86\x9c\xab\xe7\x18\xf9\xf1\xe2\x0c\xaf\x10\xff\xf1\x64\xee\xc6\xd7\x7f\x8b\xae\xaa\x88\xf2\x14\x14\xf4\x6a\xc8\xfa\xaa\x6a\x25\xf2\xe8\x02\x67\xc1\xde\x62\x11\xf5\xef\x46\xae\x31\x1d\x81\x54\xb0\x58\x34\x9a\x15\x64\x5a\x4d\x79\x82\x09\xa4\x4a\x43\x61\xe3\xdd\xf3\x54\x74\xda\x2d\xea\x64\x84\xb9\x20\x14\xf7\x0c\x9f\x60\x6e\xd8\x24\xbb\x75\x82\xb7\x63\x14\x19\xea\x3d\x88\x60\x59\xca\x57\x49\xf3\x9b\x52\x77\xb9\x23\xb1\x91\x5f\x89\x3a\xc1\x54\x69\x74\xe0\x5a\xa9\x9d\x93\x6d\x43\x3a\x55\x41\x3b\xaf\xad\xcf\x16\x56\xeb\x91\xfc\xeb\x14\x53\x56\x08\x63\xfb\xf6\xd7\x02\x35\xc7\x3c\xba\x50\xf2\x4f\xd4\xca\x6f\x0d\x90\x38\xf6\x19\x70\xaa\x66\xb2\xca\x01\x0f\xfb\x15\x37\x63\x2f\xdc\x05\x15\x5a\xcd\x87\x87\x70\x52\x70\x91\x40\xcc\xe2\x31\xc2\x1d\xce\x81\xcb\x03\xc1\x25\x42\x31\x12\x5c\xcc\xe1\x00\x26\xf3\xfc\xab\x80\x69\x0e\x19\xfd\xce\xb4\x1a\x0a\x9c\xe4\x9d\x76\x6b\x58\xa4\xe4\x4f\x6e\xf4\x84\xc9\x91\x40\xaa\x9e\x27\x45\x9a\xa2\x0e\x42\xb7\x1d\x5d\x69\x6e\x70\x60\x34\x97\xa3\x20\x37\x3a\x56\x72\x1a\x9d\x19\xc5\x82\x46\xb2\x44\x1f\xb8\x4c\xec\xe5\x21\x02\x6f\xbb\x10\x93\x5e\xcd\xe4\x08\x9b\x59\x45\x19\x94\x3b\xc8\xd6\xb5\xc7\x9e\xf0\x6a\xe3\x64\x6e\x30\xd8\x8f\xf6\x9f\xf4\xa5\x91\xa9\x8f\xf9\xd2\x14\xfc\x56\x5f\x1e\xea\xad\xf1\xfb\xb8\x3e\xe2\xe7\xa8\x07\xb4\xef\xb7\x68\xa7\x22\xa0\x5f\x94\x04\x0c\x8b\x34\xf4\xd9\xbc\x31\x27\x5c\xe2\xbe\x21\xd6\xcf\x0b\x13\x7d\xfe\xa8\xe2\x3b\xab\xcc\x26\x42\xd7\xe5\x43\x42\xc6\x9e\x56\x70\x7d\x87\xf3\x9b\xdd\x4d\x5d\x4a\xe1\x8d\x75\xda\xad\x29\xd3\xf6\x36\xd8\xfb\x6e\x57\x78\x0a\xaf\xbc\x75\x0b\x46\xf9\x48\xd1\x68\xc8\x9d\x26\x07\x67\xb5\x2f\xba\x01\x74\x60\x9b\x1f\xc7\x42\x94\xc5\xe9\x31\xb1\x0d\xb7\x65\x47\x71\x55\x98\xc6\x89\x8a\x56\xfb\x1d\x56\xd1\x40\xfd\xd6\x0c\xe8\xcd\x31\xc9\x04\x4e\x50\x9a\xa0\x0c\xf7\x69\x73\xc7\x85\x51\x56\x27\x25\x14\xef\xc2\x74\x3d\x51\x1d\x7e\x04\x68\x65\x8c\x0a\x13\xe3\x32\x3f\x96\xf3\x6d\xe5\xa2\xaf\xf9\x84\xe9\xf9\x07\x9c\xaf\x6a\xf9\x34\x84\xd7\xaf\x9f\xa7\x65\x53\xd1\x99\x86\xde\xa5\x0a\x06\x96\x65\x28\x13\x1f\xf5\xf5\x11\xbf\x29\x1b\xc7\x35\xff\xe9\x97\xa3\x9b\x28\x8a\x6c\x88\x36\xfb\xdd\x0f\x9e\x82\x40\xe9\x4f\x84\xd4\x3b\x7e\xf6\x5a\x9f\x6c\x1d\x85\xb4\x93\x8c\x51\xbe\x49\xac\x37\x92\x2e\xc4\xaa\x10\x89\x2d\xe2\x43\x5b\x16\xbd\x9f\xb1\x0d\x06\x04\xcf\x5d\x63\xf1\x9d\x85\x2c\xae\x53\x79\x8e\x7a\x84\x81\xc6\xe7\x51\xf8\xbd\x8a\x3c\xc4\xee\x4e\xb5\xfc\x8b\xe1\xa8\xb7\x56\x3d\x2f\x6b\x5f\x3f\xe8\xb6\x3c\x4c\x96\x55\xaa\x7b\x2f\xb6\xa7\xba\x13\x78\x06\x4e\x35\xfa\xdd\xd9\x97\xa6\xdf\x87\xb0\x8d\x7e\x5b\xa6\x22\xea\xc7\x73\xe8\xb9\x23\xae\xd8\x7d\xa2\xa5\xf3\xc1\xe0\xd3\xc7\x20\xe1\x4c\x60\x6c\xba\xb0\xb7\x66\x6d\x6f\x6b\xe0\x1b\x2e\x60\x09\x55\xad\x18\x7a\x3c\x66\x63\x6e\x90\x3c\x23\xba\x27\xec\x0e\x83\xeb\x9b\xdc\xf6\x86\xae\x05\x6a\x57\x1b\xb6\xe5\xb5\x62\x95\xcd\x83\x95\xca\xdd\x3d\x0c\x9b\xae\xac\xee\x75\x4d\x95\x0b\xa1\xbc\xd0\x8f\xcb\xba\x30\x9d\x6c\x05\xf4\x94\x89\x02\xcf\x59\x96\xd9\xe0\xa8\x6b\x54\x8f\xa1\x13\x2e\x13\xbf\xb5\x2d\xe4\x2f\xf3\x6c\x7b\xb2\xad\xd4\xae\xbc\x08\x7d\xb6\xad\xbf\xd5\x9a\x8f\xb5\x46\x4d\x22\x56\x48\xb6\xcc\x48\xe7\xb6\x46\xf3\xd2\x4e\xbb\x74\x68\x6d\xf6\x77\xcd\xe1\xaa\x94\x2e\x7d\x07\x16\x85\xad\x15\x1a\x53\xca\xd4\xe8\x4c\x26\x5c\x63\x6c\x82\x72\xe1\x0f\x92\xf8\x3d\x0d\x94\xcd\x91\x29\x13\x8d\x67\xa8\xdd\xcd\xdf\x69\x35\x29\x43\xb1\x1a\xfd\x13\xa2\x41\x5a\xe8\x1b\xbe\x73\x28\x87\xeb\x1b\x2e\x0d\xea\x94\xc5\xb8\xf0\x2f\x6c\x82\x71\x1d\xb6\x3a\xa6\xe5\xd1\xca\x7e\xdf\xe8\xed\xd6\x6b\x4a\x6a\xf3\x40\x63\x12\xaa\x5e\xf7\x76\x46\x39\xc5\x61\x31\x3a\x57\x09\x3a\x7b\xe9\xc4\x44\xef\x32\xcd\xa5\x11\x32\xa8\x04\xec\xeb\x4c\x97\x56\x6c\x05\x08\x77\x10\x27\xec\xc2\xd5\x13\x9f\xa6\xad\x35\xeb\x67\xb9\x95\x0f\x62\x73\xef\x7b\xe5\xcc\x1e\xb5\xaf\xbe\x35\x75\x14\xb4\x15\x7c\x60\x78\xb6\x8b\x77\xb3\xcd\x3e\x55\x33\xeb\x2e\x74\x6c\xc6\xb2\xe5\xd2\x9c\x86\x9d\xc8\x96\xc2\xcf\x6a\x16\xd4\x9c\x71\x46\xe9\x7a\x47\x83\x98\xd9\x7b\x43\xa4\x96\xb5\xa1\x81\xcc\x26\x5d\xde\x5a\x60\x87\xab\x67\xe9\x2d\xa3\x5b\xdd\x94\x5e\x0f\xf2\xaf\x22\x7a\xab\xf5\x85\xfa\xac\x66\xfe\x01\xee\x8d\xd2\x1d\x3a\x3c\x04\x5b\xc8\xed\x38\x2e\xf7\x8d\x4f\x5e\x60\x72\x6e\xc6\x34\xb7\xcf\xc6\x28\xc1\x8c\x51\xe3\x7e\x4e\xc3\xa9\xab\x73\xab\x3b\x06\x36\x96\xc7\xc0\xba\x2d\xcb\x82\x8d\x91\xc6\xea\xcd\x58\x3d\x84\xe6\xe1\xc9\xa7\x91\x59\x07\xa2\x36\xd9\x6e\x9e\x48\xa9\x99\x5e\x69\x96\x05\xa8\xb5\xeb\x62\xcf\x68\xa9\xb5\x31\x7c\xfd\x5d\xbf\xdb\xb4\xb0\x9a\x4b\x76\x90\xb7\x73\x08\xf4\x5c\xdc\xbb\x9b\xa8\xe6\x91\xd6\xe3\xff\x00\x58\xfd\xc3\x37\x51\xc7\xa9\x41\xfd\x4d\xc3\x7f\x39\xdc\x57\x34\x7a\xb5\x92\x8b\xe6\xe0\xbf\xec\xb4\xff\x09\x00\x00\xff\xff\x9b\xd6\x77\x7e\xb1\x17\x00\x00")

func templates17_upsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates17_upsertGoTpl,
		"templates/17_upsert.go.tpl",
	)
}

func templates17_upsertGoTpl() (*asset, error) {
	bytes, err := templates17_upsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/17_upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x25, 0xff, 0x59, 0xd5, 0x26, 0x85, 0x1b, 0x37, 0x8f, 0x23, 0x53, 0x3f, 0x3e, 0x1c, 0x2c, 0x9d, 0xca, 0x2d, 0x2e, 0xbd, 0xc3, 0xf8, 0x7d, 0xcd, 0x70, 0x56, 0x16, 0x76, 0xac, 0xd4, 0x9a, 0x79}}
	return a, nil
}

var _templatesSingletonMssql_upsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x5d\x6f\xda\x30\x14\x7d\x4e\xa4\xfc\x87\xbb\x48\x95\x62\xd5\x4a\xd7\xd7\x55\x4c\x62\x25\x6b\x99\x68\x80\x26\x6c\x0f\x94\x07\x43\x6e\xa8\xa5\x60\x90\x3f\xd0\xaa\x89\xff\x3e\xd9\x49\xc6\x67\xa7\x69\x2f\x21\xbe\x1f\x87\x73\xcf\xb9\xce\xcd\x0d\xcc\x0d\xaf\x8a\xc9\x46\xa1\xd4\x63\x83\xf2\xed\x29\xcb\xc6\x83\x3a\xaa\x80\x81\x3d\x28\xcd\x34\xae\x50\x68\x50\x5a\x72\xb1\x04\xa3\xec\x53\xbf\x22\x18\xd7\xd8\x63\x9a\xc1\x46\xae\xb7\xbc\xc0\x22\x0e\xfc\xd2\x88\xc5\x65\xe0\xa8\xe0\x0c\x0a\xc9\xb7\x28\x55\xdc\xe3\xac\xc2\x85\xa6\xa0\xd9\xbc\xc2\x94\xad\xb0\xf9\x03\x0a\x1b\xc9\x57\x4c\xbe\x51\x30\x9b\x82\x69\xa4\xc0\x85\x05\x82\xe9\xac\xad\x58\x1b\xbd\x31\xfb\x00\x69\xb9\xfd\x0a\x7c\xaf\x29\xee\xd8\xd8\x8a\x89\x65\x85\x71\xbf\x40\xa1\xc7\x66\xad\x31\xab\xf8\x02\x2d\x8f\x78\x30\xa6\x60\x7f\x9f\xc7\x2d\x3e\x09\xfc\xc0\xf7\xe6\xa6\x84\x4f\x87\xcd\x0f\xa8\xbf\x98\xb2\x44\x19\x91\xc0\xf7\x0a\x2c\x51\x1e\x64\x47\xa6\xcd\xce\x4d\x59\x23\x28\xcd\xa4\xee\x8b\x02\x7f\x5a\xa0\x5b\x17\x2b\x57\x3a\xfe\xba\x91\x5c\xe8\xd2\x16\x52\x08\x9f\x92\xe7\x87\x04\xfa\x69\x3e\x84\x2b\x05\x4c\xc1\x54\xcf\x5e\x44\x78\xa0\x07\xb9\xd8\x37\xc9\xfa\xe9\x03\x44\x59\x32\x48\xee\x73\xb8\x52\xc4\xf5\xaa\x19\x44\xd3\x2b\x35\x23\x16\x22\xf0\x3d\xef\x80\x61\xc5\x16\xf8\xba\xae\x0a\x94\xca\x4d\x3e\x51\xe8\xd8\x1d\x26\x28\x54\x28\xa2\x46\x78\x42\x61\x3f\x03\x85\x5b\xd2\x22\x72\xb1\x54\xf1\xb7\x35\xff\x53\x49\x1b\xe1\xa3\x5a\x49\x72\x1d\xd2\xf0\xfa\x20\x34\x18\x13\x72\x3c\x46\x33\xc5\x30\x85\x28\x74\x99\xb5\x04\x4e\x61\x6b\xa5\x92\x4c\x2c\xb1\x75\xdf\x79\xe9\xf1\x12\x38\x7c\xe8\xc0\xc7\xfa\x78\x0e\x04\xdd\xb4\x07\x0e\xc9\xdb\xd9\xc7\xb9\x60\x53\x35\x8b\xad\x34\xd0\xb1\x12\xbb\xd7\x90\xc2\x96\xc2\xd6\x76\xed\x2e\xb1\xb3\x2a\x9e\x79\x79\xdd\x39\xd2\xe8\xc4\xd6\xa6\xf3\xc7\x63\x92\xc2\x53\x37\xbf\x7f\x4c\x7a\x90\xdb\x43\xf8\x8e\x8d\xa3\x5e\x37\x4f\x20\x4b\xac\x87\xce\xf7\xbd\x63\x19\xea\x11\x93\x6c\x65\x97\x40\x45\xc7\x72\x9e\x2a\x7e\x6c\x55\x7d\x61\xc8\x7b\xdc\x9b\xf4\x5f\xa8\xa7\xc3\xfc\x9f\xe8\xf7\xd3\x2c\x79\xce\x21\xb2\xfb\xf7\xbd\x3b\x98\x24\x99\x7b\x0f\xcf\x37\xa5\xbe\x5b\x14\x42\xab\xeb\xff\xaf\x66\x73\x45\x4f\x37\xb3\x9e\x85\x97\xae\xa6\xfe\x2a\x10\xf8\xdc\xae\xcb\x39\xef\x17\x31\x9c\xe4\xa3\x49\x0e\xf5\x00\x49\xcf\xed\xc3\x5d\xd8\xca\xda\x90\xae\x91\x28\x84\x33\xba\x2f\x0c\xdd\x2a\xef\x00\x2b\x85\xa7\xf8\x0d\xfc\x5d\xd8\xec\x54\xe0\x7b\x12\xb5\x91\x02\xe6\xa6\x8c\xb3\xda\x32\x12\xf8\xbb\xc0\xff\x1d\x00\x00\xff\xff\xc5\x4d\x6b\x35\x77\x05\x00\x00")

func templatesSingletonMssql_upsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSingletonMssql_upsertGoTpl,
		"templates/singleton/mssql_upsert.go.tpl",
	)
}

func templatesSingletonMssql_upsertGoTpl() (*asset, error) {
	bytes, err := templatesSingletonMssql_upsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/singleton/mssql_upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x40, 0xf, 0xf8, 0x49, 0x66, 0xec, 0xc4, 0xb4, 0xd8, 0x92, 0x3d, 0xe0, 0xe9, 0xdf, 0x37, 0x32, 0x8b, 0xbf, 0xbc, 0x85, 0x4d, 0xe0, 0xcb, 0xea, 0x85, 0xf6, 0xa0, 0x54, 0xdc, 0x5f, 0xb6, 0x7c}}
	return a, nil
}

var _templates_testSingletonMssql_main_testGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\x5b\x6f\xdb\x38\x16\x7e\x96\x01\xff\x87\x53\x03\x6d\xa5\xac\x96\x69\xb7\x8b\x7d\x48\x61\x14\xbe\x28\x6d\xd0\xd8\x4e\x2c\xef\x74\x06\x69\x26\xa1\x2d\x2a\x21\x22\x91\x32\x49\x25\xf5\x74\xf2\xdf\x07\x24\x25\x59\x72\x6c\xb7\x99\x97\xc9\x8b\xc3\xc3\x73\xff\xce\x85\xba\xc7\x02\xc4\xcd\xb7\x51\x18\x9e\x9f\xde\x91\x15\x74\x41\x90\x1b\xf2\x2d\x43\xa3\x5c\xaa\x01\x4f\x33\x9a\x10\xf7\xda\xfd\x90\x7a\xbf\xf7\x4e\x67\xc1\x14\x66\xbd\xfe\x69\x00\xe8\xa0\x37\x1c\x7e\x95\xff\x1a\x4c\xc6\xe1\x6c\xda\x3b\x19\xcf\x00\x1d\xc0\xf1\x64\x1a\x9c\x7c\x1c\xc3\xe7\xe0\x37\x74\xf0\x01\x1d\x7c\x65\x1f\xa6\xc1\x71\x30\x0d\xc6\x83\x20\x44\x07\xd7\x5e\xbb\xd5\x6e\xa9\x55\x46\x20\x95\x72\x99\xcc\x88\x54\x44\x80\x54\x22\x5f\x28\xf8\xde\x6e\x39\xd1\x7c\xc0\x19\x03\xfd\x77\x20\x97\x09\x1a\xf6\x0d\x71\x8c\x53\x62\x88\x52\x09\xca\x6e\xda\x2d\xe7\x96\x4b\x05\xd0\xa4\xe5\x92\x88\x4d\x5a\x86\xa5\xdc\xa4\x49\x99\xa4\x3c\x22\x4d\x3e\x2e\x4a\x7d\x94\xa9\x76\xcb\x51\x44\xaa\x61\xdf\x18\x5e\x0b\xde\xd1\x2c\x3c\x3f\x1d\xa4\x11\xcc\x39\x4f\xda\xad\x47\x1d\x4f\x9c\xb3\x05\x50\x46\x95\xeb\x15\x31\x8c\x30\x65\xd0\x85\x57\xb5\x20\xbf\x3f\xd6\xb9\xdd\x14\x0e\x6a\x97\x1e\x48\xa2\xf2\xcc\xf5\x80\x08\xc1\x85\xd1\xa2\x71\x21\x42\x58\x8a\x16\x74\xee\x69\x46\x04\x0a\x89\x1a\x92\x18\xe7\x89\x72\x3b\x46\x05\x92\x8b\x5b\x92\xe2\x8e\x0f\x9d\x68\xce\x3b\xde\x3e\x4e\x1b\xb8\x66\x55\x22\x27\x7b\x79\x75\x42\x3a\x3e\xbc\xfd\xef\xbb\x77\x06\x35\x27\x45\x05\x0e\x5d\xb0\x32\x1f\x89\x0a\x4d\x66\x4a\x91\x68\xce\x70\x6a\xb5\xa6\xc8\x00\xb4\x93\x55\xdf\x16\x8c\x06\xb5\x9d\x8c\xfa\xb6\x60\x34\x50\xee\x64\xd4\xb7\x25\xa3\xc6\xb2\xc6\x78\xc2\x9a\x51\x59\xae\xb2\x0a\x76\x6a\x2c\xb3\x65\xd9\x6b\xf5\xb0\x53\x42\xf3\x34\x92\x50\x2b\x98\x9a\x50\x9f\xf3\xa4\x32\x72\x47\x33\xb9\x4c\x16\x69\xd4\xb1\x69\xd6\x98\x77\xe1\x1e\x27\x18\xf5\xc9\x0d\x65\xbf\xe0\x84\x46\x58\x51\xce\x5c\x0f\x15\x07\xe2\xb6\x5b\x8e\x63\x78\xac\x03\x63\xae\x82\x34\x53\x2b\x77\x6f\x16\x7d\x68\x1e\x9f\xa9\xc4\x62\x56\x29\x29\x8e\x95\x92\x31\x57\xae\xf9\x27\x58\xe6\x38\x91\xee\xee\xf4\xfb\xf0\xa6\xd2\x62\x29\xcf\xf6\xa5\xcc\x72\xa5\xa7\x22\x3c\x53\x51\x05\x72\xa5\x69\x4d\x69\xb7\x1c\x0f\x0d\x6e\xc9\xe2\xce\xb5\xd8\xd0\xd8\xb4\xe4\x8b\x2e\x30\x9a\x98\x2e\x75\x04\x51\xb9\x60\x9a\xdc\x6e\x39\xa6\xc1\x9d\xc3\x43\x18\x08\x82\x15\x01\x0c\x02\xb3\x88\xa7\xf4\x0f\x12\x41\x34\x07\xed\x22\xb2\x7a\x12\xc2\xdc\x7a\x51\x79\xd0\xed\xc2\x1b\xab\x73\xa3\xd8\x2a\x1d\x28\x54\x78\x9e\x10\x7b\xe1\x96\xfd\xe8\x55\x86\x69\x0c\x2f\x1a\x35\x67\xb4\x15\x4e\x77\x21\x45\x91\xe0\xd9\xcc\xa8\x76\xbd\xf7\x4f\x42\x69\xc6\xa2\x75\x36\x84\x17\x26\xa6\xe7\x88\xeb\x1f\x2b\xa5\x9d\x39\xea\x02\xf9\x46\x16\x68\xc0\xd3\x14\xb3\xc8\xed\x14\x65\xef\x43\xe7\xdf\x61\xc7\x07\x3b\x32\xf4\xe9\xff\xe6\xa4\x8b\x54\x9f\xce\xcc\x49\xb7\xb7\x3e\x45\xe6\x54\xcb\x9b\x35\x13\xfb\xc6\x9f\xa3\x2e\x70\x89\x26\x19\x61\x6e\xc7\xe4\x4a\x5e\xd9\xe9\x88\xe4\x32\x31\x3d\xb9\x0d\xc3\x9a\xe7\x5c\x48\xf4\x45\xe0\xcc\x25\x42\x1b\x8f\x31\x4d\x48\x04\x8a\x03\xcf\x08\x83\x27\x2a\x21\xa6\x89\xed\xf5\x32\xde\x88\xc4\x44\x80\x1e\xf2\x7a\x1b\xc0\x15\x74\x21\x46\x83\x84\x4b\xe2\x7a\xf0\x58\xd4\x91\x23\x55\x54\xb8\xfb\x6a\xbe\x52\x44\xa2\x7e\x1e\xc7\x76\x49\xd4\x52\x86\x42\x15\x99\x45\xc2\xc8\xc3\xf1\x67\xb2\x1a\x12\xa9\x04\x5f\x11\xe1\xd6\x16\xb6\x0f\xb1\xf7\x44\xca\x62\x66\xad\x58\x8b\x15\x90\x75\x3e\x2c\xd4\x0f\x90\xdc\x99\x0f\xa9\x85\xc1\x42\x08\x0b\x0b\x69\x23\x11\x5b\x0c\x7e\xc1\x74\xbb\xbd\x38\x55\xe8\x4c\x50\xa6\x12\xa6\x0d\x79\x4f\x88\x36\x92\xa2\xa5\x5d\xcf\xfb\x59\x2f\x1f\x30\x55\x10\x73\xb1\xcb\xd1\xc2\xd9\x42\x13\xa3\xc9\xfe\x25\x2d\x93\x11\x8f\x88\x6b\xd6\x86\x7d\x14\x78\xc5\xaf\x09\x44\x3e\x50\xb5\xb8\x05\x73\xad\xcf\x0b\x2c\x49\xb1\x69\x8f\x6a\xb3\xc2\x52\xaa\xfb\x18\x27\x72\x83\xc1\x92\xf4\x53\xc2\xee\xe4\xc6\x65\x44\xa5\x2e\xc3\x8e\xf5\x7e\x8f\xbb\xcd\x86\xad\x3d\x2d\x74\xe1\x1e\x75\x41\x27\x38\xcc\x74\x86\x63\xf7\xba\xdd\x72\x06\xd3\xa0\x37\x0b\x60\xd8\x9b\xf5\xfa\xbd\x30\x80\x97\xf2\x7d\xbb\xe5\x7c\x9c\xb4\x5b\x8e\x7d\xf9\xad\x6f\x2e\xde\x5e\xca\x76\xcb\x09\x83\x19\x4c\x83\xde\xf0\x6a\x30\x19\x8d\x4e\x66\xb3\x60\x78\x15\x8e\x7b\x67\xe1\xa7\xc9\x0c\x26\x63\x2b\x7d\xfd\xa4\x5f\xcb\x48\x52\x24\x72\x36\x48\x23\x57\x2e\x13\x1f\x9e\x3f\x0e\xbc\xbd\xd1\xd7\x67\x5d\x2d\xf6\xc3\x43\x08\x29\x5b\x10\x18\x85\x10\x9e\x9f\xc2\x7f\xde\xbc\xfd\x1f\x50\x05\x0b\xcc\x60\x4e\x20\xe2\x8c\xc0\x03\x55\xb7\x96\x75\x38\x9d\x9c\xad\xc3\xbe\x80\x93\x63\x08\x7e\x3d\x09\x67\x21\x5c\xc2\x77\x88\xb0\xc2\x73\x2c\xc9\x95\x9e\xeb\xf0\xe7\xfa\x2c\x19\xce\xe4\x2d\x57\xf6\xe2\x11\x2e\xc0\x47\x08\x31\xb8\x84\x8b\xf7\x97\xbb\x01\xa8\xb4\xbb\x61\x70\x1a\x0c\x66\x66\x5f\xc0\xf1\x74\x32\x02\xb9\x92\xa8\x54\x2f\x41\x97\xc3\x97\x4f\xc1\x34\xb0\x1c\x5d\x78\xfd\x52\xbe\x36\x35\xdd\x74\xf8\xa5\xdc\x06\xc1\x3f\x04\x88\x22\x58\x44\xfc\x81\x35\xe0\xa0\xb1\x5e\x4b\xf6\xd1\x5f\x1f\x09\x25\xb1\x1c\x9d\x3f\xb7\xe3\x8e\xfe\xd6\x92\x7b\xd6\x0c\x28\x33\xa4\x27\xb3\x5f\xce\x93\x62\x08\xf8\x80\xc5\x8d\x04\x84\x50\x39\x1c\xd6\x81\x2e\xb6\x6c\xc0\x42\xda\x8a\x21\x84\x3c\xcb\x57\x8d\x7d\xab\x45\xa2\x31\x79\x98\x12\x1c\x11\x61\xcd\xda\x1d\x22\x55\xc4\x73\xb5\x7d\x85\xec\x5b\x2f\x85\x01\x2d\x6b\x36\x04\xcf\xd5\x9a\xda\xdc\x1b\xb5\xb4\xea\xfb\x69\xce\xb6\x65\xb4\x3e\xa7\xcb\xd1\x2b\x72\xc6\x28\xbb\x39\xea\x54\x29\xb2\x41\x7a\x9b\x02\xd6\x81\xe6\x60\xff\xd1\xe0\xdf\xf2\xe4\xfa\x49\xf0\x16\x9c\xe9\xf2\x73\x8b\x4f\x4b\xdf\xe2\xe3\xed\xad\xc4\xaa\x37\xec\x9d\x6f\x8d\x14\x76\x37\x3e\xd2\x9c\x35\x57\x91\xc9\x65\x52\xbc\x46\x8c\x1f\x1d\x1f\x22\x41\xef\x89\x40\x66\x7b\xf7\x73\x9a\x44\xe7\x39\x11\xab\x22\xbe\xb2\xa9\xca\xe7\xce\x66\xd7\xda\x06\xb4\x1f\x38\xfa\xb7\x78\xaa\x9a\xb4\xec\x7e\x9b\x32\x9a\xf8\xdb\xb2\xb5\x11\xd2\x63\xbb\xf5\x57\x00\x00\x00\xff\xff\x36\xec\x2e\x89\x0c\x10\x00\x00")

func templates_testSingletonMssql_main_testGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonMssql_main_testGoTpl,
		"templates_test/singleton/mssql_main_test.go.tpl",
	)
}

func templates_testSingletonMssql_main_testGoTpl() (*asset, error) {
	bytes, err := templates_testSingletonMssql_main_testGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/mssql_main_test.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe2, 0x8e, 0x8e, 0x8, 0xc8, 0xc2, 0xed, 0xd7, 0x65, 0x6e, 0x2f, 0x55, 0xe3, 0x84, 0x23, 0x47, 0x12, 0x18, 0xd4, 0xae, 0xe2, 0xf6, 0xd7, 0xd4, 0xa4, 0xf, 0x49, 0xc6, 0x72, 0xcc, 0x3e, 0x63}}
	return a, nil
}

var _templates_testSingletonMssql_suites_testGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xc1\xca\xc2\x30\x10\x84\xef\x85\xbe\xc3\x52\x72\x68\x7f\xda\x3c\xc0\x0f\x1e\x3c\xea\x41\x44\xda\x07\x88\x76\x5b\x02\x71\x2d\xdd\x2d\x08\x21\xef\x2e\x31\x16\x29\x78\x9b\x61\x26\x5f\x66\x87\x85\x6e\xd0\x22\x4b\x37\x31\xce\x52\x0a\xfc\x09\xb2\x58\x1a\x75\x5b\x81\xcf\x33\x00\xef\x1b\x98\x0d\x8d\x08\xca\x52\x8f\xcf\x1a\x94\x98\xab\x43\xf8\xdf\x81\x6e\xa3\xe2\x10\xd6\xa2\x1d\x3e\xa9\x3e\xf0\xf1\x61\xe9\x9d\x43\xf3\x2d\xa0\xe3\x8d\x57\xc6\x59\xc3\x91\xa5\xf4\x3e\x4a\xe4\x04\x5d\x39\x27\x73\xc7\x54\x17\x7d\x59\xa8\x2c\xbc\x4f\x6f\x74\x37\x9d\xdd\x32\x1b\x17\x42\x51\x43\x5c\xfd\x23\x49\x67\x55\xe9\x37\xa4\x7e\x33\x65\xb5\x21\xcf\x5e\x01\x00\x00\xff\xff\x27\x41\xb1\xc4\x08\x01\x00\x00")

func templates_testSingletonMssql_suites_testGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonMssql_suites_testGoTpl,
		"templates_test/singleton/mssql_suites_test.go.tpl",
	)
}

func templates_testSingletonMssql_suites_testGoTpl() (*asset, error) {
	bytes, err := templates_testSingletonMssql_suites_testGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/mssql_suites_test.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc2, 0x77, 0x23, 0x9d, 0xca, 0x7c, 0x5, 0xb3, 0xeb, 0xa, 0x78, 0xc, 0x30, 0x77, 0xe2, 0x6, 0x5b, 0x35, 0x61, 0xeb, 0x5f, 0xd9, 0x83, 0x3f, 0xb0, 0x9f, 0xb6, 0x96, 0x74, 0x62, 0x21, 0x4}}
	return a, nil
}

var _templates_testUpsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x54\xcd\x6e\xdb\x3c\x10\x3c\x4b\x80\xde\x61\x3f\xe3\x6b\x41\x15\x0a\x83\x5e\x53\xf8\xe0\xfc\x1c\x82\xa2\x86\x11\xcb\xe7\x82\x91\x56\x0e\x61\x9a\x14\xc8\x55\x6d\x57\xe0\xbb\x17\xa4\x9a\xd8\x49\x9c\xc2\x87\xf6\x90\x83\x2d\x91\x98\xdd\x99\xd9\x1f\xf5\xfd\x19\xfc\x2f\x94\x14\x0e\x2e\xc6\xc0\x27\xe1\x0d\x1d\x2f\xc5\xbd\x42\x18\x1e\x7c\x2a\xd6\xe8\x7d\x96\x36\x9d\xae\x80\xd0\x51\xdf\x0f\x21\x7c\xd1\xce\x54\x67\x85\xf2\x7e\xd1\x3a\xb4\xc4\x08\x3e\x05\x80\xd4\x4b\x5e\xe6\xd0\x67\x69\x42\x7c\x26\xac\x50\x0a\x15\xcb\xb3\x34\x4b\x13\xd9\x80\x42\xcd\x9e\x72\x5c\x9b\x8d\x9e\x4b\xbd\xec\x94\xb0\xde\x4f\x94\xba\x32\xaa\x5b\x6b\x97\xc3\x78\xfc\x27\xe4\xcc\xca\xb5\xb0\xbb\xaf\xb8\x7b\x0a\x08\x7c\x09\xf1\xf9\x4a\xb6\x6c\x14\xfe\x5b\xa9\x97\x40\xd1\xcb\x46\xd2\x03\x18\xad\x76\xd0\x0e\x81\xb0\xc2\x1d\x54\x43\xe8\x28\xcf\xd2\xc4\x47\x79\x0e\xb1\x0e\xa5\xb0\x42\xd7\x66\x2d\x7f\x22\x9f\xe2\x66\x8e\x58\x07\xf9\xc9\x0f\x61\x01\x6d\xfc\x19\x9b\xa5\xc9\xf9\x39\x4c\x88\x70\xdd\x12\xd0\x03\xc2\xed\x74\x7e\x73\x57\x82\x93\x35\x82\x69\x40\x68\x58\xcc\xc2\x4d\x96\x26\x26\x24\x3d\x28\xdc\xde\x48\xef\x87\xaa\x84\xbc\x87\xbc\x73\xb2\x5d\x45\x2c\x08\x2a\xe0\xa3\x29\xe0\x8d\x42\x5c\x5f\x96\xbb\x16\x5d\x01\x64\x3b\xcc\xbf\xc4\x3c\xff\x8d\x41\x4b\xf5\x58\x90\x9b\xa0\xb6\x61\xa3\x85\x8e\xa5\x20\xb3\x67\x39\x2e\x09\x5c\xe4\xbe\x80\x0f\x6e\x54\x84\x84\xfb\xfa\xf4\xbd\x6c\x40\x1b\x02\x3e\x35\x57\x46\x13\x6e\xc9\xfb\x8a\xb6\xc1\x5e\x35\x9c\xf9\xa5\xa8\x56\x4b\x6b\x3a\x5d\xb3\xbc\xef\x51\xd7\x61\x7a\x92\x01\xf3\xad\x73\x54\x6e\x59\x4c\x73\x98\xe2\xd5\xc5\xbd\x91\x8a\x5f\xe2\x52\xea\x98\x44\x39\x3c\xbc\x2b\xb7\xac\xa2\x6d\x11\x5c\x3e\x52\x9c\x04\x0a\x46\x6a\x6c\xd0\x42\x98\x66\x96\x43\x0f\xdf\x61\x0c\xb4\xe5\x77\x46\xa9\x7b\x51\xad\x58\x0e\x3e\xf6\xfa\xa9\x25\x86\xff\x9e\xee\xb7\xbc\x87\xd6\xa0\xae\xe1\xcc\x7b\x08\xa7\xa8\xe0\x56\x37\x68\x59\xfe\xfc\x74\x62\x7b\xba\xc8\x77\xbc\x37\xc7\x9a\x52\x99\x4e\x53\xbc\x7b\x31\x65\x8f\xeb\xc9\x72\x7e\x15\x30\x27\x5a\x38\xb0\x7f\x44\x2a\xdb\x73\x07\x54\x24\x0f\xb8\xcf\xcf\x51\xa3\x8d\xd0\x04\x46\x23\x58\xac\x8c\xad\x0b\x58\x1a\xba\x18\x15\x43\xc0\x5e\xfc\x8b\x1d\x5a\xcc\xae\x27\xe5\xcd\xd1\x1d\xfa\x1b\x4b\xd2\x08\xe5\xf0\x4d\xd8\xab\x8f\x0a\xe7\xfc\x9f\xaf\xd4\xfb\x1c\xb4\xf7\x35\x67\x3e\x4b\x7f\x05\x00\x00\xff\xff\xd3\x2a\x6c\x17\xeb\x06\x00\x00")

func templates_testUpsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testUpsertGoTpl,
		"templates_test/upsert.go.tpl",
	)
}

func templates_testUpsertGoTpl() (*asset, error) {
	bytes, err := templates_testUpsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5d, 0xa2, 0x2a, 0x87, 0xf0, 0x5, 0x53, 0xb2, 0xcd, 0x86, 0x7b, 0xc6, 0x61, 0x7, 0xcc, 0xbe, 0x7c, 0xf0, 0x4e, 0xc0, 0x4e, 0x26, 0xd8, 0xf4, 0x44, 0xf0, 0x54, 0x8d, 0x3, 0x2e, 0xbb, 0x92}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/17_upsert.go.tpl":                        templates17_upsertGoTpl,
	"templates/singleton/mssql_upsert.go.tpl":           templatesSingletonMssql_upsertGoTpl,
	"templates_test/singleton/mssql_main_test.go.tpl":   templates_testSingletonMssql_main_testGoTpl,
	"templates_test/singleton/mssql_suites_test.go.tpl": templates_testSingletonMssql_suites_testGoTpl,
	"templates_test/upsert.go.tpl":                      templates_testUpsertGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"17_upsert.go.tpl": &bintree{templates17_upsertGoTpl, map[string]*bintree{}},
		"singleton": &bintree{nil, map[string]*bintree{
			"mssql_upsert.go.tpl": &bintree{templatesSingletonMssql_upsertGoTpl, map[string]*bintree{}},
		}},
	}},
	"templates_test": &bintree{nil, map[string]*bintree{
		"singleton": &bintree{nil, map[string]*bintree{
			"mssql_main_test.go.tpl":   &bintree{templates_testSingletonMssql_main_testGoTpl, map[string]*bintree{}},
			"mssql_suites_test.go.tpl": &bintree{templates_testSingletonMssql_suites_testGoTpl, map[string]*bintree{}},
		}},
		"upsert.go.tpl": &bintree{templates_testUpsertGoTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
