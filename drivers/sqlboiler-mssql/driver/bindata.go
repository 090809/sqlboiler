// Code generated by go-bindata.
// sources:
// override/templates/17_upsert.tpl
// override/templates_test/singleton/mssql_main_test.tpl
// override/templates_test/singleton/mssql_suites_test.tpl
// override/templates_test/singleton/mssql_upsert.tpl
// override/templates_test/upsert.tpl
// DO NOT EDIT!

package driver

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templates17_upsertTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x5f\x6f\xdb\x38\x12\x7f\x96\x3e\xc5\x34\x38\x34\xd2\x9d\xa3\xdc\xbd\xe6\x90\x87\x24\xfd\xb3\xc5\x36\x59\xb7\x6e\xb7\xc0\x06\x41\x40\x4b\x23\x9b\x08\x4d\xaa\x14\xe5\xd4\xeb\xea\xbb\x2f\x86\xa4\x2c\xd9\x56\x6a\x67\xb3\x59\xec\x43\xd1\x88\x1c\xce\x9f\xdf\x6f\x66\x38\xf4\x72\x79\x04\xff\x32\x6c\x2c\xf0\x8a\xcd\x70\xc4\xe5\xa4\x12\x4c\xc3\xc9\x29\x24\x9f\x68\x35\xa1\x65\xf8\x0e\x65\xb3\xf3\x1d\x0c\x37\x02\x2f\x58\x89\x70\x54\xd7\xa1\x55\x30\x67\x7a\xef\xe3\x29\x9b\xa1\x58\x3f\x5e\xa6\x53\x9c\x31\x7b\x60\xfb\x68\x32\x6a\x77\xed\x01\x9e\x43\x72\x96\x65\x6f\x85\x1a\x33\x61\x95\x1c\x1f\xc3\xe7\xa2\x44\x6d\xde\x02\x33\x06\x67\x85\x29\x81\x49\xe0\x92\xd6\x06\xc0\x64\x06\x99\x42\xbb\x56\x15\x19\x33\x08\x4a\x03\x9f\x48\xa5\x11\x94\x84\x54\xc9\x5c\xf0\xd4\x24\x61\x5e\xc9\x14\x22\x05\xff\x5e\x2e\xb7\x41\xa9\xeb\xb8\x31\x13\x59\x2f\xa4\x32\x90\x5c\xa9\x0b\x25\x0d\x7e\x33\x75\x9d\x9a\x6f\xa4\x8b\x3e\x12\xbf\x38\x80\xe5\x12\x65\x46\x5e\x7a\xd3\x17\x4a\x54\x33\x59\xc2\xf5\x4d\x69\x34\x97\x93\x01\xdc\x4f\xb9\x41\xc1\x4b\x03\x49\x92\xb8\xc5\x18\x50\x6b\xa5\x61\x19\x06\x1a\x4d\xa5\x25\xa8\xc4\x99\x76\x96\xbb\x56\xc7\x8a\x8b\xe4\x2d\x9a\x57\xe7\x51\xbc\x5c\xa2\x28\xd1\x7a\x32\x80\x66\xc3\x4b\xfa\x7d\x99\xd5\xf5\x60\xdd\x97\x8e\x0b\x49\x92\xc4\x61\x1d\x86\x2b\xaf\x43\x07\x38\x41\xd8\x01\x9d\xfe\x1c\x32\xc9\xd3\x0d\xf8\x87\x4f\xc3\x1f\xac\xce\x92\xd6\x6c\xfc\xfb\x13\x32\x7c\x7e\x46\x96\x61\xc0\x73\xf2\x8b\x52\xf4\x6f\xa4\xe3\xff\xd6\xe6\x8b\x53\x90\x5c\x90\x13\x41\x41\x20\x45\x56\xdd\x17\xcd\x8a\xd7\x5a\x47\xa8\x75\x1c\x87\x41\xdd\x47\xdd\x03\x5c\xf5\x51\x05\x15\xd5\x29\x7d\xe3\x37\x4c\x2b\xa3\xf4\x63\x8a\xa7\xa3\xba\xf8\x93\x3c\x0e\xb7\xf1\x24\x4f\x1c\x76\xaf\xbd\x4f\x1d\x54\xb7\xc9\x6d\xc5\xfd\x52\xe7\x54\x0f\xd6\x4f\x20\xbd\x27\xd7\xba\xb9\x45\x8e\x3c\x1b\xb1\x2b\xa8\xff\x72\x12\xf7\x24\xea\x9f\xc6\xd3\xaa\x5d\xf2\x1c\x14\x9c\xb6\x98\xfa\xf6\x69\xf7\xcb\xe4\x0a\xef\xa3\x83\xe5\x32\x19\xde\x4d\x28\xae\xba\x3e\x01\xa9\x60\xb9\xec\xdc\x38\x75\x0d\x85\x56\x73\x9e\x61\x06\xb9\xd2\x50\xd9\x78\x0f\x2c\x09\x61\x40\xd7\x15\x01\x2e\x08\xc2\x03\xc3\x67\x58\x1a\x36\x2b\x6e\x9d\xd4\xed\x14\x45\x81\xfa\x00\x12\xa8\x9d\x74\x9b\x27\x3f\x29\x75\x57\x5a\xf6\xd6\x32\x2a\x53\xe7\x98\x2b\x8d\x0e\x56\x2b\xb4\x77\x7a\x6d\x67\x50\x1b\x2d\xb9\x6b\xbd\xb5\x68\x86\x61\x20\x7f\x7f\x85\x39\xab\x84\x29\xc9\xf0\xd7\x0a\x35\xc7\x32\xb9\x52\xf2\x37\xd4\xca\x6f\x8d\x90\x88\xdd\xbc\xcd\xeb\xda\x93\xf0\x85\x9b\xa9\x97\x1c\x80\x8a\xc3\x30\x38\x3e\x86\xf3\x8a\x8b\x0c\x52\x96\x4e\x11\xee\x70\x01\x5c\x1e\x09\x2e\x11\xaa\x89\xe0\x62\x01\x47\x30\x5b\x94\x5f\x05\xcc\x4b\x28\xe8\xff\x42\xab\xb1\xc0\x59\x19\x06\xe3\x2a\x27\x4f\x4a\xa3\x67\x4c\x4e\x04\x52\x6f\x3c\xaf\xf2\x1c\x75\x14\x87\x01\x41\x7f\x3b\x80\x94\x44\x34\x93\x13\xdc\xc8\x07\x8a\x76\x5c\xe5\xc9\x17\xcd\x0d\x8e\x6c\x16\x44\xa9\x25\xa9\x5d\x3e\x5f\x18\x8c\x0e\x93\xc3\x5e\x75\x6d\x1a\x3d\x59\x55\x07\xda\x1f\xe8\x22\x70\x4e\x4e\x81\x76\xfd\x46\x1c\x06\x6d\xf4\xc3\xaa\x89\x7e\x5c\xe5\xb1\x4d\x9e\x6d\x22\x5c\x96\x5c\x10\xd8\x97\x95\x49\x3e\xbe\x57\xe9\x1d\xa9\xb1\xf0\x0f\x1c\x0b\x19\x59\xd9\x71\xf8\xfa\x0e\x17\x37\xfb\x99\xf8\x2c\x85\x33\x12\x06\x73\xa6\x6d\xc2\xd9\x62\x0a\x6d\x1e\xbf\xf0\x26\x29\xee\xe6\xba\xd7\x68\xd6\x89\x7d\x67\x37\x1c\x73\x94\x62\x61\x10\xf4\x9a\x6e\xda\xe4\x8e\xfd\x6e\x1a\xee\x21\xaa\x2a\xd3\x95\x6e\xc9\xb2\x9f\xab\x34\xa0\xaf\x78\x15\x05\x74\xfd\x1f\xd1\xa5\x3d\x2b\x04\xce\x50\x9a\xa8\x09\x73\x87\xd9\xb3\xca\x28\xd2\x47\xe9\xc2\x07\x30\x6f\xd3\xc5\x5b\x20\xc8\x08\xc2\xd6\x0e\xd5\x3a\xe3\xb2\x3c\x93\x8b\xde\x32\x1c\x6a\x3e\x63\x7a\xf1\x33\x2e\x56\x17\xca\x3c\x86\x97\x2f\x1f\xa1\xa2\xaf\x92\xe7\xb1\xf3\xa5\x0d\x9d\x15\x05\xca\xcc\x47\x7a\x7d\xc2\x6f\x06\xde\xe9\x6b\xfe\x9f\xff\x9d\xdc\xd8\x21\x31\x08\x28\xa9\xed\x3f\x9e\x83\x40\xe9\xc5\x63\xea\xbe\xff\x75\x1a\x77\x36\xdf\x4a\xda\x99\xdf\x28\xdf\x66\x37\x5b\xf1\x00\x52\x55\x89\xcc\x36\xc3\xb1\x6d\x34\xde\xc7\xd4\xc6\x01\x44\x1c\xb5\x66\xdb\x9b\xc9\xdc\x26\x6f\x97\xa8\x27\x18\x69\xdc\x9f\xaf\x27\x29\xf1\x98\x52\xb1\x04\xfe\x9e\x5d\xab\x84\xcf\x9d\x1e\xf6\x94\x4a\xd8\xce\x04\x92\x5c\x1f\x36\x7c\x3e\x7b\x37\x1e\xce\x67\x27\xb0\x27\x3e\x2d\xdb\xee\xd8\x33\xb3\xed\x9d\xef\x65\xdb\x76\x9e\x84\x2e\xb2\x05\xb4\x17\x9a\xbd\x8e\x5c\x0f\xfb\x40\x5b\x97\xa3\xd1\x87\xf7\x51\xc6\x99\xc0\xd4\x0c\xe0\x60\xc3\xe4\x41\x7f\xdc\x3d\x95\xd6\xc0\xd4\xe9\x72\x16\x8e\xf6\x1e\x59\xd5\xcd\xa3\x34\xfa\x62\xea\x51\xd3\xb6\x26\x6f\xd4\x8a\xae\x22\x9f\x33\x51\xe1\x25\x2b\x0a\x3b\x15\x51\x5f\xee\xa0\xc0\x65\xe6\xb7\x7a\xbd\xf9\xb4\x28\x1e\x60\x7c\xa5\x70\x65\x3d\x76\x9c\x6f\x4c\x1a\x6b\xa3\x46\xb7\x0b\x10\x2e\x24\xe8\x93\xc2\xf9\xaa\xd1\x3c\x9f\xa7\x96\x89\xa0\xd7\xc9\x75\x2f\x9b\x86\x55\xdb\xbb\x4c\x54\xb6\x38\x35\xe6\x94\x1a\xc9\x3b\x99\x71\x8d\xa9\x89\x9a\x85\x5f\x49\xe2\x97\x3c\x52\x34\x80\xcf\x99\x58\x9b\x9b\xec\x66\xf9\x46\xab\x59\xe3\xbc\x55\xe8\xaf\xe0\x35\x6e\x62\x77\x71\x3a\x4f\x68\x90\xe5\xd2\xa0\xce\x59\x8a\x4b\x37\x0b\x12\x6a\x9b\x30\x75\x20\x6c\x0e\xb6\xc6\x87\x46\x3f\x6c\xba\xa3\xc3\x45\xca\x73\x37\x67\xbf\xc2\x71\x35\xb9\x54\x19\x5a\xad\xf9\xcc\x24\x6f\x0a\xcd\xa5\x11\x32\x6a\xf7\xed\xdc\xa2\x1b\x5d\xb6\xb8\xe2\xdd\xd2\x84\x4e\x6b\x6d\x47\x3c\x1b\x2f\x07\x37\x12\x07\x2e\x2b\x68\xaa\x4d\x6c\xdd\x7e\x54\xf7\x51\xc7\x09\x67\x83\x0a\x20\x19\xa5\xcc\x66\x19\x81\xe2\x8b\xc7\xbd\x34\x1e\xd6\xe4\x4d\x45\x76\x86\x7e\x8c\x56\xff\xde\x5a\xe5\xd6\xe9\x29\x94\x5f\x45\xf2\x5a\xeb\x2b\xf5\x51\xdd\xbb\x79\xcf\x5b\xa4\xa4\x3b\x3e\x86\xa1\x2a\xcd\x44\x63\x69\xdf\x5b\xf2\xd0\x78\xe2\x81\xc9\x85\x99\xd2\xc3\xec\x7e\x8a\x12\xcc\x14\x35\x1e\x96\xf4\xfa\x70\x6d\xc0\x67\x26\xd8\x40\x1e\x86\xe9\xb6\xa9\x1f\x1b\x1f\xbd\x99\xfa\x51\xda\x04\x65\xfb\xdc\x6e\x4c\xd6\x21\x68\xdf\x2d\xbd\xef\x0d\x6a\xf9\xf4\x68\xa5\x17\xab\x6b\xb3\x8f\x68\xfc\x07\x6d\xf2\x74\x07\xca\x3d\xc6\xd3\x66\x00\xde\x25\x6b\x07\x5e\x38\x75\x81\xee\xa7\x7a\x35\xf8\x06\x3f\x78\xca\xad\x7e\x9d\xcb\xd4\x59\x6e\x50\xef\xf3\x8c\xfb\xd1\x2f\x52\xf6\x59\xe7\x1f\x6e\x2b\xf6\xbc\x11\xc9\x45\xf7\x49\x57\x87\x7f\x04\x00\x00\xff\xff\xa6\x4f\x56\x2b\xbc\x15\x00\x00")

func templates17_upsertTplBytes() ([]byte, error) {
	return bindataRead(
		_templates17_upsertTpl,
		"templates/17_upsert.tpl",
	)
}

func templates17_upsertTpl() (*asset, error) {
	bytes, err := templates17_upsertTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/17_upsert.tpl", size: 5564, mode: os.FileMode(420), modTime: time.Unix(1527689483, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_testSingletonMssql_main_testTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\xdf\x53\xdb\xc6\x13\x7f\x96\xfe\x8a\xfd\x7a\x26\x89\xc4\x57\x3d\x92\xa6\xd3\x07\x32\x9e\x8c\xb1\x45\xc2\x04\xdb\xc4\x52\x9b\x76\x08\x85\xb3\xb4\x82\x9b\x48\x27\xfb\xee\x04\x71\x29\xff\x7b\xe7\xee\x24\x59\x26\xd8\x0d\x7d\x29\x2f\xd6\xed\x7e\xf6\xf7\xed\xee\x71\x43\x05\x88\xab\xaf\xe3\x28\xfa\x78\xf2\x05\x57\xd0\x07\x81\x57\xf8\x75\x41\xc6\x95\x54\xc3\xb2\x58\xb0\x1c\xbd\x4b\xef\x6d\xe1\xff\x31\x38\x89\xc3\x19\xc4\x83\xc3\x93\x10\xc8\xde\x60\x34\xfa\x2c\xff\x3f\x9c\x4e\xa2\x78\x36\x38\x9e\xc4\x40\xf6\xe0\x68\x3a\x0b\x8f\xdf\x4d\xe0\x43\xf8\x3b\xd9\x7b\x4b\xf6\x3e\xf3\xb7\xb3\xf0\x28\x9c\x85\x93\x61\x18\x91\xbd\x4b\xdf\x75\xd5\x6a\x81\x50\x48\xb9\xcc\x63\x94\x0a\x05\x48\x25\xaa\x44\xc1\x9d\xeb\xa4\xf3\x61\xc9\x39\xe8\xbf\x3d\xb9\xcc\xc9\xe8\x50\xd3\x26\xb4\x40\x43\x93\x4a\x30\x7e\xe5\x3a\xd7\xa5\x54\x00\x1b\xa4\x4a\xa2\x78\x40\x5a\x50\x29\x1f\x90\xa4\xcc\x8b\x32\xc5\x0d\x54\x29\x1a\x5d\x8c\x2b\xd7\x51\x28\xd5\xe8\xd0\x98\xac\x21\xf7\xae\x9b\x55\x3c\x01\xc6\x99\xf2\x7c\xeb\xe6\x98\x32\x0e\x7d\x78\xde\x09\xe3\xee\xbe\x45\x7a\x05\xec\x75\x38\x3e\x48\x54\xd5\xc2\xf3\x01\x85\x28\x85\xd6\xa0\x73\x8e\x42\x58\x82\xeb\x3a\x37\x6c\x81\x82\x44\xa8\x46\x98\xd1\x2a\x57\x5e\xcf\xc8\x13\x99\x5c\x63\x41\x7b\x01\xf4\xd2\x79\xd9\xf3\x77\x00\x6d\x64\x1a\xa9\x44\x85\xbb\xa0\x3a\xe2\x5e\x00\xaf\x7e\x7a\xfd\xda\x77\x5d\xa7\x20\x75\x86\xfb\x60\x25\xde\xa1\x8a\x4c\xe4\x8d\x40\x3a\xe7\xb4\x30\x2a\x0b\x62\x52\xbf\x15\xa9\xb9\x16\x67\xea\xb1\x15\xa7\xb9\x16\x67\x8a\xb4\x15\xa7\xb9\x35\x4e\x97\xa9\x83\x3b\xe6\x9b\xf1\x18\x50\x53\xde\xad\xfa\x9a\x2c\xe9\xb8\x75\xfa\xfb\x70\x43\x73\x4a\x0e\xf1\x8a\xf1\x5f\x69\xce\x52\xaa\x58\xc9\x3d\x9f\xd4\x07\xf4\x5c\xc7\x31\x10\xab\x67\x52\xaa\xb0\x58\xa8\x95\xb7\x33\xae\x00\x36\x8f\x4f\xd3\x61\x73\xd8\xea\xa8\x8f\x8d\x8e\x49\xa9\x3c\xf3\x11\x2e\x2b\x9a\x4b\x6f\x7b\x42\x02\x78\xd9\x2a\xb1\x94\xa7\x7a\xd2\xd4\xbd\x55\xd3\x12\x9e\xa6\xa7\xcd\x7a\xab\x68\x4d\x71\x1d\x9f\x0c\xaf\x31\xf9\xe2\xe9\x9a\xb0\xcc\x74\xc5\xff\xfa\xc0\x59\xae\xfb\xc4\x11\xa8\x2a\xc1\x35\xd5\x75\xee\x5d\xd7\xd9\xdf\x87\xa1\x40\xaa\x10\x28\x08\xca\xd3\xb2\x60\x7f\x62\x0a\xe9\x1c\xb4\x6b\x44\xdf\x82\x4e\x07\xf7\xd7\x18\x12\x29\x3a\xcf\xd1\x32\xbc\xe6\xd2\x77\x8c\xf6\xa1\x20\xa9\x28\x17\xb1\x11\xf7\xfc\x37\xbb\x5d\xe9\x8a\x25\xc6\xa3\xef\x14\x74\x1d\x0b\x1f\x16\x29\x1c\xf4\x01\xbf\x62\x42\x86\x65\x51\x50\x9e\x7a\x3d\xb9\xcc\x93\x22\xd5\x5d\xfc\x43\xd4\x0b\xc0\xf6\x9b\x3e\xfd\x62\x4e\xfa\x42\xe9\xd3\xa9\x39\xe9\xee\xd0\xa7\xd4\x9c\xd6\x61\xeb\xa0\xb2\xc0\x78\x71\xd0\x87\x52\x92\xe9\x02\xb9\xd7\x33\xf1\xcb\x0b\x3b\x52\x88\x5c\xe6\xba\x69\x76\x65\xbc\x14\x92\x7c\x12\x74\xe1\xa1\xd0\x56\x33\xca\x72\x4c\x41\x95\x50\x2e\x90\xc3\x37\xea\x20\x63\xb9\x99\x12\x3a\xc6\x14\x33\x14\x90\x91\x61\x5e\x4a\x34\xb5\x6d\xa3\x26\x91\x4a\xcd\xf4\xe4\x78\x7b\xf4\x01\x57\x23\x94\x4a\x94\x2b\x14\x5e\x67\x0b\x05\x90\x6d\xd4\xa6\x2b\x4d\x85\xda\x99\xe5\xad\x7e\x4b\x2d\x0a\x36\xc7\x90\xd8\x9c\x37\x0e\x3f\x62\xe9\x13\x65\x8f\x19\xca\x0a\x45\x4e\x05\xe3\x2a\xe7\xda\x82\xff\x7d\xb6\x6f\x29\x53\x90\x95\x62\x8b\xf9\x5a\x03\x67\xf9\x8e\x2d\x22\xf3\x71\x99\xa2\x67\x66\x9c\x5d\x4e\x7e\xfd\xab\x1d\x93\xb7\x4c\x25\xd7\x60\xb8\x77\xae\x93\x50\x89\xf5\x32\x38\x58\xbb\x68\x09\x0d\x37\xa3\xb9\xdc\x64\x5b\x8a\xa9\x9f\xde\x19\x5d\x56\xca\xa4\x2e\x79\x4f\x3b\xbc\xd5\xc7\xcd\x56\x58\x2f\x3c\x7d\x3f\x0e\xfa\xa0\x73\x17\x2d\x74\xf2\x32\xef\xd2\x75\x86\xb3\x70\x10\x87\x30\x1a\xc4\x83\xc3\x41\x14\xc2\x33\xf9\xc6\x75\xde\x4d\x5d\xc7\x3e\x34\xd6\xf4\xb3\x57\xe7\xd2\x75\xa2\x30\x86\x59\x38\x18\x5d\x0c\xa7\xe3\xf1\x71\x1c\x87\xa3\x8b\x68\x32\x38\x8d\xde\x4f\x63\x98\x4e\x8c\xe8\xe5\xc3\x56\x68\xdc\x2f\x88\xa8\xf8\xb0\x48\x3d\xb9\xcc\x03\x78\x7a\xa3\xf9\xdb\x63\xee\x4e\x8d\x75\xc4\xfb\xfb\x10\x31\x9e\x20\x8c\x23\x88\x3e\x9e\xc0\x8f\x2f\x5f\xfd\x0c\x4c\x41\x42\x39\xcc\x11\xd2\x92\x23\xdc\x32\x75\x6d\x90\xa3\xd9\xf4\x74\x1d\xee\x19\x1c\x1f\x41\xf8\xdb\x71\x14\x47\x70\x0e\x77\x90\x52\x45\xe7\x54\xe2\x85\x9e\x71\xf0\xd7\xfa\x2c\x39\x5d\xc8\xeb\x52\x59\xc6\x3d\x9c\x41\x40\x08\xe1\x70\x0e\x67\x6f\xce\xb7\x25\xbd\xd5\xed\x45\xe1\x49\x38\x8c\xcd\xe4\x84\xa3\xd9\x74\x0c\x72\x25\x49\xa3\x5c\x82\xeb\x38\x9f\xde\x87\xb3\xd0\x02\xfa\xf0\xe2\x99\x7c\xa1\x6f\xfb\xa6\xb3\xcf\xe4\x23\x79\xff\x0f\xaa\xa0\x90\x8a\xb4\xbc\xe5\xdd\x1a\xb0\x4c\x0f\x75\xfb\xa8\xec\x74\x70\x43\x6b\xa7\x53\x77\x02\x1c\x3c\x71\x11\x7c\x5f\xef\x36\x61\xeb\xd1\x17\x34\xcd\x5f\x37\x6f\x00\x54\x5c\x49\x20\x84\x34\x4d\xdd\x06\x90\x3c\xb2\x24\x6a\x61\x2b\x45\x08\xf1\x0d\xac\x9d\xaa\x56\x87\x24\x13\xbc\x9d\x21\x4d\x51\x58\xa3\x7a\x9a\x4a\x95\x96\x95\xd2\x0a\x9f\xcf\x57\x0a\x25\x39\xac\xb2\xcc\xbc\x5c\x35\xab\x0e\xfe\x1b\x56\xad\x5c\x4b\x6a\xed\xfa\xa3\x25\xda\x91\x69\x85\xbb\x19\xd4\xec\x59\xc5\xff\x61\x7a\x36\xe3\x51\x54\x9c\x33\x7e\x75\xd0\x6b\x33\x63\x83\xf3\x1f\xe0\xad\xf1\xfa\xd5\xe1\xf9\x8f\xb0\x51\x88\x0d\xf6\xbf\x29\x55\x52\x72\x7d\x89\xbc\xfa\x3f\x90\xc0\x56\xc3\xdf\x71\x9f\xda\xcb\x6d\x59\x81\xd1\x6f\xec\x6d\xbe\xf3\x9d\x35\xa2\x4e\xdc\x32\xaf\x97\xb3\xf1\xa0\x17\x40\x2a\xd8\x0d\x0a\x62\xd6\xe0\x61\xc5\xf2\xf4\x63\x85\x62\x55\x87\xd4\x74\x44\xb3\xfa\x1f\x76\x9c\xed\x1e\xfb\x58\xd6\xbf\xf5\x33\xcb\xdf\xb5\xe7\x39\xcb\x83\x6f\xf2\xb3\x19\xc9\xbd\xfb\x77\x00\x00\x00\xff\xff\x53\x20\x2b\xd4\x23\x0e\x00\x00")

func templates_testSingletonMssql_main_testTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonMssql_main_testTpl,
		"templates_test/singleton/mssql_main_test.tpl",
	)
}

func templates_testSingletonMssql_main_testTpl() (*asset, error) {
	bytes, err := templates_testSingletonMssql_main_testTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/mssql_main_test.tpl", size: 3619, mode: os.FileMode(420), modTime: time.Unix(1527187208, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_testSingletonMssql_suites_testTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\xb1\x8e\x83\x30\x10\x44\x7b\xbe\x62\x84\x28\xe0\x04\xfe\x80\x93\xae\xba\xea\xae\x48\x11\x91\x0f\x70\xc2\x82\x2c\x39\x1b\x84\x17\x29\x92\xf1\xbf\x47\x18\x8b\x90\xce\xe3\x99\xb7\x3b\xdb\xcf\x7c\x43\x4b\x4e\x2e\xa3\xa3\x49\x4a\xc1\x97\x90\x13\xc3\x83\x6a\x2b\xf8\x0c\xf0\xbe\xc1\xa4\x79\x20\x14\x86\x3b\x7a\xd6\x28\x44\x5f\x2d\xe1\xfb\x07\xaa\x5d\x5f\x2e\x84\x94\x33\x7d\x32\xd5\x9f\xfb\x7f\x18\x8e\x36\x9a\xdd\x27\xeb\x8e\x72\xcb\x9e\xf4\x3d\x0e\x4b\x64\x94\x0b\x46\x3b\x4f\xda\x62\x81\x18\xb1\xf4\xab\x77\x50\xd4\x79\xe6\x32\xf7\xfe\x4d\x87\x90\xd7\x58\x6b\x7f\x7e\x6e\x27\x55\x71\x19\x71\x77\xec\x91\x54\xc8\x5e\x01\x00\x00\xff\xff\x2f\xea\xf2\xb5\x00\x01\x00\x00")

func templates_testSingletonMssql_suites_testTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonMssql_suites_testTpl,
		"templates_test/singleton/mssql_suites_test.tpl",
	)
}

func templates_testSingletonMssql_suites_testTpl() (*asset, error) {
	bytes, err := templates_testSingletonMssql_suites_testTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/mssql_suites_test.tpl", size: 256, mode: os.FileMode(420), modTime: time.Unix(1527186990, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_testSingletonMssql_upsertTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x53\x4d\x6f\xda\x40\x10\x3d\x7b\x7f\xc5\xd4\x52\x24\xaf\xb2\x72\x9a\x6b\x23\x2a\xd1\xe0\x26\x54\xc4\x40\x6c\xda\x03\xe1\xb0\xe0\x31\x59\xc9\x2c\x68\x3f\x50\xa3\x2a\xff\xbd\x1a\xdb\x94\xcf\x4a\x55\x2f\xe0\x9d\x8f\xa7\x37\xef\xcd\xdc\xdc\xc0\xdc\xab\xaa\x98\x6c\x2c\x1a\x37\xf6\x68\xde\x9e\xb2\x6c\x3c\x68\xa2\x16\x24\xd0\xc3\x3a\xe9\x70\x85\xda\x81\x75\x46\xe9\x25\x78\x4b\xbf\xee\x15\xc1\xd7\x8d\x3d\xe9\x24\x6c\xcc\x7a\xab\x0a\x2c\x62\x56\x7a\xbd\xb8\x8c\x1b\x15\x4a\x42\x61\xd4\x16\x8d\x8d\x7b\x4a\x56\xb8\x70\x02\x9c\x9c\x57\x98\xca\x15\xb6\xf8\x02\x36\x46\xad\xa4\x79\x13\xe0\x37\x85\x74\x28\x40\x69\x02\x82\xe9\x6c\x57\xb1\xf6\x6e\xe3\xf7\x01\xbe\xa3\xf6\x8b\x05\x6d\x6d\x87\x42\x2b\xa9\x97\x15\xc6\xfd\x02\xb5\x1b\xfb\xb5\xc3\xac\x52\x0b\x24\x1a\xf1\x60\x2c\x80\xfe\x9f\xc7\x3b\x78\xce\x58\x30\xf7\x25\x7c\x3a\x6c\x7d\x40\xf7\xc5\x97\x25\x9a\x88\xb3\xa0\xc0\x12\xcd\x41\x72\xe4\x77\xc9\xb9\x2f\xa9\xdd\x3a\x69\x5c\x5f\x17\xf8\x93\x50\x6e\x19\x0b\xca\x95\x8b\xbf\x6e\x8c\xd2\xae\xa4\x22\x01\xe1\x53\xf2\xfc\x90\x40\x3f\xcd\x87\x70\x65\x41\x5a\x98\xba\xd9\x8b\x0e\x0f\x74\xe0\x97\xda\x26\x59\x3f\x7d\x80\x28\x4b\x06\xc9\x7d\x0e\x57\x96\xd7\xad\x76\x06\xd1\xf4\xca\xce\x38\x21\xb0\x20\x38\xe0\x56\xc9\x05\xbe\xae\xab\x02\x8d\xad\x07\x9e\x58\xac\x99\x1d\x26\x04\x54\xa8\xa3\x56\x6e\x2e\x60\xcf\x5f\xc0\x2d\x6f\x01\x95\x5e\xda\xf8\xdb\x5a\xfd\x29\x14\xad\xda\x51\xa3\x1f\xbf\x0e\x45\x78\x7d\x10\x1a\x8c\x39\x3f\x9a\xa1\x1d\x61\x98\x42\x14\x52\x62\x6d\x40\x09\xd8\x92\x46\x46\xea\x25\xee\x0c\x27\xfb\x02\x55\x82\x82\x0f\x1d\xf8\x58\xbf\xce\x51\xa0\x9b\xf6\x80\x60\x82\x77\x16\x5c\x10\x6a\x6a\x67\x31\x49\x02\x1d\x52\xb6\xfe\x0c\x05\x6c\x05\x6c\x39\xa3\x96\x33\x40\xd2\xee\xc4\xbc\xeb\xce\x91\x30\xec\x42\xd7\x8f\xc7\x24\x85\xa7\x6e\x7e\xff\x98\xf4\x20\xa7\x47\x78\xd9\xb7\x51\xaf\x9b\x27\x90\x25\x64\x5a\xed\xf3\xde\xa3\x0c\xdd\x48\x1a\xb9\x22\xd3\x6d\x74\xac\xe0\xa9\xc8\xc7\xe6\x34\x87\xc1\x2f\xd3\x6e\x93\x7f\x65\x9d\x0e\xf3\x7f\x61\xde\x4f\xb3\xe4\x39\x87\x88\x76\xed\x7b\x77\x30\x49\xb2\xfa\x3b\x3c\x5b\x8b\xe6\x7c\x04\x84\x24\xe6\x7f\x6f\x61\x7b\x84\xa7\x4b\x48\x63\xa8\xb2\xae\x68\x8e\x9e\xc3\xe7\x76\x37\xce\x29\xbf\xe8\xe1\x24\x1f\x4d\x72\x68\xb8\x27\xbd\xda\xfe\xbb\x70\x27\x66\x4b\xb8\x01\x12\x10\xce\xc4\xbe\x30\xa4\x9d\x7d\x07\xac\x2c\x9e\xa0\xb7\xe0\x77\x61\xbd\x40\x2c\x30\xe8\xbc\xd1\x30\xf7\x65\x9c\x35\x1e\x71\xf6\xce\x7e\x07\x00\x00\xff\xff\xa0\xc3\x9b\xd6\x4d\x05\x00\x00")

func templates_testSingletonMssql_upsertTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonMssql_upsertTpl,
		"templates_test/singleton/mssql_upsert.tpl",
	)
}

func templates_testSingletonMssql_upsertTpl() (*asset, error) {
	bytes, err := templates_testSingletonMssql_upsertTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/mssql_upsert.tpl", size: 1357, mode: os.FileMode(420), modTime: time.Unix(1527189479, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_testUpsertTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x54\x4d\x6f\xda\x40\x10\x3d\x7b\x7f\xc5\x14\xb5\x95\x5d\x39\x1b\xf5\x9a\x8a\x43\x42\x72\xa8\xaa\x22\x14\xcc\x0f\xd8\xd8\x63\xb2\x62\xd9\xb5\x76\xc7\x09\x74\xb3\xff\xbd\x5a\x1b\x12\xc2\x87\x84\x54\x55\x6a\x0f\x20\x31\xbc\xf7\xe6\xcd\xf3\x8c\xbd\xbf\x80\x8f\x24\x1e\x14\x8e\xc5\x12\xa7\x52\xcf\x5b\x25\x2c\x5c\x0d\x81\x17\xb1\xca\x63\x19\x5e\xc0\x6d\xff\x79\x01\x92\xa4\x70\x24\x1c\xc2\x45\x08\xec\xbd\xc0\x44\xb5\x56\xa8\x43\x7a\xd3\xd7\x8f\x92\x9f\x84\x3d\x8b\x5a\x8a\x25\xaa\xa3\xd4\xb3\x6c\xbf\xa7\xd7\xad\x2e\x81\xd0\x91\xf7\xfb\xee\x43\x98\x35\x0e\x2d\xa5\x04\x5f\x22\x42\xea\x39\x2f\x32\xf0\x2c\x21\x3e\x11\x56\x28\x85\x2a\xcd\x18\x4b\x64\x0d\x0a\x75\xea\xfd\xbe\x8f\x10\x46\x46\xb5\x4b\xed\x32\x18\x0e\x4f\x62\x26\x56\x2e\x85\x5d\xff\xc0\xf5\x2b\xda\xb3\x24\x21\x3e\x5d\xc8\x26\x1d\xc4\xef\x46\xea\x39\x74\xf6\xe0\x59\xd2\x23\x18\xad\xd6\xd0\xf4\x3c\x58\xe0\x1a\xca\x9e\x39\xc8\x58\x12\x18\x4b\x1c\x62\x15\x43\xb0\x42\x57\x66\x29\x7f\x21\x1f\xe3\xf3\x14\xb1\x4a\x33\x96\x3c\x09\x0b\x68\xbb\x8f\xb1\x2c\xb9\xbc\x84\x6b\x22\x5c\x36\x04\xf4\x88\xf0\x7d\x3c\xbd\xbb\x2f\xc0\xc9\x0a\xc1\xd4\x20\x34\xcc\x26\xb1\xc2\x12\x13\x15\x77\x63\x7a\x1b\xc1\x87\x2e\x85\xa8\xba\xdb\x74\x4a\xb6\x2d\x29\x8d\x6e\x72\xf8\x6c\x72\x38\x36\xfe\xed\x4d\xb1\x6e\xd0\xe5\x40\xb6\xc5\xec\x5b\x27\xf2\x61\x08\x5a\xaa\x4d\x0c\x77\xd1\x67\x9d\x0e\x66\xba\x0b\x80\xcc\x5b\x87\x13\x76\xc0\x75\x8d\xaf\xe0\x93\x1b\xe4\x51\x70\x13\x8b\xf7\xb2\x06\x6d\x08\xf8\xd8\x8c\x8c\x26\x5c\x51\x08\x25\xad\xe2\x60\x65\xff\x9b\xdf\x88\x72\x31\xb7\xa6\xd5\x55\x9a\x79\x8f\xba\x0a\x81\x25\x3d\xe4\x67\xeb\xa8\x58\xa5\x9d\xca\xae\xc2\x41\xe1\xc1\x48\xc5\x6f\x70\x2e\x75\xa7\xa1\x1c\xee\xd6\x8a\x55\x5a\xd2\x2a\x8f\x13\x6e\x3b\x9c\x05\xca\x58\x52\x61\x8d\x16\x68\xc5\xef\x8d\x52\x0f\xa2\x5c\xc4\xe7\xf9\x1a\xbc\xe1\x9b\x85\x3d\x35\x67\x7c\x00\xa8\xab\xb8\xf8\xb0\x15\x3f\x2b\xf0\xb6\xd3\x3d\x91\xf6\x41\xcc\xa5\x69\x35\x75\x85\xfd\x8d\xd9\x1e\x56\x9a\xf1\x51\x04\x9d\xe9\xf4\x6d\xc8\x43\x9f\xe9\xb6\x6f\x84\x74\x9d\x23\xe8\xeb\x3b\xc8\xe0\x59\x68\x02\xa3\x11\x2c\x96\xc6\x56\x39\xcc\x0d\x5d\x0d\xf2\x1e\xbf\x71\xbd\x77\x07\xb3\xc9\xed\x75\x71\x77\xec\x0e\xfe\x78\xd1\x6b\xa1\x1c\x1e\xc7\x1c\xbc\x0b\x38\xe7\x7f\xf7\x26\xfe\xe5\xed\xf9\x5f\x96\x27\xb0\xdf\x01\x00\x00\xff\xff\x59\x1c\xa8\x05\x3f\x07\x00\x00")

func templates_testUpsertTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testUpsertTpl,
		"templates_test/upsert.tpl",
	)
}

func templates_testUpsertTpl() (*asset, error) {
	bytes, err := templates_testUpsertTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/upsert.tpl", size: 1855, mode: os.FileMode(420), modTime: time.Unix(1527866134, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/17_upsert.tpl": templates17_upsertTpl,
	"templates_test/singleton/mssql_main_test.tpl": templates_testSingletonMssql_main_testTpl,
	"templates_test/singleton/mssql_suites_test.tpl": templates_testSingletonMssql_suites_testTpl,
	"templates_test/singleton/mssql_upsert.tpl": templates_testSingletonMssql_upsertTpl,
	"templates_test/upsert.tpl": templates_testUpsertTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"17_upsert.tpl": &bintree{templates17_upsertTpl, map[string]*bintree{}},
	}},
	"templates_test": &bintree{nil, map[string]*bintree{
		"singleton": &bintree{nil, map[string]*bintree{
			"mssql_main_test.tpl": &bintree{templates_testSingletonMssql_main_testTpl, map[string]*bintree{}},
			"mssql_suites_test.tpl": &bintree{templates_testSingletonMssql_suites_testTpl, map[string]*bintree{}},
			"mssql_upsert.tpl": &bintree{templates_testSingletonMssql_upsertTpl, map[string]*bintree{}},
		}},
		"upsert.tpl": &bintree{templates_testUpsertTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

